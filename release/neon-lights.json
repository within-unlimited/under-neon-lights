{
	"config": {},
	"libraries": [
		"release/third-party/url.js",
		"release/third-party/has.js",
		"release/third-party/signals.min.js",
		"release/third-party/tween.js",
		"release/third-party/three.js",
		"release/third-party/dat.gui.js",
		"release/third-party/three/js/ShaderPass.js",
		"release/third-party/three/js/effects/VREffect.js",
		"release/third-party/three/js/loaders/FBXLoader2.js",
		"release/third-party/three/js/controls/DeviceOrientationControls.js",
		"release/third-party/three/js/controls/VRControls.js",
		"release/third-party/three/js/vr/MouseController.js",
		"release/third-party/three/js/vr/DaydreamController.js",
		"release/third-party/orientation-arm-model.js",
		"release/third-party/three/js/vr/ViveController.js",
		"release/third-party/three/js/controls/OrbitControls.js",
		"release/src/utils/NeonShader.js",
		"release/src/utils/WebAudio.js"
	],
	"includes": [
		[
			"Ease",
			[
				"var Ease = function( value, drag ) {",
				"",
				"\tthis.original = value || 0;",
				"",
				"\tthis.value = this.original;",
				"\tthis.destination = this.original;",
				"",
				"\tif ( ( typeof drag ) == 'number' ) {",
				"\t\tthis.drag = drag;",
				"\t}",
				"",
				"};",
				"",
				"Ease.Resolution = 50;",
				"",
				"Ease.prototype = {",
				"",
				"\tdrag: 0.33,",
				"",
				"\tinitial: true,",
				"",
				"\tupdate: function( timeDelta ) {",
				"\t\tif ( this.initial ) {",
				"\t\t\tthis.initial = false;",
				"\t\t\treturn this;",
				"\t\t}",
				"\t\tif ( ( typeof timeDelta ) == 'number' ) {",
				"\t\t\tvar drag = timeDelta * this.drag * Ease.Resolution;",
				"\t\t\tdrag = Math.max( Math.min( drag, 1 ), 0 );",
				"\t\t\tthis.value += ( this.destination - this.value ) * drag;",
				"\t\t\treturn this;",
				"\t\t}",
				"\t\tthis.value += ( this.destination - this.value ) * this.drag;",
				"\t\treturn this;",
				"\t},",
				"",
				"\tset: function(v) {",
				"\t\tthis.destination = this.value = v;",
				"\t\treturn this;",
				"\t},",
				"",
				"\tclear: function() {",
				"\t\tthis.destination = this.value = this.original;",
				"\t\treturn this;",
				"\t},",
				"",
				"\treset: function() {",
				"\t\tthis.value = this.destination;",
				"\t\tthis.initial = true;",
				"\t\treturn this;",
				"\t}",
				"",
				"};",
				"",
				"FRAME.addResource( 'Ease', Ease );"
			]
		],
		[
			"List",
			[
				"var List = function() {",
				"\tArray.call( this );",
				"};",
				"",
				"List.prototype = Object.create( Array.prototype );",
				"List.prototype.constructor = List;",
				"",
				"List.prototype.index = 0;",
				"List.prototype.exhausted = false;",
				"List.prototype.next = function () {",
				"\tvar index = this.index;",
				"\tthis.index = ( index + 1 ) % this.length;",
				"\tif ( !this.exhausted && this.index === 0 ) {",
				"\t\tthis.exhausted = true;",
				"\t}",
				"\treturn this[ index ];",
				"};",
				"",
				"FRAME.addResource( 'List', List );"
			]
		],
		[
			"Texture Animator",
			[
				"",
				"var TextureAnimator = function(texture, offsetRepeat, tilesHoriz, tilesVert) {",
				"\t// texture passed by reference, will be updated by the update function.",
				"",
				"\tthis.tilesHorizontal = tilesHoriz;",
				"\tthis.tilesVertical = tilesVert;",
				"\tthis.offsetRepeat = offsetRepeat;",
				"",
				"\tthis.texture = texture;",
				"\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping; ",
				"\ttexture.repeat.set( 1 / this.tilesHorizontal, 1 / this.tilesVertical );",
				"",
				"\t// which image is currently being displayed?",
				"\tthis._currentTile = this.currentTile = 0;",
				"",
				"}",
				"",
				"TextureAnimator.prototype.update = function() {",
				"\tvar currentColumn = this._currentTile % this.tilesHorizontal;",
				"\tthis.texture.offset.x = currentColumn / this.tilesHorizontal;",
				"\tvar currentRow = Math.floor( this._currentTile / this.tilesHorizontal );",
				"\tthis.texture.offset.y = ( - currentRow - 1 ) / this.tilesVertical;",
				"\tthis.offsetRepeat.set( this.texture.offset.x, this.texture.offset.y, this.texture.repeat.x, this.texture.repeat.y );",
				"};",
				"",
				"Object.defineProperty(TextureAnimator.prototype, 'currentTile', {",
				"",
				"\tget: function() {",
				"\t\treturn this._currentTile;",
				"\t},",
				"",
				"\tset: function(i) {",
				"",
				"\t\tthis._currentTile = i;",
				"\t\tthis.update();",
				"",
				"\t\treturn this;",
				"",
				"\t}",
				"",
				"});",
				"",
				"FRAME.addResource( 'TextureAnimator', TextureAnimator );"
			]
		],
		[
			"Setup",
			[
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"(function() {",
				"",
				"\tif (window.console && window.console.log && !(/localhost/i.test(window.location.href))) {",
				"\t\tconsole.log(\"Think Under Neon Lights is pretty clever? There's more where that came from! http://github.com/within-unlimited/under-neon-lights/\");",
				"\t}",
				"",
				"})();",
				"",
				"var dom = FRAME.getDOM();",
				"var neon = new Ease( 0, 0.01 );",
				"",
				"neon.animate = true;",
				"",
				"neon.default = {",
				"\tneon: THREE.neonShader.globals.neon.value,",
				"\tsepia: THREE.neonShader.globals.sepia.value,",
				"\tsaturation: THREE.neonShader.globals.saturation.value,",
				"\tneonFade: THREE.neonShader.globals.neonFade.value,",
				"\tneonGlow: THREE.neonShader.globals.neonGlow.value,",
				"\tneonFreq1: THREE.neonShader.globals.neonFreq1.value,",
				"\tneonFreq2: THREE.neonShader.globals.neonFreq2.value,",
				"\tneonNearClip: THREE.neonShader.globals.neonNearClip.value,",
				"\tsepiaCol1: THREE.neonShader.globals.sepiaCol1.value.getHex(),",
				"\tsepiaCol2: THREE.neonShader.globals.sepiaCol2.value.getHex(),",
				"\tneonCol: THREE.neonShader.globals.neonCol.value.getHex(),",
				"\tfogCol: 0x333333",
				"};",
				"",
				"neon.active = {};",
				"neon.origin = { default: {}, active: {} };",
				"neon.target = { default: {}, active: {} };",
				"",
				"for ( var i in neon.default ) {",
				"\tneon.active[ i ] = neon.default[ i ];",
				"\tneon.origin.default[ i ] = neon.default[ i ];",
				"\tneon.origin.active[ i ] = neon.default[ i ];",
				"\tneon.target.default[ i ] = neon.default[ i ];",
				"\tneon.target.active[ i ] = neon.default[ i ];",
				"}",
				"",
				"neon.setLerpOrigin = function () {",
				"\tfor ( var i in neon.default ) {",
				"\t\tneon.origin.default[ i ] = neon.default[ i ]",
				"\t\tneon.origin.active[ i ] = neon.active[ i ]",
				"\t}",
				"}",
				"",
				"var c1 = new THREE.Color();",
				"var c2 = new THREE.Color();",
				"",
				"neon.lerpColor = function ( color1, color2, l ) {",
				"\tc1.setHex( color1 );",
				"\tc2.setHex( color2 );",
				"\treturn c1.lerp( c2, l ).getHex();",
				"}",
				"",
				"var vd, va;",
				"",
				"neon.lerp = function ( progress ) {",
				"\tvar t = TWEEN.Easing.Sinusoidal.InOut( progress );",
				"\tfor ( var i in neon.default ) {",
				"\t\tif ( i.search( 'Col' ) != -1 ) { // HACK: inferred type from name",
				"\t\t\tvd = neon.lerpColor( neon.origin.default[ i ], neon.target.default[ i ], t);",
				"\t\t\tva = neon.lerpColor( neon.origin.active[ i ], neon.target.active[ i ], t)",
				"\t\t} else {",
				"\t\t\tva = neon.origin.active[ i ] + t * ( neon.target.active[ i ] - neon.origin.active[ i ] );",
				"\t\t\tvd = neon.origin.default[ i ] + t * ( neon.target.default[ i ] - neon.origin.default[ i ] );",
				"\t\t}",
				"\t\tneon.default[ i ] = vd;",
				"\t\tneon.active[ i ] = va;",
				"\t}",
				"}",
				"",
				"neon.apply = function( scene ) {",
				"\tvar v;",
				"\tif ( neon.animate ) {",
				"\t\tfor ( var i in neon.default ) {",
				"\t\t\tif ( THREE.neonShader.globals[ i ] !== undefined ) {",
				"\t\t\t\tif ( THREE.neonShader.globals[ i ].type == 'f' ) {",
				"\t\t\t\t\tv = neon.default[ i ] + neon.value * ( neon.active[ i ] - neon.default[ i ] );",
				"\t\t\t\t\tTHREE.neonShader.globals[ i ].value = v;",
				"\t\t\t\t} else if ( THREE.neonShader.globals[ i ].type == 'c' ) {",
				"\t\t\t\t\tv = neon.lerpColor( neon.default[ i ], neon.active[ i ], neon.value );",
				"\t\t\t\t\tTHREE.neonShader.globals[ i ].value.setHex(v);",
				"\t\t\t\t}",
				"\t\t\t}",
				"\t\t}",
				"\t\tscene.fog.color.setHex( neon.lerpColor( neon.default.fogCol, neon.active.fogCol, neon.value ) );",
				"\t}",
				"}",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"if ( !renderer ) {",
				"\trenderer = new THREE.WebGLRenderer( { antialias: true } );",
				"\trenderer.domElement.style.position = 'absolute';",
				"\trenderer.domElement.style.top = 0;",
				"\trenderer.domElement.style.left = 0;",
				"\tdom.appendChild( renderer.domElement );",
				"}",
				"",
				"var scene = new THREE.Scene();",
				"scene.fog = new THREE.Fog( 0x333333, 0, 10 );",
				"scene.userData.clear = function() {",
				"",
				"\tvar children = scene.children.slice( 0 );",
				"\tfor ( var i = 0; i < children.length; i++ ) {",
				"\t\tvar child  = children[ i ];",
				"\t\tscene.remove( child );",
				"\t\tif ( child.dispose ) {",
				"\t\t\tchild.dispose();",
				"\t\t}",
				"\t}",
				"",
				"};",
				"",
				"var dolly = new THREE.Camera();",
				"var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 550 );",
				"camera.userData.targetY = 1;",
				"camera.position.y = camera.userData.targetY;",
				"",
				"dolly.userData.distance = 2;",
				"dolly.userData.target = new THREE.Vector3( 0, 0, 0 );",
				"dolly.userData.reset = function() {",
				"",
				"\tdolly.position.copy( dolly.userData.target );",
				"\tdolly.position.z -= dolly.userData.distance;",
				"\tdolly.lookAt( dolly.userData.target );",
				"",
				"};",
				"",
				"// for animating mouth in editor -david",
				"// camera.position.z = - 1;",
				"// dolly.userData.target.y = 0;",
				"",
				"camera.userData.fov = {",
				"\tcurrent: camera.fov,",
				"\tdestination: camera.fov,",
				"\tdrag: 0.125,",
				"\tlimit: 0.01",
				"};",
				"",
				"dolly.add( camera );",
				"",
				"var controls = {",
				"\tvirtualReality: new THREE.VRControls( camera ),",
				"\tdeviceOrientation: new THREE.DeviceOrientationControls( camera ),",
				"\tupdate: function () {",
				"",
				"\t\tif ( controls.hasWebVR ) {",
				"\t\t\tcontrols.virtualReality.update();",
				"\t\t} else if ( has.mobile ) {",
				"\t\t\tcontrols.deviceOrientation.update();",
				"\t\t}",
				"",
				"\t}",
				"};",
				"",
				"controls.virtualReality.standing = true;",
				"",
				"var effect = FRAME.getResource( 'effect' );",
				"if ( !effect ) {",
				"\teffect = new THREE.VREffect( renderer );",
				"}",
				"",
				"if ( navigator.getVRDisplays ) {",
				"",
				"\tnavigator.getVRDisplays()",
				"\t\t.then( function ( displays ) {",
				"",
				"\t\t\tcontrols.hasWebVR = true;",
				"",
				"\t\t\tvar hmd = displays[ 0 ];",
				"\t\t\teffect.setVRDisplay( hmd );",
				"\t\t\tcontrols.virtualReality.setVRDisplay( hmd );",
				"",
				"\t\t\twindow.addEventListener( 'vrdisplayactivate', function () {",
				"\t\t\t\tcontrols.virtualReality.resetPose();",
				"\t\t\t}, false );",
				"",
				"\t\t\twindow.addEventListener( 'vrdisplaypresentchange', function () {",
				"\t\t\t\tif ( !effect.isPresenting ) {",
				"\t\t\t\t\tcamera.position.y = camera.userData.targetY;",
				"\t\t\t\t}",
				"\t\t\t\tdolly.userData.reset();",
				"\t\t\t} );",
				"",
				"\t\t} )",
				"\t\t.catch( function () {",
				"",
				"\t\t} );",
				"",
				"}",
				"",
				"var resize = function ( event ) {",
				"",
				"\tvar width = dom.clientWidth || window.innerWidth;",
				"\tvar height = dom.clientHeight || window.innerHeight;",
				"",
				"\trenderer.width = width;",
				"\trenderer.height = height;",
				"",
				"\trenderer.setSize( width, height );",
				"\teffect.setSize( width, height );",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"\tif ( !effect.isPresenting ) {",
				"\t\teffect.render( scene, camera );",
				"\t}",
				"",
				"};",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"var isLocal = /localhost/i.test(window.location.href);",
				"var root = FRAME.getResource( 'root' ) || ( isLocal ? '../assets' : '//storage.googleapis.com/archive.jono.fyi/projects/within/under-neon-lights/assets' );",
				"",
				"var fbxLoader = new THREE.FBXLoader();",
				"var objectLoader = new THREE.ObjectLoader();",
				"var bufferGeometryLoader = new THREE.BufferGeometryLoader();",
				"var textureLoader = new THREE.TextureLoader();",
				"textureLoader.crossOrigin = 'anonymous';",
				"",
				"var clock = new THREE.Clock();",
				"var compass = {",
				"\ttheta: new Ease( 0, 0.66 ),\t\t\t// Angle of dolly in relation to Annie",
				"\tdirection: new Ease( 0, 0.125 ),\t// Angle Annie is heading",
				"\tstep: new Ease( 0.1, 0.0625 ),\t\t// Speed of Annie",
				"\tupdate: function ( dt, timelineDelta ) {",
				"\t\tcompass.theta.update( dt );",
				"\t\tcompass.direction.update( dt );",
				"\t\tcompass.step.update( timelineDelta );",
				"\t}",
				"};",
				"var audio = FRAME.getResource( 'audio' ) || createAudio();",
				"",
				"FRAME.addResource( 'bird', new THREE.Group() );",
				"",
				"FRAME.addResource( 'compass', compass );",
				"FRAME.addResource( 'clock', clock );",
				"FRAME.addResource( 'stages', [] );",
				"FRAME.addResource( 'audio', audio );",
				"",
				"FRAME.addResource( 'neon', neon );",
				"FRAME.addResource( 'renderer', renderer );",
				"FRAME.addResource( 'scene', scene );",
				"FRAME.addResource( 'dolly', dolly );",
				"FRAME.addResource( 'camera', camera );",
				"",
				"FRAME.addResource( 'controls', controls );",
				"FRAME.addResource( 'effect', effect );",
				"",
				"FRAME.addResource( 'root', root );",
				"FRAME.addResource( 'fbxLoader', fbxLoader );",
				"FRAME.addResource( 'objectLoader', objectLoader );",
				"FRAME.addResource( 'bufferGeometryLoader', bufferGeometryLoader );",
				"FRAME.addResource( 'textureLoader', textureLoader );",
				"",
				"function createAudio () {",
				"\treturn\t{",
				"\t\t// TODO: See what this returns in an <iframe />",
				"\t\tcontext: new ( window.AudioContext || window.webkitAudioContext )()",
				"\t};",
				"}"
			]
		],
		[
			"Controllers",
			[
				"var renderer = FRAME.getResource( 'renderer' );",
				"var v3 = new THREE.Vector3();",
				"var eu = new THREE.Euler();",
				"",
				"var controllers = {",
				"",
				"\tmouse: new THREE.MouseController( renderer.domElement ),",
				"\tdaydream: new THREE.DaydreamController(),",
				"\tleft: new THREE.ViveController( 0 ),",
				"\tright: new THREE.ViveController( 1 ),",
				"",
				"\tactive: '',",
				"",
				"\ttheta: null,",
				"\tdirection: null,",
				"",
				"\tmodelsLoaded: false,",
				"",
				"\taxes: {",
				"",
				"\t\ttype: '',",
				"\t\tprevious: new THREE.Vector2(),",
				"\t\tdelta: new THREE.Vector2(),",
				"\t\torigin: new THREE.Vector2(),",
				"\t\tdrag: 0.125,",
				"\t\tlastEvent: Date.now(),",
				"\t\teventTime: 350, // millis",
				"\t\treOculusTouch: /Oculus Touch/i,",
				"",
				"\t\tset: function ( type, data, now ) {",
				"",
				"\t\t\tvar axes = controllers.axes;",
				"\t\t\taxes.type = type;",
				"\t\t\t",
				"\t\t\tvar x = data[ 0 ];",
				"\t\t\tvar y = data[ 1 ];",
				"\t\t\t",
				"\t\t\tvar previous = axes.previous;",
				"\t\t\tvar delta = axes.delta;",
				"\t\t\tvar origin = axes.origin;",
				"\t\t\t",
				"\t\t\tprevious.set( x, y );",
				"\t\t\torigin.set( x, y );",
				"\t\t\tdelta.set( 0, 0 );",
				"\t\t\taxes.lastEvent = now;",
				"",
				"\t\t},",
				"",
				"\t\tupdate: function ( type, data, id ) {",
				"",
				"\t\t\tvar axes = controllers.axes;",
				"\t\t\tvar now = Date.now();",
				"\t\t\tvar dt = now - axes.lastEvent;",
				"",
				"\t\t\tif ( axes.type !== type || dt > axes.eventTime ) {",
				"\t\t\t\taxes.set( type, data, now );",
				"\t\t\t\treturn;",
				"\t\t\t}",
				"",
				"\t\t\tvar previous = axes.previous;",
				"\t\t\tvar delta = axes.delta;",
				"\t\t\tvar origin = axes.origin;",
				"",
				"\t\t\tvar x = data[ 0 ];",
				"\t\t\tvar y = data[ 1 ];",
				"",
				"\t\t\tvar isOculusTouch = id && axes.reOculusTouch.test(id);",
				"\t\t\tif ( isOculusTouch ) {",
				"\t\t\t\t// joystick axes",
				"",
				"\t\t\t\t// delta.x = ( x - previous.x ) * 4;",
				"\t\t\t\t// delta.y = ( y - previous.y ) * 4;",
				"",
				"\t\t\t\tdelta.x += x * 0.02;",
				"\t\t\t\tdelta.y += y * 0.02;",
				"",
				"\t\t\t} else {",
				"\t\t\t\t// touchpad axes",
				"\t\t\t\tdelta.x = x - previous.x;",
				"\t\t\t\tdelta.y = y - previous.y;",
				"\t\t\t}",
				"",
				"\t\t\tprevious.set( x, y );",
				"\t\t\taxes.lastEvent = now;",
				"",
				"\t\t},",
				"",
				"\t\ttick: function() {",
				"",
				"\t\t\tvar axes = controllers.axes;",
				"\t\t\tvar delta = axes.delta;",
				"",
				"\t\t\tvar limit = axes.drag / 10;",
				"\t\t\tif ( delta.x < limit && delta.x > - limit ) {",
				"\t\t\t\tdelta.x = 0;",
				"\t\t\t} else {",
				"\t\t\t\tdelta.x -= delta.x * axes.drag;",
				"\t\t\t}",
				"\t\t\tif ( delta.y < limit && delta.y > - limit ) {",
				"\t\t\t\tdelta.y = 0;",
				"\t\t\t} else {",
				"\t\t\t\tdelta.y -= delta.y * axes.drag;",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t},",
				"",
				"\tdeltas: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler()",
				"\t},",
				"",
				"\torigin: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tthresholds: {",
				"\t\t\tposition: 0.1,",
				"\t\t\trotation: 0.1",
				"\t\t},",
				"\t\tclicked: function ( controller ) {",
				"",
				"\t\t\tvar origin = controllers.origin;",
				"\t\t\tvar tp = origin.thresholds.position;",
				"\t\t\tvar tr = origin.thresholds.rotation;",
				"",
				"\t\t\tv3.x = Math.abs( controller.position.x - origin.position.x );",
				"\t\t\tv3.y = Math.abs( controller.position.y - origin.position.y );",
				"\t\t\tv3.z = Math.abs( controller.position.z - origin.position.z );",
				"",
				"\t\t\teu.x = Math.abs( controller.rotation.x - origin.rotation.x );",
				"\t\t\teu.y = Math.abs( controller.rotation.y - origin.rotation.y );",
				"\t\t\teu.z = Math.abs( controller.rotation.z - origin.rotation.z );",
				"",
				"\t\t\treturn v3.x < tp && v3.y < tp && v3.z < tp",
				"\t\t\t\t&& eu.x < tr && eu.y < tr && eu.z < tr;",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tdragging: function () {",
				"\t\treturn controllers.mouse.userData.dragging",
				"\t\t\t|| controllers.daydream.userData.dragging",
				"\t\t\t|| controllers.left.userData.dragging",
				"\t\t\t|| controllers.right.userData.dragging;",
				"\t},",
				"",
				"\tprevious: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tupdate: function ( controller ) {",
				"",
				"\t\t\tvar obj = controllers.previous;",
				"\t\t\tvar d = controllers.deltas;",
				"",
				"\t\t\td.position.subVectors( controller.position, obj.position );",
				"",
				"\t\t\td.rotation.x = controller.rotation.x - obj.rotation.x;",
				"\t\t\td.rotation.y = controller.rotation.y - obj.rotation.y;",
				"\t\t\td.rotation.z = controller.rotation.z - obj.rotation.z;",
				"",
				"\t\t\tobj.position.copy( controller.position );",
				"\t\t\tobj.rotation.copy( controller.rotation );",
				"",
				"\t\t},",
				"\t\tset: function ( controller ) {",
				"",
				"\t\t\tvar previous = controllers.previous;",
				"\t\t\tvar deltas = controllers.deltas;",
				"\t\t\tvar origin = controllers.origin;",
				"\t\t\t",
				"\t\t\tdeltas.rotation.x = deltas.rotation.y = deltas.rotation.z = 0;",
				"\t\t\tdeltas.position.set( 0, 0, 0 );",
				"\t\t\t",
				"\t\t\tprevious.position.copy( controller.position );",
				"\t\t\tprevious.rotation.copy( controller.rotation );",
				"",
				"\t\t\torigin.position.copy( controller.position );",
				"\t\t\torigin.rotation.copy( controller.rotation );",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tsetup: function( parent, effect, controls ) {",
				"",
				"\t\tcontrollers.daydream.quaternion = new THREE.Quaternion();",
				"\t\tcontrollers.daydream.arm = new OrientationArmModel();",
				"",
				"\t\tvar url;",
				"\t\tvar root = FRAME.getResource( 'root' );",
				"\t\tvar loader = FRAME.getResource( 'objectLoader' );",
				"",
				"\t\turl = root + '/models/controllers/controller-gray-only.json';",
				"\t\tloader.load( url, function ( obj ) {",
				"",
				"\t\t\tobj.traverse( disableFog );",
				"\t\t\tcontrollers.left.add( obj );",
				"",
				"\t\t} );",
				"",
				"\t\turl = root + '/models/controllers/controller-gyroscope.json';",
				"\t\tloader.load( url, function ( obj ) {",
				"",
				"\t\t\tcontrollers.right.userData.mesh = obj;",
				"\t\t\tcontrollers.daydream.userData.mesh = obj;",
				"",
				"\t\t\tobj.traverse( disableFog );",
				"\t\t\tcontrollers.modelsLoaded = true;",
				"",
				"\t\t\tvar textureLoader = FRAME.getResource( 'textureLoader' );",
				"\t\t\tvar geo = new THREE.PlaneBufferGeometry( 15, 15 );",
				"\t\t\tvar mat = new THREE.MeshBasicMaterial({",
				"\t\t\t\tmap: textureLoader.load(root + '/textures/press-to-start.png'),",
				"\t\t\t\ttransparent: true,",
				"\t\t\t\tside: THREE.DoubleSide",
				"\t\t\t});",
				"\t\t\tobj.userData.instructions = new THREE.Mesh( geo, mat );",
				"\t\t\tobj.userData.instructions.position.set( 0, 6, -15.5 );",
				"",
				"\t\t} );",
				"",
				"\t\tcontrollers.daydream.visible = controllers.left.visible",
				"\t\t\t= controllers.right.visible = false;",
				"\t",
				"\t\tcontrollers.left.standingMatrix = controls.getStandingMatrix();",
				"\t\tcontrollers.right.standingMatrix = controls.getStandingMatrix();",
				"",
				"\t\tparent.add( controllers.mouse );",
				"\t\tparent.add( controllers.daydream );",
				"\t\tparent.add( controllers.left );",
				"\t\tparent.add( controllers.right );",
				"",
				"\t\tvar clickTime = 0;",
				"\t\tvar isQuickClick = function () {",
				"\t\t\treturn ( Date.now() - clickTime ) < 10;",
				"\t\t}; ",
				"\t\tvar couldBeClick = function () {",
				"\t\t\treturn ( Date.now() - clickTime ) < 500;",
				"\t\t};",
				"",
				"\t\twindow.addEventListener( 'vrdisplaypresentchange', function () {",
				"\t\t\tif ( !effect.isPresenting ) {",
				"\t\t\t\tcontrollers.daydream.visible = controllers.left.visible",
				"\t\t\t\t\t= controllers.right.visible = false;",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\tcontrollers.mouse.addEventListener( 'mousedown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.mouse.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'mouse';",
				"\t\t\tcontrollers.previous.set( controllers.mouse );",
				"\t\t\tcontrollers.onTriggerDown( controllers.mouse );",
				"\t\t} );",
				"\t\tcontrollers.mouse.addEventListener( 'mouseup', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.mouse );",
				"\t\t\tif ( isQuickClick() || controllers.origin.clicked( controllers.mouse ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.mouse );",
				"\t\t\t}",
				"\t\t} );",
				"\t\tcontrollers.mouse.addEventListener( 'axischanged', function ( data ) {",
				"\t\t\tcontrollers.axes.update( 'mouse', data.axes );",
				"\t\t} );",
				"",
				"\t\tcontrollers.left.addEventListener( 'triggerdown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.left.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'left';",
				"\t\t\tcontrollers.previous.set( controllers.left );",
				"\t\t\tcontrollers.onTriggerDown( controllers.left );",
				"\t\t} );",
				"\t\tcontrollers.left.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.left.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.left );",
				"\t\t\tif ( isQuickClick() || controllers.origin.clicked( controllers.left ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.left );",
				"\t\t\t}",
				"\t\t} );",
				"\t\tcontrollers.left.addEventListener( 'axischanged', function ( data ) {",
				"\t\t\tif ( data.axes[ 0 ] !== 0 || data.axes[ 1 ] !== 0 ) {",
				"\t\t\t\tcontrollers.axes.update( 'left', data.axes, data.target.getGamepad().id );",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\tcontrollers.right.addEventListener( 'triggerdown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.right.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'right';",
				"\t\t\tcontrollers.previous.set( controllers.right );",
				"\t\t\tcontrollers.onTriggerDown( controllers.right );",
				"\t\t} );",
				"\t\tcontrollers.right.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.right.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.right );",
				"\t\t\tif ( isQuickClick() || controllers.origin.clicked( controllers.right ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.right );",
				"\t\t\t}",
				"\t\t} );",
				"\t\tcontrollers.right.addEventListener( 'axischanged', function ( data ) {",
				"\t\t\tif ( data.axes[ 0 ] !== 0 || data.axes[ 1 ] !== 0 ) {",
				"\t\t\t\tcontrollers.axes.update( 'right', data.axes, data.target.getGamepad().id );",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\tcontrollers.daydream.addEventListener( 'touchpaddown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.daydream.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'daydream';",
				"\t\t\tcontrollers.previous.set( controllers.daydream );",
				"\t\t\tcontrollers.onTriggerDown( controllers.daydream );",
				"\t\t} );",
				"\t\tcontrollers.daydream.addEventListener( 'touchpadup', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.daydream );",
				"\t\t\tif ( isQuickClick() || controllers.origin.clicked( controllers.daydream ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.daydream );",
				"\t\t\t}",
				"\t\t} );",
				"\t\tcontrollers.daydream.addEventListener( 'axischanged', function ( data ) {",
				"\t\t\tif ( data.axes[ 0 ] !== 0 || data.axes[ 1 ] !== 0 ) {",
				"\t\t\t\tcontrollers.axes.update( 'daydream', data.axes );",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\treturn controllers;",
				"",
				"\t},",
				"",
				"\tupdate: function( camera ) {",
				"",
				"\t\tcontrollers.axes.tick();",
				"",
				"\t\tif ( !navigator.getGamepads ) {",
				"",
				"\t\t\tcontrollers.mouse.update();",
				"\t\t\t/*",
				"\t\t\tvar active = controllers[ controllers.active ];",
				"",
				"\t\t\tif ( active ) {",
				"\t\t\t\tcontrollers.previous.update( active );",
				"\t\t\t}",
				"\t\t\t*/",
				"",
				"\t\t\treturn;\t// Safari hack",
				"",
				"\t\t}",
				"\t\t",
				"\t\tvar daydream, pad, mesh;",
				"\t\t",
				"\t\tif ( has.mobile ) {",
				"",
				"\t\t\tdaydream = controllers.daydream;",
				"\t\t\tdaydream.update();",
				"",
				"\t\t\tpad = daydream.getGamepad();",
				"",
				"\t\t\tmesh = controllers.daydream.userData.mesh;",
				"\t\t\t",
				"\t\t\tif ( controllers.modelsLoaded && ( !mesh.parent || mesh.parent !== controllers.daydream ) ) {",
				"\t\t\t\tcontrollers.daydream.add( mesh );",
				"\t\t\t}",
				"",
				"\t\t\tif ( pad && pad.pose ) {",
				"",
				"\t\t\t\tvar pose = pad.pose;",
				"\t\t\t\tvar orientation = daydream.quaternion",
				"\t\t\t\t\t.fromArray( pose.orientation );",
				"\t\t\t\tvar arm = daydream.arm;",
				"\t\t\t\t",
				"\t\t\t\tarm.setHeadOrientation( camera.quaternion );",
				"\t\t\t\tarm.setHeadPosition( camera.position );",
				"\t\t\t\tarm.setControllerOrientation( orientation );",
				"\t\t\t\tarm.update();",
				"\t\t\t\t",
				"\t\t\t\tpose = arm.getPose();",
				"\t\t\t\tdaydream.position.copy( pose.position );",
				"\t\t\t\t",
				"\t\t\t}",
				"\t\t\t",
				"\t\t} else {",
				"",
				"\t\t\tcontrollers.left.update();",
				"\t\t\tcontrollers.right.update();",
				"",
				"\t\t\tmesh = controllers.right.userData.mesh;",
				"\t\t\t",
				"\t\t\tif ( controllers.modelsLoaded && ( !mesh.parent || mesh.parent !== controllers.right ) ) {",
				"\t\t\t\tcontrollers.right.add( mesh );",
				"\t\t\t}",
				"\t\t\t",
				"\t\t}",
				"",
				"\t\tcontrollers.mouse.update();",
				"\t\t/*",
				"\t\tvar active = controllers[ controllers.active ];",
				"",
				"\t\tif ( active ) {",
				"\t\t\tcontrollers.previous.update( active );",
				"\t\t}",
				"\t\t*/",
				"",
				"\t\tif ( !controllers.modelsLoaded ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tvar id = 0, value, ring;",
				"",
				"\t\tif ( controllers.direction ) {",
				"\t\t\tid = 0;",
				"\t\t\tvalue = controllers.direction.value;",
				"\t\t\t// controllers.daydream.userData.mesh.children[ id ].children[ 0 ].rotation.y = value;",
				"\t\t\tcontrollers.right.userData.mesh.children[ id ].children[ 0 ].rotation.y = value;",
				"\t\t}",
				"\t\t",
				"\t\tif ( controllers.theta ) {",
				"\t\t\tid = 1;",
				"\t\t\tvalue = controllers.theta.value;",
				"\t\t\t// controllers.daydream.userData.mesh.children[ id ].children[ 0 ].rotation.y = value;",
				"\t\t\tcontrollers.right.userData.mesh.children[ id ].children[ 0 ].rotation.y = value;",
				"\t\t}",
				"\t\t",
				"\t},",
				"",
				"\tonTriggerDown: function ( controller ) {},",
				"",
				"\tonTriggerUp: function ( controller ) {},",
				"",
				"\tonTriggerClick: function ( controller ) {}",
				"",
				"};",
				"",
				"function disableFog ( obj ) {",
				"\tif ( obj.isMesh ) {",
				"\t\tobj.material.fog = false;",
				"\t}",
				"}",
				"",
				"FRAME.addResource( 'controllers', controllers );"
			]
		],
		[
			"Materials",
			[
				"var materials = {",
				"",
				"\tannie: {",
				"",
				"\t\tskinned: THREE.neonShader.skinnedShader,",
				"",
				"\t\tskinnedTransparent: THREE.neonShader.skinnedTransparentShader",
				"",
				"\t},",
				"",
				"\tforest: {",
				"",
				"\t\tfloor: THREE.neonShader.floorShader,",
				"",
				"\t\twave: THREE.neonShader.waveShader,",
				"",
				"\t\tgrass: THREE.neonShader.grassShader,",
				"\t\t",
				"\t\tdandelion: THREE.neonShader.dandelionShader",
				"",
				"\t},",
				"",
				"\thouse: {",
				"",
				"\t\troom: THREE.neonShader.vertexColoredTransparent,",
				"",
				"\t\ttoy: THREE.neonShader.vertexColoredDoubleSided,",
				"\t\t",
				"\t\thallway: THREE.neonShader.hallway",
				"",
				"\t},",
				"",
				"\tcity: {",
				"",
				"\t\tfloor: THREE.neonShader.doubleSided,",
				"",
				"\t\tbuilding: THREE.neonShader.vertexColoredDoubleSided,",
				"",
				"\t},",
				"",
				"};",
				"",
				"FRAME.addResource( 'materials', materials );",
				""
			]
		],
		[
			"Annie",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var root = FRAME.getResource( 'root' );",
				"var path = [ root, '/models/annie/' ].join('');",
				"var loader = FRAME.getResource( 'fbxLoader' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var materials = FRAME.getResource( 'materials' ).annie;",
				"var TextureAnimator = FRAME.getResource( 'TextureAnimator' );",
				"",
				"var annie = new THREE.Group();",
				"var files = {",
				"\tmodels: {",
				"\t\tchild: 'ani_chr_1-forest_bindpose_v02.txt',",
				"\t\tteenager: 'ani_chr_2-house_bindpose_v02.txt',",
				"\t\tadult: 'ani_chr_3-city_bindpose_v02.txt',",
				"\t\tbird: 'ani_chr_1-forest_flyBirdBindpose_v02.txt',",
				"\t\tstring: 'ani_chr_1-forest_flyStringBindpose_v02.txt',",
				"\t\tbear: 'ani_chr_1-forest_bindposeHugBear_v02.txt'",
				"\t},",
				"\tanimations: {",
				"\t\tchild: {",
				"\t\t\trun: 'ani_chr_1-forest_run_v02.txt',",
				"\t\t\tidle: 'ani_chr_1-forest_idle_v02.txt',",
				"\t\t\twalk: 'ani_chr_1-forest_walk_v02.txt',",
				"\t\t\thug: 'ani_chr_1-forest_hug_v06.txt',",
				"\t\t\ttransition: 'ani_chr_1-forest_flyAnnie_v02.txt'",
				"\t\t},",
				"\t\tteenager: {",
				"\t\t\trun: 'ani_chr_2-house_run_v02.txt',",
				"\t\t\tidle: 'ani_chr_2-house_idle_v02.txt',",
				"\t\t\twalk: 'ani_chr_2-house_walk_v02.txt',",
				"\t\t\thug: 'ani_chr_2-house_hug_v08.txt',",
				"\t\t\ttransition: 'ani_chr_2-house_houseToCity_v02.txt'",
				"\t\t},",
				"\t\tadult: {",
				"\t\t\trun: 'ani_chr_3-city_run_v02.txt',",
				"\t\t\tidle: 'ani_chr_3-city_idle_v02.txt',",
				"\t\t\tfly: 'ani_chr_4-neon_fly_v02.txt',",
				"\t\t\ttransition: 'ani_chr_3-city_firstFlight_v02.txt'",
				"\t\t},",
				"\t\tbird: {",
				"\t\t\tflap: 'ani_chr_1-forest_flyBirdFlying_v02.txt'",
				"\t\t},",
				"\t\tstring: {",
				"\t\t\tloop: 'ani_chr_1-forest_flyStringLoop_v02.txt',",
				"\t\t\tflap: 'ani_chr_1-forest_flyString_v02.txt'",
				"\t\t},",
				"\t\tbear: {",
				"\t\t\tidle: 'ani_chr_bear_idle_v01.txt',",
				"\t\t\thug: 'ani_chr_1-forest_hugBear_v06.txt'",
				"\t\t}",
				"\t}",
				"};",
				"",
				"annie.userData.models = {};",
				"annie.userData.animations = { child: {}, teenager: {}, adult: {}, bird: {}, string: {}, bear: {} };",
				"annie.userData.model = null;",
				"annie.userData.prevModel = null;",
				"annie.userData.setClipRange = setClipRange;",
				"",
				"enhance( annie.userData.models, 7 );\t// Sum of annie models + 1 face texture",
				"enhance( annie.userData.animations, 19 );",
				"",
				"var transition = { progress: 0 };",
				"var annieTransitionTween = new TWEEN.Tween( transition )",
				"\t.easing( TWEEN.Easing.Linear.None )",
				"\t.onUpdate( function ( t ) {",
				"\t\tif ( annie.userData.prevModel ) {",
				"\t\t\tswirl.visible = true;",
				"\t\t\tswirl.rotation.y = t * 5;",
				"\t\t\tsetClipRange( annie.userData.model, 0 , this.progress );",
				"\t\t\tsetClipRange( annie.userData.prevModel, this.progress, 1 );",
				"\t\t\tTHREE.neonShader.swirlShader.uniforms.progress.value = t;",
				"\t\t}",
				"\t} )",
				"\t.onComplete( function () {",
				"\t\tif ( annie.userData.prevModel ) {",
				"\t\t\tswirl.visible = false;",
				"\t\t\ttransition.progress = 0;",
				"\t\t\tannie.userData.prevModel.visible = false;",
				"\t\t\tdelete annie.userData.prevModel;",
				"\t\t}",
				"\t} );",
				"",
				"annie.userData.age = function ( age, duration ) {",
				"\tannie.userData.models.complete.ready( function () {",
				"",
				"\t\tvar model = annie.userData.models[ age ];",
				"\t\tmodel.visible = true;",
				"",
				"\t\tif (annie.userData.model != model && annie.userData.model) {",
				"\t\t\tannie.userData.prevModel = annie.userData.model;",
				"\t\t\tannieTransitionTween.to( { progress: 1 }, duration || 2200 ).start();",
				"\t\t}",
				"",
				"\t\tannie.userData.model = model;",
				"\t\tannie.userData.currentAnimation = model.userData.currentAnimation;",
				"",
				"\t\tvar bb = model.userData.boundingBox;",
				"\t\tvar height = bb.max.y - bb.min.y;",
				"\t\t//dolly.userData.target.y = height * 0.5;",
				"",
				"\t} );",
				"};",
				"",
				"annie.userData.updateAnimation = function( dt ) {",
				"\tif ( annie.userData.model === annie.userData.prevModel ) {",
				"\t\tdelete annie.userData.prevModel;",
				"\t}",
				"\tif ( annie.userData.model ) {",
				"\t\tannie.userData.model.mixer.update( dt );",
				"\t}",
				"\tif ( annie.userData.prevModel ) {",
				"\t\tannie.userData.prevModel.mixer.update( dt );",
				"\t}",
				"}",
				"",
				"annie.userData.play = function ( action, forced ) {",
				"",
				"\tannie.userData.animations.complete.ready( function () {",
				"\t\tif ( !annie.userData.model ) return;",
				"",
				"\t\tvar model = annie.userData.model;",
				"\t\tvar animations = model.userData.animations;",
				"\t\tvar current = model.userData.currentAnimation;",
				"",
				"\t\tif ( current && current.type === action ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tfor ( var k in animations ) {",
				"\t\t\tvar animation = animations[ k ];",
				"\t\t\tif ( k !== action ) {",
				"\t\t\t\tcontinue;",
				"\t\t\t}",
				"\t\t\tif ( current ) {",
				"\t\t\t\tif ( current === animation ) {",
				"\t\t\t\t\tbreak;",
				"\t\t\t\t}",
				"\t\t\t\tanimation.action.stop();",
				"\t\t\t\tif ( typeof forced === 'number' ) {",
				"\t\t\t\t\tanimation.action.crossFadeFrom( current.action, forced );",
				"\t\t\t\t} else if ( !!forced ) {",
				"\t\t\t\t\tcurrent.action.stop();",
				"\t\t\t\t} else {",
				"\t\t\t\t\tanimation.action.crossFadeFrom( current.action, 0.35 );",
				"\t\t\t\t}",
				"\t\t\t\tanimation.action.play();",
				"\t\t\t} else {",
				"\t\t\t\tanimation.action.play();",
				"\t\t\t}",
				"\t\t\tmodel.userData.currentAnimation = animation;",
				"\t\t\tannie.userData.currentAnimation = animation;",
				"\t\t}",
				"",
				"\t} );",
				"",
				"};",
				"",
				"for ( var age in files.models ) {",
				"",
				"\tloader.load( path + files.models[ age ], loadModel( age ) );",
				"",
				"\tvar animations = files.animations[ age ];",
				"",
				"\tfor ( var action in animations ) {",
				"",
				"\t\tvar animation = animations[ action ];",
				"\t\tloader.load( path + animation, animationLoaded( age, action ) );",
				"",
				"\t}",
				"",
				"}",
				"",
				"var swirl;",
				"",
				"loader.load( path + 'shape_helix_03_v03.txt', function( fbx ) {",
				"\tfbx.traverse( function ( child ) {",
				"",
				"\t\tif ( child.isMesh ) {",
				"",
				"\t\t\tvar lambert = child.material;",
				"\t\t\tchild.material = THREE.neonShader.swirlShader;",
				"\t\t\tlambert.dispose();",
				"",
				"\t\t\tchild.geometry.computeBoundingBox();",
				"\t\t\tfbx.userData.boundingBox = child.geometry.boundingBox;",
				"",
				"\t\t}",
				"",
				"\t} );",
				"",
				"\tswirl = window.swirl = fbx;",
				"\tswirl.visible = false;",
				"\tswirl.rotation.x = Math.PI;",
				"\tswirl.position.y = 1.5;",
				"\tswirl.scale.y = 1.5;",
				"\tannie.add( fbx );",
				"",
				"} );",
				"",
				"var faceImage = document.createElement('img');",
				"faceImage.crossOrigin = 'anonymous';",
				"faceImage.src = root + '/textures/TX_annieFacial_A01_C_v02.png';",
				"",
				"faceImage.onload = function() {",
				"",
				"\tvar models = annie.userData.models;",
				"",
				"\tmodels.complete.ready( function () {",
				"",
				"\t\tfor ( var age in files.models ) {",
				"",
				"\t\t\tif ( /(bird|string|bear)/i.test( age ) ) {",
				"\t\t\t\tcontinue;",
				"\t\t\t}",
				"",
				"\t\t\tmodels[ age ].userData.eyeLeft.texture.needsUpdate = true;",
				"\t\t\tmodels[ age ].userData.eyeRight.texture.needsUpdate = true;",
				"\t\t\tmodels[ age ].userData.mouth.texture.needsUpdate = true;",
				"",
				"\t\t}",
				"",
				"\t} );",
				"",
				"\tmodels.complete();",
				"",
				"};",
				"",
				"annie.userData.models.complete.ready( function () {",
				"",
				"\tvar models = annie.userData.models;",
				"",
				"\t// child",
				"",
				"\tmodels.child.userData.eyeLeft.animator.currentTile = 0;",
				"\tmodels.child.userData.eyeRight.animator.currentTile = 0;",
				"",
				"\tvar childEyeLeft = models.child.userData.eyeLeft.mesh;",
				"\tchildEyeLeft.position.set( 0.106, 0.129, 0.134 );",
				"\tchildEyeLeft.rotation.x = THREE.Math.degToRad( 11.182 );",
				"\tchildEyeLeft.rotation.y = THREE.Math.degToRad( 22.183 );",
				"\tchildEyeLeft.rotation.z = THREE.Math.degToRad( 1.924 );",
				"\tchildEyeLeft.scale.set( 0.77, 0.77, 0.77 );",
				"",
				"\tvar childEyeRight = models.child.userData.eyeRight.mesh;",
				"\tchildEyeRight.position.set( -0.106, 0.129, 0.134 );",
				"\tchildEyeRight.rotation.x = THREE.Math.degToRad( 11.182 );",
				"\tchildEyeRight.rotation.y = THREE.Math.degToRad( -22.183 );",
				"\tchildEyeRight.rotation.z = THREE.Math.degToRad( 1.924 );",
				"\tchildEyeRight.scale.set( 0.77, 0.77, 0.77 );",
				"",
				"\tvar childMouth = models.child.userData.mouth.mesh;",
				"\tchildMouth.position.set( 0, 0.058, 0.131 );",
				"\tchildMouth.rotation.x = THREE.Math.degToRad( 29.534 );",
				"\tchildMouth.scale.set( 1.28, 1.28, 1.28 );",
				"",
				"\t// teen",
				"",
				"\tmodels.teenager.userData.eyeLeft.animator.currentTile = 2;",
				"\tmodels.teenager.userData.eyeRight.animator.currentTile = 2;",
				"",
				"\tvar teenEyeLeft = models.teenager.userData.eyeLeft.mesh;",
				"\tteenEyeLeft.position.set( 0.081, 0.116, 0.164 );",
				"\tteenEyeLeft.rotation.x = THREE.Math.degToRad( 15.641 );",
				"\tteenEyeLeft.rotation.y = THREE.Math.degToRad( 33.377 );",
				"\tteenEyeLeft.rotation.z = THREE.Math.degToRad( 0.148 );",
				"",
				"\tvar teenEyeRight = models.teenager.userData.eyeRight.mesh;",
				"\tteenEyeRight.position.set( -0.081, 0.116, 0.164 );",
				"\tteenEyeRight.rotation.x = THREE.Math.degToRad( 15.641 );",
				"\tteenEyeRight.rotation.y = THREE.Math.degToRad( -33.377 );",
				"\tteenEyeRight.rotation.z = THREE.Math.degToRad( 0.148 );",
				"",
				"\tvar teenMouth = models.teenager.userData.mouth.mesh;",
				"\tteenMouth.position.set( 0, 0.049, 0.154 );",
				"\tteenMouth.rotation.x = THREE.Math.degToRad( 28.713 );",
				"\tteenMouth.scale.set( 1.1, 1.1, 1.1 );",
				"",
				"\t// adult",
				"",
				"\tmodels.adult.userData.eyeLeft.animator.currentTile = 2;",
				"\tmodels.adult.userData.eyeRight.animator.currentTile = 2;",
				"",
				"\tvar adultEyeLeft = models.adult.userData.eyeLeft.mesh;",
				"\tadultEyeLeft.position.set( 0.099, 0.139, 0.165 );",
				"\tadultEyeLeft.rotation.x = THREE.Math.degToRad( 5.452 );",
				"\tadultEyeLeft.rotation.y = THREE.Math.degToRad( 30.268 );",
				"\tadultEyeLeft.scale.set( 1.2, 1.2, 1.2 );",
				"",
				"\tvar adultEyeRight = models.adult.userData.eyeRight.mesh;",
				"\tadultEyeRight.position.set( -0.099, 0.139, 0.165 );",
				"\tadultEyeRight.rotation.x = THREE.Math.degToRad( 5.452 );",
				"\tadultEyeRight.rotation.y = THREE.Math.degToRad( -30.268 );",
				"\tadultEyeRight.scale.set( 1.2, 1.2, 1.2 );",
				"",
				"\tvar adultMouth = models.adult.userData.mouth.mesh;",
				"\tadultMouth.position.set( 0, 0.056, 0.167 );",
				"\tadultMouth.rotation.x = THREE.Math.degToRad( 28.975 );",
				"\tadultMouth.scale.set( 1.28, 1.28, 1.28 );",
				"\t",
				"\t// eye animation",
				"\t",
				"\tannie.userData.eyeState = function( tile ) {",
				"\t\tif (!annie.userData.model) return;",
				"\t\tvar offset = annie.userData.model == annie.userData.models.child ? 0 : 2;",
				"\t\tannie.userData.model.userData.eyeLeft.animator.currentTile = tile + offset;",
				"\t\tannie.userData.model.userData.eyeRight.animator.currentTile = tile + offset;",
				"\t};",
				"\t",
				"\tannie.userData.eyesOpen = function(){",
				"\t\tannie.userData.eyeState( 0 );",
				"\t\tsetTimeout( annie.userData.eyesClose, THREE.Math.randInt(1000, 4000) );",
				"\t};",
				"\t",
				"\tannie.userData.eyesClose = function(){",
				"\t\tannie.userData.eyeState( 1 );",
				"\t\tsetTimeout( annie.userData.eyesOpen, THREE.Math.randInt(50, 150) );",
				"\t};",
				"",
				"} );",
				"",
				"var facePlaneGeo = new THREE.PlaneBufferGeometry( 0.1, 0.1 );",
				"",
				"var FacePlane = function( parent ) {",
				"\tvar texture = this.texture = new THREE.Texture( faceImage );",
				"\ttexture.premultiplyAlpha = true;",
				"",
				"\tvar material = THREE.neonShader.faceShader.clone();",
				"\tmaterial.uniforms.map.value = texture;",
				"\tvar offsetRepeat = material.uniforms.offsetRepeat.value;",
				"\tthis.animator = new TextureAnimator( texture, offsetRepeat, 4, 4 );",
				"\tthis.animator.currentTile = 0;",
				"\tthis.mesh = new THREE.Mesh( facePlaneGeo, material );",
				"\tparent.add( this.mesh );",
				"",
				"}",
				"",
				"FRAME.addResource( 'annie', annie );",
				"",
				"function loadModel ( age ) {",
				"",
				"\treturn function ( fbx ) {",
				"",
				"\t\tannie.userData.models[ age ] = fbx;",
				"\t\t",
				"\t\tvar material = /bear/i.test( age ) ? materials.skinnedTransparent : materials.skinned;",
				"",
				"\t\tfbx.traverse( function ( child ) {",
				"",
				"\t\t\tif ( child.isMesh ) {",
				"",
				"\t\t\t\tvar lambert = child.material;",
				"\t\t\t\tchild.material = material.clone();",
				"\t\t\t\tfor ( var j in THREE.neonShader.globals ) {",
				"\t\t\t\t\tchild.material.uniforms[ j ] = THREE.neonShader.globals[ j ];",
				"\t\t\t\t}",
				"\t\t\t\tlambert.dispose();",
				"",
				"\t\t\t\tchild.geometry.computeBoundingBox();",
				"\t\t\t\tfbx.userData.boundingBox = child.geometry.boundingBox;",
				"",
				"\t\t\t}",
				"",
				"\t\t} );",
				"",
				"\t\tfbx.mixer = new THREE.AnimationMixer( fbx );",
				"\t\tfbx.visible = false;",
				"\t\tfbx.userData.animations = {};",
				"",
				"\t\t// fbx.rotation.y = Math.PI; // for animating mouth in editor -david",
				"",
				"\t\tif ( /(bird|string|bear)/i.test( age ) ) {",
				"\t\t\tannie.userData.models.complete();",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tannie.add( fbx );",
				"",
				"\t\tvar headBones = {",
				"\t\t\tchild: 'annieHead',",
				"\t\t\tteenager: 'annieTeenHead',",
				"\t\t\tadult: 'annieGrownHead'",
				"\t\t};",
				"",
				"\t\tvar headBone = fbx.children[0].getObjectByName( headBones[age] );",
				"",
				"\t\tfbx.userData.eyeLeft = new FacePlane( headBone );",
				"\t\tfbx.userData.eyeRight = new FacePlane( headBone );",
				"\t\tfbx.userData.mouth = new FacePlane( headBone );",
				"\t\tfbx.userData.mouth.animator.currentTile = 4;",
				"",
				"\t\tannie.userData.models.complete();",
				"",
				"\t};",
				"",
				"}",
				"",
				"function animationLoaded ( age, action ) {",
				"",
				"\treturn function ( fbx ) {",
				"",
				"\t\tannie.userData.models.complete.ready( function () {",
				"",
				"\t\t\tvar model = annie.userData.models[ age ];",
				"",
				"\t\t\tvar animation = fbx.animations[ 0 ];",
				"\t\t\tanimation.name += ': ' + age + ' : ' + action;",
				"\t\t\tanimation.type = action;",
				"\t\t\tanimation.action = model.mixer.clipAction( animation );",
				"",
				"\t\t\tmodel.userData.animations[ action ] = animation;",
				"\t\t\tannie.userData.animations[ age ][ action ] = animation;",
				"\t\t\tannie.userData.animations.complete();",
				"",
				"\t\t} );",
				"",
				"\t};",
				"",
				"}",
				"",
				"function setClipRange ( obj, clipStart, clipEnd )  {",
				"",
				"\tobj.traverse( function( child ) {",
				"",
				"\t\tif ( child.material && child.material.uniforms && child.material.uniforms.clip ) {",
				"",
				"\t\t\tchild.material.uniforms.clip.value.set( clipStart, clipEnd );",
				"",
				"\t\t}",
				"",
				"\t} );",
				"",
				"}",
				"",
				"function enhance ( obj, length ) {",
				"",
				"\tvar complete = function () {",
				"",
				"\t\tcomplete.index++;",
				"",
				"\t\tif ( !complete.completed && complete.index >= complete.amount ) {",
				"\t\t\tfor ( var i = 0; i < complete.callbacks.length; i++ ) {",
				"\t\t\t\tcomplete.callbacks[ i ]();",
				"\t\t\t}",
				"\t\t\tcomplete.callbacks.length = 0;",
				"\t\t\tcomplete.completed = true;",
				"\t\t}",
				"",
				"\t};",
				"",
				"\tcomplete.ready = function ( func ) {",
				"\t\tif ( complete.completed ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tcomplete.callbacks.push( func );",
				"\t};",
				"",
				"\tcomplete.completed = false;",
				"\tcomplete.index = 0;",
				"\tcomplete.amount = length;",
				"\tcomplete.callbacks = [];",
				"",
				"\tobj.complete = complete;",
				"",
				"}"
			]
		],
		[
			"Models",
			[
				"// BufferGeometryLoader",
				"",
				"var Signal = signals.Signal;",
				"var root = FRAME.getResource( 'root' );",
				"",
				"var models = {",
				"\t",
				"\tintro: {",
				"\t\tname: 'logo',",
				"\t\tfiles: [",
				"\t\t\t'mdl_env_1-forst_UNL_title.json',",
				"\t\t\t'mdl_env_1-forest_TCB_title.json',",
				"\t\t\t'mdl_env_1-forst_STVincnt_title.json'",
				"\t\t]",
				"\t},",
				"\t",
				"\tintroForest: {",
				"\t\tname: 'forest',",
				"\t\tfiles: [",
				"\t\t\t'forest-intro-update.json'",
				"\t\t]",
				"\t},",
				"",
				"\tforest: {",
				"\t\tname: 'forest',",
				"\t\tfiles: [",
				"",
				"\t\t\t'flower03.json',",
				"\t\t\t'huge-flower.json',",
				"",
				"\t\t\t'mdl_env_1_forest_flower_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_d_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_e_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_f_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_g_v01.json',",
				"\t\t\t'mdl_env_1_forest_mushroom_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_mushroom_b_v01.json',",
				"\t\t\t'mdl_env_1_forest_mushroom_c_v01.json',",
				"\t\t\t'mdl_env_1_forest_rock_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_rock_a_v02.json',",
				"\t\t\t'mdl_env_1_forest_tree_e_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_f_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_g_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_h_v01.json'",
				"",
				"\t\t]",
				"\t},",
				"",
				"\texterior: {",
				"\t\tname: 'house',",
				"\t\tfiles: [",
				"\t\t\t'house-with-hallway_v02.json'",
				"\t\t]",
				"\t},",
				"",
				"\thouse: {",
				"\t\tname: 'house',",
				"\t\tfiles: [",
				"\t\t\t'kitchen.json',",
				"\t\t\t'living-room.json',",
				"\t\t\t'bathroom.json'",
				"\t\t]",
				"\t},",
				"",
				"\tbedroom: {",
				"\t\tname: 'house',",
				"\t\tfiles: [",
				"\t\t\t'bedroom.json',",
				"\t\t\t'teddy.json'",
				"\t\t]",
				"\t},",
				"",
				"\thallway: {",
				"\t\tname: 'house',",
				"\t\ttype: 'objectLoader',",
				"\t\tfiles: [",
				"\t\t\t'house-leave-three-hallways.json'",
				"\t\t]",
				"\t},",
				"",
				"\ttoys: {",
				"\t\tname: 'bedroom/interactive',",
				"\t\tfiles: [",
				"",
				"\t\t\t'ball-blue.json',",
				"\t\t\t'ball-green.json',",
				"\t\t\t'ball-purple.json',",
				"",
				"\t\t\t'pyramid-green.json',",
				"\t\t\t'pyramid-orange.json',",
				"",
				"\t\t\t'cube-blue.json',",
				"\t\t\t'cube-orange.json',",
				"\t\t\t'cube-purple.json',",
				"\t\t\t'cube-yellow.json',",
				"",
				"\t\t\t'bunny.json',",
				"\t\t\t'elephant.json',",
				"\t\t\t'giraffe.json',",
				"\t\t\t'tricycle.json',",
				"\t\t\t",
				"\t\t\t//'lollipop.json'",
				"",
				"\t\t]",
				"\t},",
				"",
				"\tcity: {",
				"\t\tname: 'city',",
				"\t\tfiles: [",
				"\t\t\t'bb-mid-ascii.json',",
				"\t\t\t'bb-small-ascii.json',",
				"\t\t\t'bb-tall-ascii.json',",
				"\t\t\t'pavement-ascii.json'",
				"\t\t]",
				"\t}",
				"",
				"};",
				"",
				"for ( var name in models ) {",
				"",
				"\tvar stage = models[ name ];",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"",
				"\tenhance( stage );",
				"",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tload( stage, files[ i ] );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function enhance ( stage ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"\tvar loaded = 0;",
				"\tvar isComplete = false;",
				"",
				"\tstage.geometries = [];",
				"\tstage.onLoad = new Signal();",
				"\tstage.ready = function ( func ) {",
				"\t\tif ( isComplete ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tstage.onLoad.add( func );",
				"\t};",
				"",
				"\tfiles.complete = function ( path ) {",
				"",
				"\t\tloaded++;",
				"",
				"\t\tif ( !isComplete && loaded >= length ) {",
				"\t\t\tisComplete = true;",
				"\t\t\tstage.onLoad.dispatch();",
				"\t\t}",
				"",
				"\t};",
				"",
				"}",
				"",
				"function load ( stage, path ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar url = [ root, 'models', stage.name, path ].join ( '/' );",
				"\tvar loader = FRAME.getResource( stage.type || 'bufferGeometryLoader' );",
				"",
				"\tloader.load( url, function ( geometry ) {",
				"",
				"\t\tgeometry.name = path;",
				"\t\tif ( geometry.type === 'BufferGeometry' ) {",
				"\t\t\tgeometry.computeBoundingSphere();",
				"\t\t}",
				"",
				"\t\tstage.geometries.push( geometry );",
				"\t\tfiles.complete( path );",
				"",
				"\t} );",
				"",
				"}",
				"",
				"function extract ( stage, fbx, path ) {",
				"",
				"\tvar geometries = stage.geometries;",
				"",
				"\tfbx.traverse( function( child ) {",
				"",
				"\t\tif ( child.isMesh ) {",
				"",
				"\t\t\tif ( child.rotation.x !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateX( child.rotation.x );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.y !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateY( child.rotation.y );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.z !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateZ( child.rotation.z );",
				"\t\t\t}",
				"",
				"\t\t\tchild.geometry.name = path;",
				"\t\t\tchild.geometry.computeBoundingSphere();",
				"",
				"\t\t\tgeometries.push( child.geometry );",
				"",
				"\t\t}",
				"",
				"\t} );",
				"",
				"}",
				"",
				"FRAME.addResource( 'models', models );"
			]
		],
		[
			"Textures",
			[
				"var Signal = signals.Signal;",
				"var root = FRAME.getResource( 'root' );",
				"",
				"var textures = {",
				"\tcredits: {",
				"\t\tname: 'credits',",
				"\t\tfiles: [",
				"\t\t\t'1.png',",
				"\t\t\t'2.png',",
				"\t\t\t'3.png',",
				"\t\t\t'4.png',",
				"\t\t\t'5.png',",
				"\t\t\t'6.png',",
				"\t\t\t'7.png',",
				"\t\t\t'8.png',",
				"\t\t\t'9.png'",
				"\t\t]",
				"\t}",
				"};",
				"",
				"for ( var name in textures ) {",
				"",
				"\tvar stage = textures[ name ];",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"",
				"\tenhance( stage );",
				"",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tload( stage, files[ i ] );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function enhance ( stage ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"\tvar loaded = 0;",
				"\tvar isComplete = false;",
				"",
				"\tstage.textures = [];",
				"\tstage.onLoad = new Signal();",
				"\tstage.ready = function ( func ) {",
				"\t\tif ( isComplete ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tstage.onLoad.add( func );",
				"\t};",
				"",
				"\tfiles.complete = function ( path ) {",
				"",
				"\t\tloaded++;",
				"",
				"\t\tif ( !isComplete && loaded >= length ) {",
				"\t\t\tisComplete = true;",
				"\t\t\tstage.onLoad.dispatch();",
				"\t\t}",
				"",
				"\t};",
				"",
				"}",
				"",
				"function load ( stage, path ) {",
				"",
				"\tif ( !has.mobile ) {",
				"\t\tpath = path.replace( /\\.png/i, '@2x.png' );",
				"\t}",
				"",
				"\tvar files = stage.files;",
				"\tvar url = [ root, 'textures', stage.name, path ].join ( '/' );",
				"\tvar loader = FRAME.getResource( 'textureLoader' );",
				"",
				"\tloader.load( url, function ( texture ) {",
				"",
				"\t\ttexture.name = path;",
				"\t\t/*",
				"\t\ttexture.minFilter = THREE.NearestFilter;",
				"\t\ttexture.maxFilter = THREE.NearestFilter;",
				"\t\ttexture.format = THREE.RGBFormat;",
				"\t\ttexture.generateMipmaps = false;",
				"\t\t*/",
				"",
				"\t\tstage.textures.push( texture );",
				"\t\tfiles.complete( path );",
				"",
				"\t} );",
				"",
				"}",
				"",
				"FRAME.addResource( 'textures', textures );"
			]
		],
		[
			"Track Stamps",
			[
				"var trackStamps = {",
				"\t// track states 0/1",
				"\tbass: 0,",
				"\tkick: 0,",
				"\thihat: 0,",
				"\tsynth: 0,",
				"\t// track data. each time stamp represents an edge in a binary signal.",
				"\tdata: {",
				"\t\tbass : [26.194937,26.844714,30.142447,30.810648,34.128036,34.777035,38.094455,38.74489,42.08145,42.88157,43.099352,43.363909,43.617659,43.879896,44.051481,44.851191,45.076651,45.351241,45.581134,45.8506,46.020221,46.848936,47.084838,47.307804,47.563417,47.827839,48.024755,48.825415,49.062176,49.316309,49.579635,49.816303,49.995518,50.815344,51.03277,51.296238,51.551879,51.794972,51.965016,51.984329,51.993084,52.794166,53.011519,53.284693,53.508393,53.783807,53.9612,54.782112,54.998943,55.2617,55.519488,55.74312,55.951368,56.759758,56.982132,57.251562,57.476027,57.751156,57.9277,58.729868,58.979048,59.229278,59.467098,59.72882,59.920397,60.718957,60.943897,61.217445,61.464048,61.716808,61.87629,62.717691,62.931627,63.196174,63.431253,63.681088,63.901678,64.694965,64.928882,65.164711,65.420495,65.701224,65.86461,66.682249,66.899842,67.161988,67.427594,67.661039,67.852104,68.653213,68.876988,69.132654,69.381587,69.660227,69.811156,70.650235,70.88548,71.12848,71.367868,71.411666,71.433575,71.620911,71.817507,72.627039,72.844812,73.117792,73.361392,73.625621,73.781769,74.596732,74.832962,75.097156,75.332322,75.596141,75.851631,76.080544,76.330931,76.579773,76.829966,77.085466,77.309262,77.584719,77.765551,78.562919,78.800914,79.062868,79.319923,79.560736,79.799378,80.062794,80.298832,80.562087,80.782585,80.817478,80.835972,81.032925,81.277395,81.551291,81.749029,82.550433,82.779501,83.030807,83.30195,83.52874,83.767093,84.021527,84.245762,84.519613,84.746659,85.019397,85.264916,85.52184,85.696404,86.520071,86.734346,86.997552,87.233227,87.47678,87.751107,87.980771,88.232272,88.495814,88.731257,88.979229,89.270439,89.46447,89.664559,90.484294,90.700366,90.982417,91.217789,91.464026,91.746036,91.934718,92.199138,92.453606,92.67782,92.949841,93.182041,93.452914,93.650338,94.431795,94.668702,94.931444,95.167801,95.448608,95.667092,95.929313,96.166945,96.419793,96.646075,96.918863,97.144909,97.419008,97.598852,98.398647,98.654136,98.896926,99.133289,99.396641,99.631691,99.896768,100.114007,100.380227,100.631405,100.868105,101.149257,101.385847,101.564669,102.363451,102.601714,102.862861,103.101337,103.361989,103.618444,103.85161,104.098785,104.362667,104.597949,104.833658,105.077361,105.352693,105.54927,106.351654,106.568983,106.850134,107.085589,107.330764,107.500831,108.330203,108.545682,108.819362,109.065067,109.320282,109.477446,110.318987,110.550567,110.818524,111.033378,111.298082,111.488262,112.295425,112.5151,112.779683,113.011882,113.302132,113.462774,114.285544,114.501039,114.767215,115.000586,115.266905,115.462986,116.265446,116.499476,116.750295,116.982494,117.253115,117.431429,118.232285,118.470343,118.732111,118.97941,119.231318,119.420518,120.221264,120.445954,120.720907,120.944775,121.219715,121.419264,122.220183,122.454812,122.698999,122.934229,123.197586,123.379592,124.196839,124.413482,124.688069,124.931118,125.179138,125.365398,126.185469,126.402534,126.665778,126.902109,127.184345,127.350204,128.144139,128.399162,128.655527,128.879984,129.134508,129.331048,130.15284,130.369136,130.632105,130.887374,131.131432,131.319975,132.112114,132.385023,132.621134,132.846095,133.119585,133.298975,134.120332,134.344258,134.599652,134.836073,135.098737,135.288685,136.081642,136.31363,136.580136,136.814006,137.088938,137.266568,138.089939,138.330732,138.567949,138.803647,139.065374,139.26361,140.064497,140.301037,140.543638,140.780056,140.79994,140.819963,141.033924,141.232938,142.05351,142.270242,142.532093,142.779864,143.031905,143.24904,144.022132,144.247192,144.510624,144.746231,145.020417,145.198961,146.028179,146.251247,146.499343,146.73557,146.999808,147.180045,147.981134,148.214212,148.480363,148.713825,148.979592,149.166345,149.185603,149.206451,149.986887,150.221074,150.467931,150.702865,150.965924,151.144392,151.96427,152.200565,152.456578,152.678921,152.950204,153.132848,153.78284,157.100416,157.704753,161.087175,161.680907,165.032516,165.618045,166.465888,167.680473,168.76473,168.849518,168.981044,169.982041,169.998707,170.414002,170.536421,172.862605,172.986584,173.795549,173.861754,174.382222,174.3995,174.464789,174.504294,177.802088,177.971357,178.281415,178.300985,180.296688,180.447987,180.798646,180.816303,182.772464,182.884314,183.746986,183.766244,183.784365,183.803322,184.303099,184.320347,185.688497,185.912787,186.169241,186.403637,186.668199,186.851338,187.647019,187.885393,188.145003,188.401612,188.657339,188.815213,189.654964,189.899667,190.154792,190.371465,190.636511,190.82195,191.635118,191.869579,192.113859,192.347704,192.368739,192.38953,192.621497,192.800903,193.619955,193.838729,194.121848,194.346377,194.580235,194.772755,195.599137,195.855852,196.081666,196.316847,196.580623,196.769186,197.589141,197.814326,198.070239,198.313999,198.54889,198.73823,199.567591,199.802854,200.11299,200.284503,200.564547,200.718303,201.538237,201.773111,202.034554,202.272274,202.516244,202.780949,203.033608,203.296679,203.532673,203.77045,204.005737,204.250486,204.513662,204.701106,205.522667,205.746542,206.01941,206.241168,206.501752,206.737674,206.981049,207.238777,207.500492,207.755388,207.999959,208.218103,208.480726,208.669224,209.470081,209.714152,209.969145,210.206495,210.471108,210.704611,210.968411,211.22068,211.447956,211.732246,211.939074,212.202529,212.451338,212.66431,213.457204,213.700246,213.938107,214.172115,214.429645,214.672264,214.936412,215.171138,215.433853,215.671086,215.914868,216.169656,216.42195,218.666146,218.901997,219.136152,219.382607,219.638888,219.880107,220.137275,220.381105,220.570238,221.37125,221.615443,221.850955,222.113062,222.369497,222.672251,222.828112,223.103839,223.348486,223.620136,223.866318,224.085371,224.347232,224.517588,225.336346,225.582222,225.817611,226.09969,226.337938,226.572182,226.80127,227.08904,227.315264,227.570296,227.807176,228.070525,228.314876,228.503176,229.304263,229.568522,229.783105,230.040234,230.285061,230.545448,230.771882,231.037281,231.254723,231.538838,231.782583,232.017789,232.037444,232.064072,232.252891,232.470524,233.431254,233.468246,233.490605,233.500227,233.789093,233.796882,233.817178,233.838005,233.988172,234.015772,234.250854,234.534484,234.748398,234.947501,234.965771,234.987505,235.268555,235.400186,235.458002,235.465472,235.834582,235.986411,236.351823,236.379521,236.398513,236.419452,237.257551,237.285286,237.455169,237.462782,237.719558,237.983111,238.255451,238.406545,238.821694,238.839928,238.913761,238.93439,239.283681,239.474209,239.717053,239.735533,239.867121,239.904714,239.920544,239.932419,240.282659,240.366356,241.220862,241.468314,241.7253,241.939177,242.231589,242.374887,242.723664,242.749858,242.76836,242.937985,243.288605,243.419517,243.766989,243.834122,243.852375,243.889685,243.918226,243.955629,245.180899,245.35056,245.369357,245.400454,245.702313,245.785782,245.803456,245.823332,245.86891,245.889429,246.216489,246.422132,246.755249,246.905795,247.319526,247.347265,247.365554,247.403578,247.92417,247.932415,248.139838],",
				"\t\tkick : [42.079334,42.17941,42.55825,42.661862,43.057297,43.160828,43.560998,43.707894,44.055594,44.142058,44.566319,44.641132,45.048221,45.159083,45.547431,45.677533,46.046688,46.131066,46.524861,46.647652,47.024746,47.130106,47.53161,47.648144,48.022873,48.109195,48.514423,48.611338,49.012461,49.110567,49.512923,49.645508,50.010632,50.097875,50.510688,50.597018,50.9918,51.095991,51.490624,51.629932,51.991093,52.075379,52.481734,52.593981,52.980918,53.081179,53.480139,53.611233,53.979667,54.063451,54.457778,54.563052,54.95784,55.06188,55.456882,55.599211,55.960454,56.030113,56.459683,56.542148,56.966235,57.050746,57.447004,57.577295,57.946233,58.030344,58.42613,58.550414,58.9266,59.030031,59.424752,59.566608,59.931066,60.008528,60.414698,60.527061,60.929524,60.999607,61.413475,61.525021,61.912349,61.998387,62.392984,62.515432,62.89271,63.014752,63.39235,63.530159,63.890895,63.975818,64.381965,64.494754,64.880484,64.973143,65.381012,65.511778,65.879938,65.964282,66.358341,66.463483,66.859515,66.962302,67.358107,67.490443,67.857176,67.943159,68.348983,68.460907,68.84864,68.942029,69.348486,69.479762,69.846718,69.931379,70.327146,70.449196,70.826003,70.930659,71.324914,71.449819,71.824851,71.909378,72.314381,72.411791,72.813955,72.906517,73.313971,73.446389,73.811529,73.899283,74.293391,74.398864,74.792494,74.897943,75.29285,75.430385,75.792007,75.897045,76.283064,76.396001,76.80036,76.874976,77.280068,77.393804,77.780032,77.88503,78.280105,78.363215,78.759177,78.862952,79.258244,79.40064,79.760907,79.86175,80.247757,80.342892,80.748853,80.841354,81.248628,81.378312,81.748848,81.832477,82.246932,82.349909,82.746527,82.829912,83.226036,83.368868,83.731519,83.8088,84.2242,84.308473,84.729977,84.811247,85.213675,85.32626,85.712137,85.800175,86.194402,86.29908,86.692747,86.81623,87.19272,87.330612,87.692578,87.796671,88.191231,88.296226,88.681101,88.775778,89.180223,89.294913,89.680662,89.766698,90.179377,90.265311,90.678499,90.745644,91.158798,91.291283,91.658377,91.744191,92.15064,92.261695,92.649687,92.742966,93.148059,93.279529,93.648408,93.741305,94.147164,94.233413,94.626557,94.750814,95.126898,95.248617,95.625499,95.709593,96.130975,96.209721,96.630204,96.708405,97.113754,97.246805,97.613628,97.700292,98.113324,98.200191,98.593694,98.698869,99.092653,99.224918,99.592198,99.697103,100.091468,100.196151,100.600816,100.674481,101.082388,101.211965,101.581695,101.680544,102.079663,102.165577,102.559783,102.665703,103.059017,103.183458,103.558147,103.683083,104.057678,104.144282,104.549627,104.664339,105.049309,105.209977,105.549088,105.651156,106.048067,106.150385,106.546233,106.631886,107.026083,107.160454,107.525798,107.610747,108.025102,108.12875,108.530431,108.611701,109.015643,109.148288,109.513818,109.600191,109.995416,110.118508,110.493681,110.608617,110.993175,111.131066,111.49315,111.596934,111.992077,112.096343,112.491432,112.576188,112.984077,113.113044,113.481542,113.56638,113.980418,114.085268,114.47928,114.564597,114.95986,115.092383,115.458784,115.545655,115.952061,116.061381,116.448435,116.543862,116.949097,117.081282,117.449418,117.542301,117.948415,118.050524,118.447223,118.549841,118.926929,119.057903,119.425664,119.509907,119.931429,120.029877,120.424909,120.508693,120.918826,121.048707,121.414248,121.54762,121.89571,122.093129,122.230204,122.299864,122.395583,122.517799,122.894158,123.02465,123.393611,123.543913,123.893142,123.997491,124.128513,124.52898,124.883116,124.996399,125.38261,125.467473,125.83555,126.049721,126.360993,126.465718,126.860107,126.992222,127.359035,127.446763,127.849433,127.984313,128.029481,128.509336,128.850266,128.981102,129.349492,129.519733,129.849344,130.008889,130.170782,130.235641,130.327794,130.450068,130.827615,130.960907,131.327186,131.457,131.808435,131.978179,132.081891,132.449227,132.816193,132.929548,133.315312,133.427528,133.776572,133.993325,134.130431,134.20273,134.29609,134.40907,134.795735,134.931519,135.293522,135.446188,135.793529,135.897702,136.002728,136.443623,136.782346,136.915124,137.261669,137.450884,137.715985,137.933123,138.281346,138.365951,138.760533,138.893353,139.26025,139.346009,139.753163,139.891724,139.977998,140.402776,140.750922,140.882058,141.249883,141.401257,141.72962,141.927158,142.057859,142.129705,142.2307,142.350295,142.728905,142.859635,143.226755,143.378211,143.731882,143.810721,143.982217,144.350728,144.716599,144.849576,145.236554,145.311091,145.659138,145.886166,146.195258,146.319117,146.695272,146.826769,147.194335,147.330975,147.694028,147.816163,147.899864,148.343532,148.683103,148.817276,149.182841,149.33457,149.681943,149.813769,150.011134,150.059703,150.162332,150.26875,150.680405,150.779138,151.14131,151.264152,151.649887,151.831356,151.897743,152.290546,152.648345,152.783865,165.381005,165.418187,165.530976,165.719808,165.848889,166.012242,169.030023,169.196478,169.347828,169.384767,169.47751,169.694073,169.817163,169.949376,169.996408,170.109751,170.516859,170.580285,171.012852,171.079236,171.494246,171.579932,171.993236,172.099098,172.493567,172.578099,173.000635,173.077457,173.332673,173.352718,173.430204,173.650794,173.793913,173.929433,173.965009,174.069654,174.481798,174.5107,174.982191,175.027885,175.462767,175.566716,175.961783,176.046543,176.461359,176.518925,176.998417,177.103282,177.431272,177.649198,177.75284,177.912848,177.929654,178.050975,178.449471,178.49496,178.948868,178.994952,179.427142,179.533218,179.931791,180.013647,180.426699,180.48454,180.930249,181.096614,181.209183,181.285383,181.370855,181.57509,181.731338,181.851791,181.917621,182.010128,182.416392,182.480858,182.915791,182.981175,183.394934,183.500392,183.895766,183.960454,184.394715,184.460825,184.886458,185.051791,185.194586,185.261144,185.365659,185.601445,185.714769,185.846393,185.866243,185.977836,186.364409,186.494862,186.864053,186.947584,187.362553,187.466732,187.861986,187.947267,188.353157,188.483543,188.860693,189.028685,189.352072,189.579683,189.615602,189.78487,189.830795,189.963802,190.350547,190.462781,190.848505,190.913317,191.328988,191.412334,191.828019,191.933016,192.321119,192.450277,192.830476,192.883348,193.299082,193.533842,193.609875,193.713939,193.797632,193.911298,194.297683,194.42844,194.79713,194.863082,195.296365,195.381224,195.795509,195.900317,196.286483,196.416054,196.801088,196.861872,196.89845,196.944229,197.285115,197.417422,197.634236,197.896228,198.264639,198.395159,198.764217,198.869398,199.26105,199.368532,199.762473,199.867595,200.249252,200.383561,200.771174,200.829751,201.252909,201.34468,201.751031,201.835378,202.230711,202.342908,202.729331,202.816586,203.228002,203.314681,203.728108,203.815243,204.219673,204.370794,204.720726,204.831276,205.220453,205.313041,205.719302,205.812278,206.19875,206.329469,206.696345,206.801049,207.198044,207.301463,207.696108,207.779738,208.187245,208.301089,208.69409,208.770759,209.184743,209.270204,209.685093,209.76936,210.166017,210.288251,210.664577,210.769968,211.163735,211.268822,211.663509,211.747903,212.154435,212.284616,212.662237,212.729977,213.153163,213.237846,213.650885,213.728435,214.151199,214.250884,214.629797,214.733901,215.130663,215.216305,215.630149,215.715522,216.121463,216.252891,218.59778,218.702326,219.097298,219.163864,219.595216,219.649524,220.095625,220.161938,220.597197,220.661729,221.585722,221.651241,222.084677,222.149355,222.564794,222.611828,223.064837,223.128174,223.563697,223.648475,224.06306,224.147644,224.562878,224.630204,225.061578,225.100423,225.551689,225.618621,226.052096,226.097366,226.550609,226.597813,227.029505,227.116873,227.530113,227.595653,228.028975,228.095176,228.531156,228.600816,229.020568,229.113578,229.519386,229.60355,230.019207,230.083064,230.498723,230.582998,230.996844,231.082211,231.496876,231.581674,231.994892,232.08075,232.486778,232.571429,232.986415,233.031619,233.484757,233.552127,233.984306,234.05136,234.465065,234.530859,234.964819,235.030114,235.464362,235.520363,235.962503,236.027986,236.462538,236.521361,236.97161,237.001305,237.453466,237.518891,237.952387,237.997868,238.451255,238.499297,238.933789,238.997114,239.433191,239.496099,239.928236,239.995224,240.429232,240.485774,240.921386,240.986134,241.419366,241.485315,241.9195,241.966566,242.41801,242.483499,242.918236,242.963636,243.39634,243.449977,243.896516,243.955051,244.395549,244.46234,244.894674,244.936217,245.386972,245.452835,245.885279,245.951937,246.36726,246.450581,246.865752,246.930182,247.365121,247.430755,247.86372,247.931429],",
				"\t\thihat : [42.491376,42.50864,42.555558,42.575703,42.687885,42.707043,42.838148,42.857842,42.976287,42.990879,43.330372,43.338557,43.461727,43.475516,43.548034,43.556786,43.830061,43.838159,43.980427,43.997965,44.329298,44.348756,44.480007,44.488462,44.827664,44.845494,44.979385,44.996423,45.327794,45.346844,45.440272,45.458704,45.805817,45.827358,45.939881,45.95744,46.304797,46.325973,46.456913,46.475953,46.523241,46.542384,46.804309,46.825172,46.928994,46.946899,46.955736,46.975562,47.29785,47.306809,47.446128,47.45572,47.664518,47.672485,47.806038,47.823717,47.947093,47.956967,48.447357,48.456196,48.512427,48.525856,48.794837,48.812977,48.926996,48.946541,49.010268,49.031861,49.276259,49.294729,49.405943,49.425998,49.774136,49.794074,49.925172,49.944874,50.274639,50.293317,50.42463,50.442985,50.774197,50.792622,50.914742,50.923567,51.262918,51.277421,51.396058,51.415349,51.762717,51.77665,51.895227,51.913652,52.26091,52.275879,52.394779,52.413515,52.478958,52.496469,52.761626,52.780039,52.87472,52.894094,52.91144,52.926038,53.260608,53.280177,53.373095,53.393754,53.607725,53.628663,53.741603,53.759954,53.891107,53.910772,54.232772,54.240901,54.393299,54.41014,54.597874,54.607012,54.739512,54.757212,54.876514,54.890608,55.231787,55.23802,55.362031,55.380758,55.730321,55.747262,55.860934,55.874972,56.229901,56.236565,56.379899,56.397421,56.729374,56.747818,56.879413,56.89665,57.22693,57.24894,57.340818,57.359068,57.706736,57.727893,57.839942,57.856913,58.206704,58.226316,58.331373,58.340099,58.425285,58.442584,58.706133,58.725704,58.855538,58.876738,59.195425,59.203766,59.329876,59.350311,59.422023,59.444054,59.555401,59.573118,59.697545,59.716435,59.845584,59.855432,60.327593,60.347906,60.412048,60.433041,60.545836,60.563938,60.695936,60.714871,60.80955,60.826223,60.912242,60.925312,61.194565,61.213579,61.30659,61.326464,61.67489,61.694678,61.824889,61.845904,62.173928,62.193269,62.32504,62.344778,62.67514,62.691764,62.824072,62.843175,63.172414,63.192365,63.296484,63.315271,63.665658,63.676877,63.795424,63.813825,64.164676,64.176106,64.295093,64.314161,64.379729,64.396695,64.643741,64.663847,64.774751,64.793603,64.812193,64.83269,64.879506,64.895924,65.163,65.179708,65.293441,65.311621,65.511441,65.530744,65.627353,65.662555,65.793382,65.813343,66.120302,66.140253,66.291581,66.309779,66.63988,66.66164,66.776741,66.791163,66.855359,66.875616,67.131977,67.141211,67.265068,67.27597,67.348298,67.358328,67.63275,67.638926,67.761443,67.781986,68.128691,68.146718,68.241842,68.263371,68.608411,68.628089,68.781133,68.796877,69.110591,69.127063,69.258731,69.278372,69.4757,69.496802,69.606678,69.627807,69.760976,69.778706,70.108876,70.126988,70.24038,70.260161,70.324694,70.344118,70.608941,70.626217,70.731046,70.747353,70.759184,70.777876,71.107299,71.123928,71.230296,71.238268,71.342829,71.362696,71.606813,71.625207,71.749197,71.757421,72.077397,72.097197,72.228432,72.248638,72.445749,72.465889,72.595164,72.613586,72.726873,72.746559,73.07605,73.095371,73.208801,73.22775,73.574385,73.595006,105.506162,105.52717,105.797874,105.810385,105.961643,105.981273,106.025068,106.044654,106.309606,106.326707,106.459817,106.477199,106.796333,106.808574,106.931204,106.947262,107.299419,107.307518,107.43068,107.438629,107.515187,107.522324,107.794791,107.804406,107.928966,107.950378,108.146956,108.155083,108.298491,108.315313,108.449186,108.456559,108.79735,108.815606,108.910272,108.928352,109.012501,109.032352,109.277586,109.296527,109.410224,109.42817,109.775657,109.795781,109.908746,109.927044,109.992715,110.013251,110.274624,110.293957,110.425992,110.44526,110.774173,110.794289,110.926147,110.945482,111.122357,111.141871,111.277784,111.293014,111.396779,111.424756,111.764022,111.771636,111.916003,111.923823,112.114583,112.125312,112.265424,112.276242,112.398317,112.416284,112.7653,112.782147,112.874566,112.895853,113.11036,113.130621,113.24383,113.265244,113.374947,113.393954,113.461633,113.479674,113.722644,113.742768,113.894552,113.9143,114.226718,114.242514,114.393408,114.413449,114.515595,114.523891,114.725947,114.741283,114.876877,114.893668,114.956925,114.976817,115.232809,115.240269,115.366087,115.376106,115.730848,115.740151,115.843963,115.864558,115.948122,115.957556,116.232071,116.238531,116.383494,116.397784,116.730669,116.750564,116.843959,116.862636,117.078931,117.097688,117.211494,117.228945,117.362416,117.381042,117.861581,117.879226,118.207448,118.228605,118.33285,118.342577,118.709179,118.727716,118.831373,118.839997,119.207465,119.226662,119.330509,119.346718,119.416304,119.423399,119.555698,119.575054,119.699851,119.706627,119.830979,119.845947,119.915244,119.923763,120.179107,120.19843,120.350005,120.358622,120.699549,120.716695,120.811053,120.848168,121.045268,121.065231,121.198215,121.214767,121.309982,121.329791,121.414687,121.43179],",
				"\t\tsynth : [121.399587,121.421517,121.522444,121.531842,121.58824,121.604227,121.768142,121.786846,121.852455,121.872445,121.919648,121.937649,122.133885,122.155104,123.501322,123.521195,123.605563,123.624306,123.907372,123.916166,124.123592,124.132114,124.348541,124.368756,124.407558,124.415398,125.535797,125.557046,125.60196,125.623978,125.867432,125.885333,126.004408,126.018162,126.102134,126.122718,127.574787,127.592536,127.620381,127.638645,127.921989,127.940351,128.033484,128.053176,128.082594,128.099122,128.223567,128.241828,128.374995,128.384454,129.28702,129.306155,129.333675,129.353064,129.399644,129.418616,129.503025,129.524373,129.588743,129.603501,129.754431,129.785233,129.832684,129.85352,130.117011,130.133658,130.40459,130.418437,131.369288,131.388405,131.559276,131.568834,131.84137,131.848301,132.084616,132.104467,132.369021,132.386862,133.556468,133.56398,133.820643,133.837907,134.017353,134.034569,135.317492,135.33599,135.382338,135.401516,135.553954,135.57242,135.770467,135.788768,136.023819,136.033889,136.353628,136.374312,136.723089,136.739745,136.805859,136.815598,136.965148,136.984715,137.024284,137.043105,137.069525,137.089423,137.248729,137.267779,137.437727,137.457985,137.502964,137.523538,137.739572,137.758419,137.898254,137.918376,138.040012,138.049359,138.764915,138.784297,138.822922,138.843711,139.002825,139.021805,139.131613,139.153382,139.219095,139.235766,139.302341,139.322813,139.473303,139.483592,139.782778,139.803615,139.934256,139.953696,140.12496,140.133751,140.274997,140.28468,141.404511,141.42547,141.503728,141.518395,141.73253,141.752583,141.933297,141.950541,142.002957,142.016173,142.817085,142.835999,142.954975,142.96873,143.099536,143.121159,143.166143,143.184401,143.288649,143.308451,143.439218,143.448661,143.768639,143.78784,143.901224,143.920099,144.025257,144.034703,144.052636,144.071625,144.203929,144.223543,145.173629,145.184091,145.200624,145.221668,145.253751,145.267575,145.370986,145.390561,145.40468,145.41785,145.483394,145.50215,145.590746,145.608814,145.63409,145.654207,145.701242,145.720991,145.938844,145.955666,146.021453,146.040728,146.73632,146.757426,146.782829,146.803092,146.822591,146.841405,146.953115,146.975039,147.084183,147.103965,147.122957,147.13121,147.217139,147.236393,147.285497,147.302846,147.407223,147.433947,147.708958,147.717997,147.735006,147.755216,147.924046,147.932958,148.234472,148.25374,148.339739,148.358679,149.33759,149.358223,149.441896,149.451875,149.68879,149.705846,149.950103,149.969083,150.487349,150.50607,150.723415,150.73366,150.875273,150.88459,150.902459,150.922023,151.036232,151.054008,151.119651,151.137105,151.22443,151.243029,151.373909,151.383819,151.552491,151.571089,151.685906,151.702002,151.8531,151.872664,151.899532,151.920438,152.202147,152.222332,152.418872,152.437822,152.533207,152.550579,152.675004,152.684136,152.805897,152.825057]",
				"\t}",
				"};",
				"",
				"",
				"trackStamps.previousTime = -1",
				"",
				"trackStamps.update = function( time ) {",
				"",
				"\t// If scrubbed restart search",
				"\tif ( Math.abs(trackStamps.previousTime - time) > 0.25 ) {",
				"\t\ttrackStamps.data.bass.lastIndex = -1;",
				"\t\ttrackStamps.data.kick.lastIndex = -1;",
				"\t\ttrackStamps.data.hihat.lastIndex = -1;",
				"\t\ttrackStamps.data.synth.lastIndex = -1;",
				"\t}",
				"",
				"\ttrackStamps.updateChannel( 'bass', time );",
				"\ttrackStamps.updateChannel( 'kick', time );",
				"\ttrackStamps.updateChannel( 'hihat', time );",
				"\ttrackStamps.updateChannel( 'synth', time );",
				"",
				"}",
				"",
				"trackStamps.updateChannel = function( ch, time ) {",
				"\tvar i = Math.max(0, trackStamps.data[ch].lastIndex)",
				"\tvar t = time + 0.02, t1 = -1, t2 = -1;",
				"\twhile ( t > t2 && i < trackStamps.data[ch].length ) {",
				"\t\tt1 = trackStamps.data[ch][i];",
				"\t\tt2 = trackStamps.data[ch][i+1];",
				"\t\ttrackStamps[ch] = ( t > t1 && t < t2 ) ? 1 : 0;",
				"\t\ti += 2;",
				"\t}",
				"\t// Save last index for fster search",
				"\ttrackStamps.data[ch].lastIndex = i - 2;",
				"\ttrackStamps.previousTime = time;",
				"}",
				"",
				"FRAME.addResource( 'trackStamps', trackStamps );"
			]
		],
		[
			"Black Card",
			[
				"var DURATION = 2000;",
				"",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var mesh;",
				"",
				"var geometry = new THREE.PlaneBufferGeometry( 4, 2 );",
				"",
				"var material = THREE.neonShader.basicShader.clone();",
				"material.depthWrite = false;",
				"material.transparent = true;",
				"",
				"material.uniforms.opacity = {",
				"\ttype: 'f',",
				"\tvalue: 1",
				"};",
				"",
				"material.defines = {",
				"\tDONTUSE_NEON: '',",
				"\tUSE_OPACITY: ''",
				"};",
				"",
				"for ( var k in THREE.neonShader.globals ) {",
				"",
				"\tmaterial.uniforms[ k ] = THREE.neonShader.globals[ k ];",
				"",
				"}",
				"",
				"material.uniforms.color.value.set( scene.fog.color );",
				"",
				"mesh = new THREE.Mesh( geometry, material );",
				"mesh.position.z = - ( camera.near + 0.1 );",
				"",
				"mesh.userData.fadeIn = new TWEEN.Tween( material.uniforms.opacity )",
				"\t.to( { value: 0 }, DURATION )",
				"\t.easing( TWEEN.Easing.Sinusoidal.In );",
				"",
				"mesh.userData.fadeOut = new TWEEN.Tween( material.uniforms.opacity )",
				"\t.to( { value: 1 }, DURATION )",
				"\t.easing( TWEEN.Easing.Sinusoidal.In );",
				"",
				"camera.add( mesh );",
				"",
				"FRAME.addResource( 'black-card', mesh );"
			]
		]
	],
	"effects": [
		[
			"Forest",
			[
				"var TWO_PI = Math.PI * 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var List = FRAME.getResource( 'List' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"var compass = FRAME.getResource( 'compass' );",
				"",
				"var model = FRAME.getResource( 'models' ).forest;",
				"var materials = FRAME.getResource( 'materials' ).forest;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 350 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.66 ),",
				"\tforceField: new FRAME.Parameters.Float( 'Field', 0.025 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var material = materials.wave;",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var group = new THREE.Scene();",
				"",
				"materials.grass.uniforms.size.value = parameters.size.value;",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( camera.far - 2 ),",
				"\tTHREE.neonShader.backSided",
				");",
				"backdrop.renderOrder = 1; // render backdrop last",
				"scene.add( backdrop );",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"var field = [];",
				"field.geometry = new THREE.CylinderBufferGeometry( 0.2, 0.2, 1, 4, 8, true );",
				"field.geometry.translate( 0, 0.5, 0 );",
				"field.material = materials.grass;",
				"",
				"// INSTANCING",
				"",
				"field.instancedGeometry = new THREE.InstancedBufferGeometry().copy( field.geometry );",
				"",
				"field.instancedTranslations = new Float32Array( parameters.amount.value * 3 );",
				"field.instancedTranslationsAttribute = new THREE.InstancedBufferAttribute( field.instancedTranslations, 3 ).setDynamic( true );",
				"field.instancedGeometry.addAttribute( 'instancedTranslation', field.instancedTranslationsAttribute );",
				"",
				"field.instancedScales = new Float32Array( parameters.amount.value * 3 );",
				"field.instancedScalesAttribute = new THREE.InstancedBufferAttribute( field.instancedScales, 3 ).setDynamic( true );",
				"field.instancedGeometry.addAttribute( 'instancedScale', field.instancedScalesAttribute );",
				"",
				"field.instancedMesh = new THREE.Mesh( field.instancedGeometry, field.material );",
				"field.instancedMesh.frustumCulled = false;",
				"group.add( field.instancedMesh );",
				"",
				"var elements = [];",
				"var saplings = new List();",
				"var dandelions = new List();",
				"",
				"var types = {",
				"\tflower: new List(),",
				"\tmushroom: new List(),",
				"\tgrass: new List(),",
				"\trock: new List(),",
				"\ttree: new List(),",
				"\tlist: ['flower', 'mushroom', 'grass', 'rock', 'tree']",
				"};",
				"",
				"model.ready( function () {",
				"",
				"\tvar mesh, i, grass;",
				"\tvar geometries = model.geometries.slice( 0 );",
				"\tvar amount = Math.floor( parameters.amount.value * 0.9 );",
				"",
				"\tsaplings.geometry = stripItemFromList( geometries, 'flower03.json' );",
				"\tsaplings.amount = Math.floor( parameters.amount.value * 0.1 );",
				"",
				"\tdandelions.geometry = stripItemFromList( geometries, 'huge-flower.json' );",
				"\tdandelions.amount = 1;",
				"",
				"\tvar scale = new THREE.Vector3( 0.33, 0.33, 0.33 );",
				"\tvar duration = 2000;",
				"\tvar length = geometries.length;",
				"",
				"\tfor ( i = 0; i < dandelions.amount; i++ ) {",
				"",
				"\t\tmesh = new THREE.Mesh( dandelions.geometry, materials.dandelion );",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"\t\tmesh.scale.setScalar( 0.8 );",
				"",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"\t\tmesh.visible = false;",
				"\t\tmesh.userData.placed = false;",
				"\t\tmesh.userData.isDandelion = true;",
				"\t\tmesh.userData.tween = new TWEEN.Tween( mesh.material.uniforms.opacity )",
				"\t\t\t.to( { value: 0 }, 350 )",
				"\t\t\t.easing( TWEEN.Easing.Circular.Out );",
				"\t\t",
				"\t\tdandelions.push( mesh );",
				"\t\telements.push( mesh );",
				"\t\tgroup.add( mesh );",
				"",
				"\t\tgrass = new THREE.Object3D();",
				"\t\tgrass.position.y -= 0.1;",
				"\t\tgrass.scale.setScalar( Math.random() * 0.66 + 0.33 );",
				"\t\tgrass.scale.y += Math.random() * 0.5;",
				"\t\tgrass.scale.toArray( field.instancedScales, i * 3 );",
				"\t\tgrass.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random(),",
				"\t\t\tMath.random()",
				"\t\t);",
				"",
				"\t\tfield.push( grass );",
				"",
				"\t}",
				"",
				"\tfor ( i = 0; i < saplings.amount; i++ ) {",
				"",
				"\t\tmesh = new THREE.Mesh( saplings.geometry, material );",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"\t\tmesh.visible = false;",
				"\t\tmesh.userData.placed = false;",
				"",
				"\t\tmesh.userData.tween = new TWEEN.Tween( mesh.scale )",
				"\t\t\t.easing( TWEEN.Easing.Back.Out )",
				"\t\t\t.to( scale, duration );",
				"",
				"\t\tsaplings.push( mesh );",
				"\t\telements.push( mesh );",
				"\t\tgroup.add( mesh );",
				"",
				"\t\tgrass = new THREE.Object3D();",
				"\t\tgrass.position.y -= 0.1;",
				"\t\tgrass.scale.setScalar( Math.random() * 0.66 + 0.33 );",
				"\t\tgrass.scale.y += Math.random() * 0.5;",
				"\t\tgrass.scale.toArray( field.instancedScales, i * 3 );",
				"\t\tgrass.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random(),",
				"\t\t\tMath.random()",
				"\t\t);",
				"",
				"\t\tfield.push( grass );",
				"",
				"\t}",
				"",
				"\tfor ( i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tmesh = new THREE.Mesh( geometry, material );",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"",
				"\t\tmesh.scale.setScalar( Math.random() / 2 + 0.5 );",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"\t\tmesh.visible = false;",
				"\t\tmesh.userData.placed = false;",
				"",
				"\t\tfor ( var k in types ) {",
				"\t\t\tvar list = types[ k ];",
				"\t\t\tif ( !list.regex ) {",
				"\t\t\t\tlist.regex = new RegExp( '(' + k + ')', 'i' );",
				"\t\t\t}",
				"\t\t\tif ( list.regex.test( name ) ) {",
				"\t\t\t\tlist.push( mesh );",
				"\t\t\t}",
				"\t\t}",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t\tgrass = new THREE.Object3D();",
				"\t\tgrass.position.y -= 0.1;",
				"\t\tgrass.scale.setScalar( Math.random() * 0.66 + 0.33 );",
				"\t\tgrass.scale.y += Math.random() * 0.5;",
				"\t\tgrass.scale.toArray( field.instancedScales, i * 3 );",
				"\t\tgrass.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random(),",
				"\t\t\tMath.random()",
				"\t\t);",
				"",
				"\t\tfield.push( grass );",
				"",
				"\t}",
				"",
				"\tfield.instancedScalesAttribute.needsUpdate = true;",
				"",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( { ",
				"",
				"\tindex: stages.length,",
				"\tinTransition: false,",
				"\ttypes: types,",
				"\tsaplings: saplings,",
				"\tdandelions: dandelions,",
				"\tscene: group,",
				"\tadd: add,",
				"\tbuffer: { value: 1 }",
				"",
				"} );",
				"var stage = stages[ stages.length - 1 ];",
				"",
				"function start () {",
				"",
				"\tstages.current = stage;",
				"\tstages.index = stage.index;",
				"\t",
				"\tcompass.direction._drag = compass.direction.drag;",
				"\tcompass.direction.drag = compass.direction._drag / 10;",
				"",
				"\tstage.inTransition = false;",
				"\tgroup.position.y = 0;",
				"",
				"\tstage.buffer.value = 1;",
				"\tcursor.set( 0, 0 );",
				"\tdolly.userData.reset();",
				"",
				"\tannie.userData.age( 'child' );",
				"\tannie.userData.play( 'run', true );",
				"\tannie.rotation.y = 0;",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"\tgroup.rotation.y = compass.direction.value - Math.PI / 2;",
				"",
				"\trefresh();",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\tcompass.direction.drag = compass.direction._drag;",
				"",
				"\trefresh();",
				"",
				"}",
				"",
				"var timeOffset = Date.now();",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar size = parameters.size.value;",
				"\tvar step = parameters.step.value;",
				"\tvar now = Date.now();",
				"",
				"\tif ( stage.inTransition ) {",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1;",
				"\t\t}",
				"",
				"\t} else if ( controllers.dragging() ) {",
				"",
				"\t\tcompass.step.destination = 0.2 * step;",
				"\t\tcamera.userData.fov.destination = 100;",
				"\t\ttimeOffset = now;",
				"",
				"\t\t/*",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\t*/",
				"",
				"\t} else {",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 0.94;",
				"\t\t}",
				"",
				"\t\tcompass.step.destination = 0.1 * step;",
				"\t\tcamera.userData.fov.destination = 80;",
				"\t\tif ( !stage.inTransition && controllers.axes.delta.x === 0 && now - 5000 > timeOffset) { ",
				"\t\t\tcompass.direction.destination = compass.theta.value;",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tvar amplitude = compass.step.value * ( dt || 0 );",
				"\tvar forceField = parameters.forceField.value;",
				"\tvar buffer = forceField * ( 128 / size );",
				"\tbuffer *= stage.buffer.value;",
				"",
				"\tvar tdx = amplitude * Math.cos( compass.direction.value );",
				"\tvar tdy = amplitude * Math.sin( compass.direction.value );",
				"\tvar ry = compass.direction.value - Math.PI / 2;",
				"",
				"\tTHREE.neonShader.globals.motion.value = amplitude * size;",
				"\tTHREE.neonShader.globals.yRot.value = ry;",
				"",
				"\tcursor.x += tdx;",
				"\tcursor.y += tdy;",
				"\tgroup.rotation.y = ry;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar offset, x, y, angle, phi, bx, by;",
				"\t\tvar mesh = elements[ i ];",
				"",
				"\t\tif ( mesh.userData.placed ) {",
				"",
				"\t\t\toffset = mesh.userData.offset;",
				"\t\t\tx = mod( cursor.x + offset.x, 2 ) - 1;",
				"\t\t\ty = mod( cursor.y + offset.y, 2 ) - 1;",
				"",
				"\t\t\tangle = Math.atan2( - y, - x );",
				"\t\t\tphi = angle + Math.PI;",
				"",
				"\t\t\tbx = 0;",
				"\t\t\tby = 0;",
				"\t\t\t",
				"\t\t\tif ( !mesh.userData.isDandelion ) {",
				"\t\t\t\tbx = Math.cos( phi ) * buffer;",
				"\t\t\t\tby = Math.sin( phi ) * buffer;",
				"\t\t\t}",
				"",
				"\t\t\tmesh.position.x = x + bx;",
				"\t\t\tmesh.position.z = y + by;",
				"",
				"\t\t\tmesh.position.x *= - size;",
				"\t\t\tmesh.position.z *= - size;",
				"",
				"\t\t\tif ( !mesh.visible ) {",
				"\t\t\t\tmesh.visible = true;",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t\tvar grass = field[ i ];",
				"\t\toffset = grass.userData.offset;",
				"",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"",
				"\t\tvar angle = Math.atan2( - y, - x );",
				"\t\tvar phi = angle + Math.PI;",
				"",
				"\t\tgrass.position.x = x + Math.cos( phi ) * buffer * 0.66;",
				"\t\tgrass.position.z = y + Math.sin( phi ) * buffer * 0.66;",
				"",
				"\t\tgrass.position.x *= - size;",
				"\t\tgrass.position.z *= - size;",
				"",
				"\t\tgrass.position.toArray( field.instancedTranslations, i * 3 );",
				"",
				"\t}",
				"",
				"\tfield.instancedTranslationsAttribute.needsUpdate = true;",
				"",
				"}",
				"",
				"function add ( obj, a, rad ) {",
				"",
				"\tvar angle = a || 0;",
				"\tvar theta = compass.direction.destination + ( Math.random() * angle - angle / 2 );",
				"\tvar amp = ( typeof rad == 'number' ) ? rad : 1;",
				"",
				"\tvar x = - cursor.x - amp * Math.cos( theta ) + 1;",
				"\tvar y = - cursor.y - amp * Math.sin( theta ) + 1;",
				"",
				"\tobj.userData.offset.set( x, y );",
				"\tobj.userData.placed = true;",
				"",
				"}",
				"",
				"function stripItemFromList ( list, name ) {",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar item = list[ i ];",
				"\t\tif ( item.name === name ) {",
				"\t\t\treturn list.splice( i, 1 )[ 0 ];",
				"\t\t}",
				"\t}",
				"\treturn null;",
				"}",
				"",
				"function refresh () {",
				"",
				"\tfor ( var i = 0; i < types.list.length; i++ ) {",
				"\t\tvar name = types.list[ i ];",
				"\t\tvar items = types[ name ];",
				"",
				"\t\titems.exhausted = false;",
				"",
				"\t}",
				"\tsaplings.exhausted = false;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"\t\telements[ i ].visible = false;",
				"\t\telements[ i ].userData.placed = false;",
				"\t}",
				"",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e * l;",
				"\t}",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"House",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var roomModels = FRAME.getResource( 'models' ).house;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"var bedroomModels = FRAME.getResource( 'models' ).bedroom;",
				"var compass = FRAME.getResource( 'compass' );",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Float( 'Size', 12 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 9 ),",
				"\tdistance: new FRAME.Parameters.Float( 'Distance', 2 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.8125 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"cursor.destination = new THREE.Vector2();",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"var elements = [];",
				"var material = materials.room;",
				"",
				"group.rotation.y = - HALF_PI;",
				"",
				"roomModels.ready( function () {",
				"",
				"\tvar geometries = roomModels.geometries;",
				"",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\tvar size = parameters.size.value;",
				"",
				"\t// create meshes for empty kitchen, office, living-room, bedroom",
				"\tvar roomMeshes = {};",
				"\tfor ( var i = 0; i < geometries.length; i++ ) {",
				"\t\tvar geometry = geometries[ i ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tmesh.name = geometry.name;",
				"\t\troomMeshes[ mesh.name ] = mesh;",
				"\t}",
				"",
				"\t// house architecture",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar name = roomModels.files[ id ];",
				"\t\tvar mesh = roomMeshes[ name ].clone();",
				"",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"\t\tmesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( {",
				"",
				"\thideNextRoom: false,",
				"\tinTransition: true,",
				"\tindex: stages.length,",
				"\telements: elements,",
				"\tscene: group,",
				"\tcursor: cursor,",
				"\tcols: cols,",
				"\trows: rows,",
				"\tsize: parameters.size.value,",
				"\tquadrant: 0,",
				"\tlimit: 1,",
				"\treset: function () {",
				"\t\tstage.inTransition = true;",
				"\t\tcursor.set( 0, 0 );",
				"\t\tcursor.destination.set( 0, 0 );",
				"\t\tpc.copy( cursor );",
				"\t\tcompass.direction.clear();",
				"\t}",
				"",
				"} );",
				"var stage = stages[ stages.length - 1 ];",
				"",
				"function start () {",
				"",
				"\tstages.current = stage;",
				"\tstages.index = stage.index;",
				"\tstage.hideNextRoom = false;",
				"",
				"\tannie.rotation.y = 0;",
				"\tannie.userData.age( 'teenager' );",
				"",
				"\tcompass.step.destination = 0.1 * parameters.step.value;",
				"\t",
				"\t// Hot swap the bedroom into the",
				"\t// house for seamless transition",
				"",
				"\tif ( stages.bedroom.room ) {",
				"",
				"\t\tvar mid = ( elements.length - 1 ) / 2;",
				"\t\tvar a = stages.bedroom.room;",
				"\t\tvar b = elements[ mid ];",
				"",
				"\t\ta.userData.offset = b.userData.offset;",
				"\t\ta.userData.reference = b;",
				"\t\ta.rotation.y = HALF_PI;",
				"",
				"\t\telements.splice( mid, 1, a );",
				"\t\tgroup.add( a );",
				"\t\tgroup.remove( b );",
				"",
				"\t}",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"}",
				"",
				"function end () {",
				"",
				"\tif ( stages.bedroom.room ) {",
				"",
				"\t\tvar mid = ( elements.length - 1 ) / 2;",
				"\t\tvar a = stages.bedroom.room;",
				"\t\tvar b = a.userData.reference;",
				"",
				"\t\tif ( b ) {",
				"\t\t\telements.splice( mid, 1, b );",
				"\t\t\tgroup.add( b );",
				"\t\t}",
				"",
				"\t\tstages.bedroom.scene.add( a );",
				"\t\ta.rotation.y = 0;",
				"\t\ta.position.set( 0, 0, 0 );",
				"",
				"\t}",
				"\t",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"",
				"}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t} else {",
				"",
				"\t\tcamera.userData.fov.destination = 80;",
				"",
				"\t}",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = compass.step.value * ( dt || 0 );",
				"",
				"\tif ( !stage.inTransition ) {",
				"\t\tupdateDirection();",
				"\t}",
				"",
				"\tvar tdx = amplitude * Math.cos( compass.direction.destination );",
				"\tvar tdy = amplitude * Math.sin( compass.direction.destination );",
				"\tvar ry = compass.direction.value - HALF_PI;",
				"",
				"\tTHREE.neonShader.globals.motion.value = amplitude * size * rows;",
				"\tTHREE.neonShader.globals.yRot.value = ry;",
				"",
				"\tcursor.destination.x += tdx;",
				"\tcursor.destination.y += tdy;",
				"",
				"\tvar t = Math.min( Math.max( 2.5 * ( dt || 0 ), 0 ), 1 );",
				"\tcursor.x += ( cursor.destination.x - cursor.x ) * t;",
				"\tcursor.y += ( cursor.destination.y - cursor.y ) * t;",
				"",
				"\tgroup.rotation.y = ry;",
				"",
				"\tvar quadrant = mod( compass.direction.destination, TWO_PI );",
				"",
				"\tquadrant /= TWO_PI;",
				"\tquadrant *= 4;",
				"\tquadrant = Math.floor( quadrant );",
				"",
				"\tstage.quadrant = quadrant;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar pos;",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"",
				"\t\tmesh.position.x *= - size * cols;",
				"\t\tmesh.position.z *= - size * rows;",
				"",
				"\t\tif ( stage.hideNextRoom ) {",
				"",
				"\t\t\tswitch ( quadrant ) {",
				"\t\t\t\tcase 0:",
				"\t\t\t\t\tpos = Math.floor( 2 * x * cols );",
				"\t\t\t\t\tmesh.visible = pos >= stage.limit;",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 1:",
				"\t\t\t\t\tpos = Math.floor( 2 * y * rows );",
				"\t\t\t\t\tmesh.visible = pos >= stage.limit;",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 2:",
				"\t\t\t\t\tpos = Math.ceil( 2 * x * cols );",
				"\t\t\t\t\tmesh.visible = pos <= - stage.limit;",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 3:",
				"\t\t\t\t\tpos = Math.ceil( 2 * y * rows );",
				"\t\t\t\t\tmesh.visible = pos <= - stage.limit;",
				"\t\t\t\t\tbreak;",
				"\t\t\t}",
				"",
				"\t\t} else if ( !mesh.visible ) {",
				"\t\t\tmesh.visible = true;",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"var pc = new THREE.Vector2();",
				"var threshold = 1 / cols;",
				"var limit = threshold;",
				"",
				"function updateDirection ( silent ) {",
				"",
				"\tvar angle;",
				"\tvar offset = compass.direction.drag;",
				"\tvar dist = pc.distanceTo( cursor.destination );",
				"",
				"\tif ( stage.hideNextRoom ) {",
				"",
				"\t\tif ( dist >= limit / 2 ) {",
				"",
				"\t\t\tstage.limit += 0.75;",
				"",
				"\t\t\tpc.copy( cursor.destination );",
				"",
				"\t\t}",
				"",
				"\t} else if ( dist >= limit ) {",
				"",
				"\t\tangle = 4 * compass.theta.destination / TWO_PI;",
				"\t\tangle = TWO_PI * Math.round( angle ) / 4;",
				"",
				"\t\tangle -= compass.direction.destination;",
				"\t\tangle = Math.sin( angle );",
				"\t\tangle = Math.round( angle );",
				"\t\tangle *= HALF_PI;",
				"\t\t",
				"\t\tif ( !silent ) {",
				"\t\t\tcompass.direction.destination += angle;",
				"\t\t}",
				"",
				"\t\tcursor.destination.x = Math.round( cursor.x * cols ) / cols;",
				"\t\tcursor.destination.y = Math.round( cursor.y * rows ) / rows;",
				"",
				"\t\tpc.copy( cursor.destination );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e * l;",
				"\t}",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"City",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var List = FRAME.getResource( 'List' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"var compass = FRAME.getResource( 'compass' );",
				"",
				"var model = FRAME.getResource( 'models' ).city;",
				"var materials = FRAME.getResource( 'materials' ).city;",
				"",
				"var parameters = {",
				"\tblock: new FRAME.Parameters.Integer( 'Block Size', 64 ),",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 540 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 36 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.1 ),",
				"\tdistance: new FRAME.Parameters.Float( 'Distance', 2 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"var block = new THREE.Vector2();",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"",
				"var blocks = new THREE.Group();",
				"group.add( blocks );",
				"",
				"materials.floor.uniforms.subdivisions.value = cols;",
				"materials.floor.uniforms.size.value = parameters.size.value;",
				"materials.floor.uniforms.color.value.set( 0x262532 );",
				"materials.floor.uniforms.median.value.set( 0x3a394a );",
				"// materials.floor.wireframe = true;",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 64, 64 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"var elements = [];",
				"var types = {",
				"\tbuildings: new List(),",
				"\tpavements: new List()",
				"};",
				"",
				"var material = materials.building;",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries.slice( 0 );",
				"\tvar pavement = stripPavement( geometries );",
				"",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = Math.floor( Math.random() * length );",
				"\t\tvar mesh = new THREE.Group();",
				"\t\tvar a = new THREE.Mesh( geometries[ id ], material );",
				"\t\tvar b = new THREE.Mesh( pavement, material );",
				"",
				"\t\tmesh.add( a );",
				"\t\tmesh.add( b );",
				"",
				"\t\ttypes.buildings.push( a );",
				"\t\ttypes.pavements.push( b );",
				"",
				"\t\ta.scale.y = - 1;",
				"",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"",
				"\t\tmesh.rotation.reorder( 'ZXY' );",
				"\t\tmesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"",
				"\t\tblocks.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( {",
				"",
				"\tinTransition: true,",
				"\tindex: stages.length,",
				"\tscene: group,",
				"\ttypes: types,",
				"\tcurvature: { value: 0 },",
				"\tblocks: blocks,",
				"\tground: ground,",
				"\treset: function () {",
				"\t\tcompass.direction.reset();",
				"\t\tupdateDirection( true );",
				"\t}",
				"",
				"} );",
				"var stage = stages[ stages.length - 1 ];",
				"",
				"function start () {",
				"",
				"\tstage.curvature.value = 0;",
				"\tstages.current = stage;",
				"\tstages.index = stage.index;",
				"",
				"\tcursor.set( 0, 0 );",
				"\tpc.copy( cursor );",
				"",
				"\tannie.rotation.y = 0;",
				"\tblocks.position.y = 0;",
				"\tground.position.y = 0;",
				"\tgroup.position.y = 0;",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"}",
				"",
				"function end () {",
				"",
				"\tscene.remove( group );",
				"\tgroup.visible = true;",
				"",
				"}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\tcompass.step.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 100;",
				"",
				"\t\t/*",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\t*/",
				"",
				"\t} else {",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.28;",
				"\t\t}",
				"\t\tcompass.step.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 80;",
				"",
				"\t}",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = compass.step.value * ( dt || 0 );",
				"\tvar curvature = stage.curvature.value;",
				"",
				"\tif ( !stage.inTransition ) {",
				"\t\tupdateDirection();",
				"\t}",
				"",
				"\tvar tdx = amplitude * Math.cos( compass.direction.value );",
				"\tvar tdy = amplitude * Math.sin( compass.direction.value );",
				"\tvar ry = compass.direction.value - HALF_PI;",
				"",
				"\tblocks.position.y = 5 * Math.sqrt( curvature ) + 0.35;",
				"",
				"\tground.material.uniforms.curvature.value = curvature;",
				"\t",
				"\tTHREE.neonShader.globals.motion.value = amplitude * size;",
				"\tTHREE.neonShader.globals.yRot.value = ry;",
				"",
				"\tcursor.x += tdx;",
				"\tcursor.y += tdy;",
				"\tgroup.rotation.y = ry;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"\t\tvar x2 = x * 2;",
				"\t\tvar y2 = y * 2;",
				"",
				"\t\tvar phi =  Math.atan2( - y, - x );",
				"\t\tvar dist = Math.sqrt( x2 * x2 + y2 * y2 );",
				"\t\tvar bend = curvature * dist;",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"",
				"\t\tmesh.rotation.x = Math.sin( phi );",
				"\t\tmesh.rotation.z = Math.cos( phi );",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.y = size * ( bend * bend ) / 2;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t\tmesh.rotation.x *= - HALF_PI * bend;",
				"\t\tmesh.rotation.z *= HALF_PI * bend;",
				"",
				"\t}",
				"",
				"}",
				"",
				"var pc = new THREE.Vector2();",
				"",
				"function updateDirection ( silent ) {",
				"",
				"\tvar dx = cursor.x - pc.x;",
				"\tvar dy = cursor.y - pc.y;",
				"",
				"\tif ( dx === 0 && dy === 0) return;",
				"",
				"\tvar tx = dx > 0 ? 1 : ( dx === 0 ? 0 : - 1 );",
				"\tvar ty = dy > 0 ? 1 : ( dy === 0 ? 0 : - 1 );",
				"",
				"\tvar cx = Math.floor( cursor.x * cols );",
				"\tvar cy = Math.floor( cursor.y * rows );",
				"",
				"\tif ( cx !== block.x || cy !== block.y ) {",
				"\t\tif ( !silent ) {",
				"\t\t\tvar angle = TWO_PI * Math.round( 4 * compass.theta.destination / TWO_PI ) / 4;",
				"\t\t\tcompass.direction.destination += HALF_PI * Math.sin( angle - compass.direction.destination );",
				"\t\t}",
				"\t\tblock.set( cx, cy );",
				"\t}",
				"",
				"\tpc.copy( cursor );",
				"",
				"}",
				"",
				"function stripPavement ( geometries ) {",
				"\tvar list = geometries.slice( 0 );",
				"\tvar regex = new RegExp( 'pavement', 'i' );",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar geometry = list[ i ];",
				"\t\tif ( regex.test( geometry.name ) ) {",
				"\t\t\tgeometries.splice( i, 1 );",
				"\t\t\treturn geometry",
				"\t\t}",
				"\t}",
				"\treturn null;",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e * l;",
				"\t}",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"Neon Lights",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"var compass = FRAME.getResource( 'compass' );",
				"",
				"var model = FRAME.getResource( 'models' ).toys;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"var clock = FRAME.getResource( 'clock' );",
				"",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 256 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 ),",
				"\tminDistance: new FRAME.Parameters.Float( 'Min Distance', 10.0 )",
				"};",
				"",
				"var cursor = new THREE.Vector3();",
				"var temp = new THREE.Vector3();",
				"var material = materials.toy;",
				"",
				"var cameraYaw = new Ease( 0, 0.66 );",
				"var cameraPitch = new Ease( 0, 0.66 );",
				"var worldYaw = new Ease( 0, 0.033 );",
				"var worldPitch = new Ease( 0, 0.033 );",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"",
				"var elements = [];",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tvar seed = Math.random();",
				"\t\tvar scalar = Math.floor( seed * 8 ) + 1;",
				"\t\tmesh.scale.setScalar( scalar );",
				"",
				"\t\tmesh.userData.velocity = {",
				"\t\t\trotation: new THREE.Euler(",
				"\t\t\t\t( 1 - seed ) * TWO_PI - Math.PI,",
				"\t\t\t\t( 1 - seed ) * TWO_PI - Math.PI,",
				"\t\t\t\t( 1 - seed ) * TWO_PI - Math.PI",
				"\t\t\t)",
				"\t\t};",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector3(",
				"\t\t\tMath.random(),",
				"\t\t\tMath.random(),",
				"\t\t\tMath.random()",
				"\t\t);",
				"",
				"\t\tvar rv = mesh.userData.velocity.rotation;",
				"",
				"\t\tmesh.rotation.x = rv.x;",
				"\t\tmesh.rotation.y = rv.y;",
				"\t\tmesh.rotation.z = rv.z;",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( {",
				"\tscene: group,",
				"\tindex: stages.length,",
				"\tplaying: false",
				"} );",
				"var stage = stages[ stages.length - 1 ];",
				"",
				"function start () {",
				"",
				"\tstages.current = stage;",
				"\tstages.index = stage.index;",
				"",
				"\tcameraYaw.reset();",
				"\tcameraPitch.reset();",
				"\tworldYaw.reset();",
				"\tworldPitch.reset();",
				"",
				"\tannie.rotation.y = 0;",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"",
				"\tclock.getDelta();",
				"\tstage.playing = true;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\tstage.playing = false;",
				"",
				"}",
				"",
				"function update ( progress, timelineDelta ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar dt = clock.getDelta();",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\tcompass.step.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 100;",
				"",
				"\t} else {",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1;",
				"\t\t}",
				"",
				"\t\tcompass.step.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 80;",
				"",
				"\t}",
				"",
				"\tcameraYaw.destination -= controllers.axes.delta.x;",
				"\tcameraPitch.destination += controllers.axes.delta.y;",
				"",
				"\tcameraPitch.destination = clamp( cameraPitch.destination, - HALF_PI, HALF_PI );",
				"",
				"\tif ( controllers.axes.delta.y === 0 ) {",
				"\t\tworldPitch.destination = cameraPitch.value;",
				"\t}",
				"\tif ( controllers.axes.delta.x === 0 ) {",
				"\t\tworldYaw.destination = cameraYaw.value;",
				"\t}",
				"",
				"\tcameraPitch.update( dt );",
				"\tcameraYaw.update( dt );",
				"",
				"\tworldPitch.update( dt );",
				"\tworldYaw.update( dt );",
				"\tcompass.step.update( timelineDelta );",
				"",
				"\tif ( controllers.right.userData.mesh ) {",
				"",
				"\t\tvar velocity = 0.2;",
				"\t\tvar controller= controllers.right.userData.mesh;",
				"",
				"\t\tvar ra = controller.children[ 0 ];",
				"\t\tvar rb = controller.children[ 1 ];",
				"",
				"\t\tvar sa = ra.children[ 0 ];",
				"\t\tvar sb = ra.children[ 0 ];",
				"",
				"\t\tra.rotation.x -= worldPitch.value / 100;",
				"\t\tra.rotation.z += worldYaw.value / 100;",
				"",
				"\t\trb.rotation.x += worldYaw.value / 100;",
				"\t\trb.rotation.z -= worldPitch.value / 100;",
				"",
				"\t\tsa.rotation.y += velocity;",
				"\t\tsb.rotation.y -= velocity;",
				"",
				"\t}",
				"",
				"\tvar direction = Math.cos( cameraPitch.value );",
				"\tvar distance = dolly.userData.distance;",
				"",
				"\tdolly.position.x = distance * Math.sin( cameraYaw.value - worldYaw.value );",
				"\tdolly.position.z = - distance * Math.cos( cameraYaw.value - worldYaw.value );",
				"\tdolly.position.y = - distance * Math.sin( cameraPitch.value - worldPitch.value );",
				"\tdolly.lookAt( dolly.userData.target );",
				"",
				"\tvar t = ( timelineDelta || 0 );",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar amplitude = compass.step.value * t;",
				"",
				"\ttemp.set(",
				"\t\t\tMath.cos( worldYaw.value ),",
				"\t\t\tMath.sin( worldPitch.value ),",
				"\t\t\tMath.sin( worldYaw.value ) )",
				"\t\t.setLength( amplitude );",
				"",
				"\tcursor.x += direction * temp.x;",
				"\tcursor.y += temp.y;",
				"\tcursor.z += direction * temp.z;",
				"",
				"\tgroup.rotation.x = worldPitch.value;",
				"\tgroup.rotation.y = worldYaw.value - Math.PI / 2;",
				"",
				"\tvar minDist = parameters.minDistance.value;",
				"\tvar bufferBlend = 0, dist;",
				"\tvar posNorm = new THREE.Vector3();",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"\t\tvar z = mod( cursor.z + offset.z, 1 ) - 0.5;",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = z;",
				"\t\tmesh.position.y = y;",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.z *= - size;",
				"\t\tmesh.position.y *= - size;",
				"\t\t",
				"\t\tdist = mesh.position.length() - mesh.geometry.boundingSphere.radius;",
				"\t\tbufferBlend = Math.min( dist, minDist ) / minDist;",
				"\t\tposNorm.copy(mesh.position).setLength( minDist );",
				"\t\tmesh.position.lerp( posNorm, 1.0 - bufferBlend );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function clamp ( v, min, max ) {",
				"\treturn Math.min( Math.max( v, min ), max );",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e * l;",
				"\t}",
				"\treturn v % l;",
				"}",
				""
			]
		],
		[
			"VRUpdateEffect",
			[
				"var controls = FRAME.getResource( 'controls' );",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tcontrols.update();",
				"",
				"}"
			]
		],
		[
			"RenderEffect",
			[
				"var parameters = {",
				"\tdebug: new FRAME.Parameters.Boolean( 'Debug', false )",
				"};",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"var debugMaterial = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tscene.overrideMaterial = parameters.debug.value ? debugMaterial : null;",
				"",
				"\teffect.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Mouth Half Open",
			[
				"function start(){",
				"",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = 5;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Mouth Open",
			[
				"function start(){",
				"",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = 7;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Mouth Half Open Wide",
			[
				"function start(){",
				"",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = 6;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Mouth Closed",
			[
				"function start(){",
				"",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie )return;",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = 4;",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Fog 1-1",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = 0.5;",
				"var fog_target = 3.1;",
				"",
				"function start () {",
				"",
				"\t//fog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.Out( progress );",
				"\tfog.far = t * ( ( fog_target ) - fog_origin ) + fog_origin;",
				"",
				"}"
			]
		],
		[
			"Add Forest Object 'til Exhausted",
			[
				"var frameCount = 0;",
				"var stage;",
				"var types;",
				"var list;",
				"var type;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"\ttypes = stage.types;",
				"\tlist = types.list;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar type = list[ Math.floor( Math.random() * list.length ) ];",
				"\tvar items = types[ type ];",
				"",
				"\tframeCount++;",
				"",
				"\tif ( items.exhausted || !!( frameCount % 5 ) ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\telem = items.next();",
				"\tstage.add( elem, Math.PI / 2, 0.4 );",
				"",
				"}"
			]
		],
		[
			"Fog 1-2",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = fog.far;",
				"var fog_target = 6.4;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}",
				""
			]
		],
		[
			"Add Mushroom in FOV",
			[
				"var elem;",
				"",
				"function start () {",
				"",
				"\tvar stage = FRAME.getResource( 'stages' ).current;",
				"\telem = stage.types.mushroom.next();",
				"\tstage.add( elem, Math.PI / 16, 0.1 );",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Add random Forest Object in FOV",
			[
				"var elem;",
				"",
				"function start () {",
				"",
				"\tvar stage = FRAME.getResource( 'stages' ).current;",
				"\tvar saplings = stage.saplings;",
				"",
				"\tif ( saplings.exhausted ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\telem = saplings.next();",
				"\telem.scale.setScalar( 0.001 );",
				"",
				"\tif ( elem.userData.tween ) {",
				"\t\telem.userData.tween.start();",
				"\t}",
				"",
				"\tstage.add( elem, Math.PI / 2, 0.2 );",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {}"
			]
		],
		[
			"Fog 1-3",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = fog.far;",
				"var fog_target = 11;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}"
			]
		],
		[
			"Annie Age Adult",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"var stages = FRAME.getResource( 'stages' );",
				"var compass = FRAME.getResource( 'compass' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.age( 'adult' );",
				"",
				"\tvar adult = annie.userData.models.adult;",
				"\tif ( adult ) {",
				"\t\tswitchToAction( adult, 'run' );",
				"\t\tadult.userData.currentAnimation = adult.userData.animations.run;",
				"\t}",
				"}",
				"",
				"function end () {",
				"",
				"\tif ( stages.current ) {",
				"\t\tstages.current.inTransition = false;",
				"\t\tstages.current.reset();",
				"\t}",
				"",
				"}",
				"",
				"function update( progress ){}",
				"",
				"function switchToAction ( model, actionName ) {",
				"",
				"\tvar animations = model.userData.animations;",
				"\tvar action;",
				"",
				"\tfor ( var name in animations ) {",
				"\t\tvar animation = animations[ name ];",
				"\t\tif ( name === actionName ) {",
				"\t\t\taction = animation.action;",
				"\t\t}",
				"\t\tanimation.action.stop();",
				"\t}",
				"",
				"\tif ( action ) {",
				"\t\taction.play();",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Building Y Scale",
			[
				"var stage;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"\tvar types = stage.types;",
				"\tif ( !types ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = 0.01;",
				"\t}\t",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tvar t = TWEEN.Easing.Elastic.Out( progress );",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = t || 0.01;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Building Y Scale + 0.5",
			[
				"var stage;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"\tvar types = stage.types;",
				"\tif ( !types ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = 0.5;",
				"\t}\t",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tvar t = 0.5 * TWEEN.Easing.Elastic.Out( progress ) + 0.5;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = t;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"City Curvature",
			[
				"var stage;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"\tstage.curvature.value = 0;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tstage.curvature.value = 0;",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar t = Math.sin( progress * Math.PI );",
				"\tt = TWEEN.Easing.Sinusoidal.InOut( t );",
				"\tstage.curvature.value = t;",
				"",
				"}"
			]
		],
		[
			"Randomize Building Y",
			[
				"var stage;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"\tvar types = stage.types;",
				"\tif ( !types ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = 1;",
				"\t}\t",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tvar amp = Math.sin( progress * Math.PI );",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = amp * Math.random() * 0.5 + 1;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"City.curvature 2",
			[
				"var stage;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"\tstage.curvature.value = 0;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tstage.curvature.value = 2;",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.In( progress );",
				"\tstage.curvature.value = 2 * t;",
				"",
				"}"
			]
		],
		[
			"Forest Position Y",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = 0;",
				"var fog_target = 3.5;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"\tvar stage = FRAME.getResource( 'stages' ).current;",
				"",
				"\tif ( stage && stage.scene ) {",
				"\t\tstage.scene.position.y = 0;",
				"\t}",
				"\tstage.inTransition = true;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tvar stage = FRAME.getResource( 'stages' ).current;",
				"\tif ( stage ) {",
				"\t\tstage.inTransition = false;",
				"\t}",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar stage = FRAME.getResource( 'stages' ).current;",
				"",
				"\tif ( stage && stage.scene ) {",
				"\t\tvar t = TWEEN.Easing.Circular.In( progress );",
				"\t\tstage.scene.position.y = - 64 * t;",
				"\t\tstage.buffer.value = 2 * t + 1;",
				"\t\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Exterior House",
			[
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var models = FRAME.getResource( 'models' ).exterior;",
				"var stages = FRAME.getResource( 'stages' );",
				"",
				"var group = new THREE.Scene();",
				"var house;",
				"",
				"models.ready( function () {",
				"",
				"\tvar geometry = models.geometries[ 0 ];",
				"\tvar material = THREE.neonShader.vertexColoredDoubleSided;",
				"",
				"\thouse = new THREE.Mesh( geometry, material );",
				"\thouse.rotation.y = Math.PI / 2;",
				"\thouse.position.x = - 0.65;",
				"\tgroup.add( house );",
				"",
				"} );",
				"",
				"stages.exterior = {",
				"\tscene: group",
				"};",
				"",
				"function start() {",
				"",
				"\tgroup.visible = true;",
				"\tscene.add( group );",
				"\tcamera.userData.fov.destination = 80;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tgroup.visible = false;",
				"\tscene.remove( group );",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"House Position",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var exterior = stages.exterior;",
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = 25;",
				"var fog_target = 6;",
				"",
				"var scene;",
				"",
				"var destination = new THREE.Vector3( 0, - 16.65, 3 );",
				"var origin = new THREE.Vector3( 0, - 32, 36 );",
				"",
				"function start () {\t",
				"",
				"//\tfog_origin = fog.far;",
				"\tscene = exterior.scene;",
				"\tscene.position.copy( origin );",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.InOut( progress );",
				"\tvar y = t * ( destination.y - origin.y ) + origin.y;",
				"\tvar z = progress * ( destination.z - origin.z ) + origin.z;",
				"",
				"\tTHREE.neonShader.globals.motion.value = scene.position.z - z;",
				"",
				"\tscene.position.y = y;",
				"\tscene.position.z = z;",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}"
			]
		],
		[
			"Exterior Position Z",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var exterior = stages.exterior;",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"var scene;",
				"",
				"var origin = new THREE.Vector3( 0, - 16.65, 3 );",
				"var destination = new THREE.Vector3( 0, - 16.65, - 22.5 );",
				"",
				"function start () {\t",
				"",
				"\tscene = exterior.scene;",
				"\tscene.position.copy( origin );",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar y = progress * ( destination.y - origin.y ) + origin.y;",
				"\tvar z = progress * ( destination.z - origin.z ) + origin.z;",
				"",
				"\tTHREE.neonShader.globals.motion.value = scene.position.z - z;",
				"",
				"\tscene.position.y = y;",
				"\tscene.position.z = z;",
				"",
				"}"
			]
		],
		[
			"Annie Fly Animation Triggers",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.play( 'transition' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar action = animation.action;",
				"",
				"\taction.timeScale = 1;",
				"\taction.loop = THREE.LoopOnce;",
				"",
				"}",
				"",
				"function end () {",
				"}",
				"",
				"function update( progress ) {",
				"}"
			]
		],
		[
			"Annie Run 0.94",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.age( 'child' );",
				"\tannie.userData.play( 'run' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar action = animation.action;",
				"\t",
				"\taction.timeScale = 0.94;",
				"",
				"}",
				"",
				"function end () {",
				"}",
				"",
				"function update( progress ) {",
				"}"
			]
		],
		[
			"Bird Flying",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var group = FRAME.getResource( 'bird' );",
				"",
				"var bird;",
				"var string;",
				"",
				"annie.userData.animations.complete.ready( function () {",
				"",
				"\tbird = annie.userData.models.bird;",
				"\tstring = annie.userData.models.string;",
				"",
				"\tbird.material = THREE.neonShader.skinnedShader.clone();",
				"\tstring.material = THREE.neonShader.skinnedShader.clone();",
				"",
				"\tfor ( var j in THREE.neonShader.globals ) {",
				"\t\tstring.material.uniforms[ j ] = THREE.neonShader.globals[ j ];",
				"\t\tbird.material.uniforms[ j ] = THREE.neonShader.globals[ j ];",
				"\t}",
				"",
				"\tbird.visible = true;",
				"\tstring.visible = true;",
				"",
				"\tbird.traverse( removeFrustumCulling );",
				"\tstring.traverse( removeFrustumCulling );",
				"",
				"\tbird.rotation.z = Math.PI / 2;",
				"",
				"\tvar bone = string.getObjectByName( 'stringbone_B01' );",
				"",
				"\tgroup.add( string );",
				"\tbone.add( bird );",
				"",
				"\tvar animation;",
				"",
				"\tanimation = bird.userData.animations.flap;",
				"\tanimation.action.stop().play();",
				"",
				"\tanimation = string.userData.animations.loop;",
				"\tanimation.action.stop().play();",
				"",
				"\tgroup.userData.string = string;",
				"",
				"} );",
				"",
				"function start () {",
				"",
				"\tgroup.position.y = 12;",
				"",
				"\tgroup.visible = true;",
				"\tscene.add( group );",
				"",
				"\tvar animation;",
				"",
				"\tif ( bird ) {",
				"\t\tbird.visible = true;",
				"\t\tanimation = bird.userData.animations.flap;",
				"\t\tanimation.action.stop().play();",
				"\t}",
				"",
				"\tif ( string ) {",
				"\t\tstring.visible = true;",
				"\t\tanimation = string.userData.animations.loop;",
				"\t\tanimation.action.stop().play();",
				"\t}\t",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tgroup.visible = false;",
				"\tscene.remove( group );",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tif ( bird && bird.visible ) {",
				"\t\tbird.mixer.update( dt );",
				"\t}",
				"",
				"\tif ( string && string.visible ) {",
				"\t\tstring.mixer.update( dt );",
				"\t}",
				"",
				"}",
				"",
				"function removeFrustumCulling ( obj ) {",
				"\tif ( obj.isMesh ) {",
				"\t\tobj.frustumCulled = false;",
				"\t}",
				"}"
			]
		],
		[
			"Annie Adult Fly Transition",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.age( 'adult' );",
				"\tannie.userData.play( 'transition' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar action = animation.action;",
				"",
				"\taction.loop = THREE.LoopOnce;",
				"\taction.timeScale = 1;",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update( progress ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tif ( animation ) {",
				"\t\tanimation.action.timeScale = 1;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Teenage Annie Transition",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"var stage;",
				"",
				"function start () {",
				"",
				"\tannie.userData.age( 'teenager' );",
				"\tannie.userData.play( 'transition' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tanimation.action.loop = THREE.LoopOnce;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tannie.userData.play( 'run' );",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"\tif ( stage && stage.types && stage.types.buildings ) {",
				"\t\tfor ( var i = 0; i < stage.types.buildings.length; i++ ) {",
				"\t\t\tstage.types.buildings[ i ].scale.y = - 1;",
				"\t\t}",
				"\t}",
				"",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Exit Hallway Effect",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var models = FRAME.getResource( 'models' ).hallway;",
				"var stages = FRAME.getResource( 'stages' );",
				"var house = stages[ 1 ];",
				"var city = stages[ 2 ];",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var materials = FRAME.getResource( 'materials' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"var group = new THREE.Scene();",
				"var house;",
				"",
				"models.ready( function () {",
				"",
				"\tvar parent = models.geometries[ 0 ];",
				"\tvar house = parent.children[ 0 ];",
				"\tvar material = materials.house.hallway;",
				"",
				"\thouse.material = material;",
				"\tparent.rotation.y = Math.PI / 2;",
				"",
				"\tstages.hallway.door = parent.children[ 1 ];",
				"\tstages.hallway.door.material = material;",
				"",
				"\tgroup.add( parent );",
				"",
				"} );",
				"",
				"stages.hallway = {",
				"\tscene: group",
				"};",
				"",
				"function start() {",
				"",
				"\tgroup.visible = true;",
				"\tscene.add( group );",
				"",
				"\tif ( stages.hallway.door ) {",
				"\t\tstages.hallway.door.rotation.y = 0;",
				"\t}",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tgroup.visible = false;",
				"\tscene.remove( group );",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"",
				"\tif ( animation ) {",
				"\t\tanimation.action.timeScale = 1.28;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Bedroom Effect",
			[
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"var scene = FRAME.getResource( 'scene' );",
				"var models = FRAME.getResource( 'models' ).bedroom;",
				"var stages = FRAME.getResource( 'stages' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"var group = new THREE.Scene();",
				"var bedroom, teddy;",
				"",
				"models.ready( function () {",
				"",
				"\tfor ( var i = 0; i < models.geometries.length; i++ ) {",
				"",
				"\t\tvar geometry = models.geometries[ i ];",
				"\t\tvar name = geometry.name;",
				"\t\tvar mesh;",
				"",
				"\t\tif ( /bedroom/i.test( name ) ) {",
				"\t\t\tmesh = new THREE.Mesh( geometry, materials.room );",
				"\t\t\tbedroom = mesh;",
				"\t\t\tstages.bedroom.room = bedroom;",
				"\t\t\tgroup.add( mesh );",
				"\t\t}",
				"",
				"\t}",
				"",
				"} );",
				"",
				"annie.userData.models.complete.ready( function () {",
				"",
				"\tteddy = annie.userData.models.bear;",
				"\tstages.bedroom.teddy = teddy;",
				"\tgroup.add( teddy );",
				"",
				"} );",
				"",
				"stages.bedroom = {",
				"\tscene: group,",
				"\troom: bedroom,",
				"\tteddy: teddy",
				"};",
				"",
				"function start() {",
				"",
				"\tstages.current = stages[ 1 ];",
				"\tstages.index = 1;",
				"",
				"\tannie.userData.age( 'child' );",
				"",
				"\tif ( stages.bedroom.room ) {",
				"\t\tgroup.add( stages.bedroom.room );",
				"\t\tstages.bedroom.room.position.set( 0, 0, 0 );",
				"\t\tstages.bedroom.room.rotation.y = 0;",
				"\t\tstages.bedroom.room.visible = true;",
				"\t}",
				"\t",
				"\tif ( stages.bedroom.teddy ) {",
				"",
				"\t\tstages.bedroom.teddy.visible = true;",
				"\t\tstages.bedroom.teddy.position.z = 1.593022;",
				"\t\tswitchToAction( stages.bedroom.teddy, 'idle' );",
				"",
				"\t\tvar mesh = stages.bedroom.teddy.children[ 1 ];",
				"\t\tif ( mesh && mesh.isMesh ) {",
				"\t\t\tmesh.material.uniforms.opacity.value = 1;",
				"\t\t}",
				"\t}",
				"",
				"\tgroup.visible = true;",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tgroup.visible = false;",
				"\tscene.remove( group );",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tvar bear = annie.userData.models.bear;",
				"\t",
				"\tif ( bear && bear.mixer ) {",
				"\t\tbear.mixer.update( dt );",
				"\t}",
				"",
				"}",
				"",
				"function switchToAction ( model, actionName ) {",
				"",
				"\tvar animations = model.userData.animations;",
				"\tvar action, prev;",
				"\tvar currentAnimation = model.userData.currentAnimation;",
				"\t",
				"\tfor ( var name in animations ) {",
				"\t\tvar animation = animations[ name ];",
				"\t\tif ( name === actionName ) {",
				"\t\t\taction = animation.action;",
				"\t\t}",
				"\t\tif ( !currentAnimation ) {",
				"\t\t\tanimation.action.stop();",
				"\t\t}",
				"\t}",
				"",
				"\tif ( currentAnimation ) {",
				"\t\taction.crossFadeFrom( currentAnimation.action, 0.35 );",
				"\t}",
				"",
				"\tif ( action ) {",
				"\t\taction.play();",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Bedroom Effect Position Z",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"",
				"var distance = Math.abs( - 11.647567212024148 + 21.25 );",
				"var origin = new THREE.Vector3( 0, 0, 13.398305084745763 );",
				"var destination = new THREE.Vector3( 0, 0, 0 );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar bedroom = stages.bedroom;",
				"",
				"\tif ( !bedroom ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar scene = bedroom.scene;\t",
				"",
				"\tscene.position.x = progress * ( destination.x - origin.x ) + origin.x;",
				"\tscene.position.y = progress * ( destination.y - origin.y ) + origin.y;",
				"\tscene.position.z = progress * ( destination.z - origin.z ) + origin.z;",
				"",
				"}"
			]
		],
		[
			"Door.rotation Y",
			[
				"var stage = FRAME.getResource( 'stages' ).hallway;",
				"var door;",
				"var origin = 0;",
				"var destination = - Math.PI * 0.66;",
				"",
				"function start () {",
				"",
				"\tdoor = stage.door;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tdoor = stage.door",
				"\tif ( !door ) {",
				"\t\treturn;",
				"\t}",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tdoor.rotation.y = t * ( destination - origin ) + origin;",
				"",
				"}"
			]
		],
		[
			"Annie Fly",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.play( 'fly' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar action = animation.action;",
				"",
				"\taction.loop = THREE.Loop;",
				"\taction.timeScale = 1;",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"String Animation",
			[
				"var bird = FRAME.getResource( 'bird' );",
				"",
				"function start () {",
				"",
				"\tvar string = bird.userData.string;",
				"\tif ( !string ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar animation = string.userData.animations.flap;",
				"\tanimation.action.stop();",
				"",
				"\tvar currentAnimation = string.userData.animations.loop;",
				"",
				"\tanimation.action.crossFadeFrom( currentAnimation.action, 0.35 );",
				"\tanimation.action.play();",
				"",
				"\tbird.position.set( 0, 0, 0 );",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"}"
			]
		],
		[
			"Bird.position Y",
			[
				"var bird = FRAME.getResource( 'bird' );",
				"",
				"var origin = new THREE.Vector3( 0, 12, 0 );",
				"var destination = new THREE.Vector3( 0, 0, 0 );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.Out( progress );",
				"\tbird.position.y = t * ( destination.y - origin.y ) + origin.y;",
				"\tbird.position.z = progress * ( destination.z - origin.z ) + origin.z; ",
				"",
				"}"
			]
		],
		[
			"Bird.position Y Z",
			[
				"var bird = FRAME.getResource( 'bird' );",
				"",
				"var origin = new THREE.Vector3( 0, 0, 0 );",
				"var destination = new THREE.Vector3( 0, - 2, - 8.684210526315791 );",
				"",
				"function start () {",
				"",
				"\tvar string = bird.userData.string;",
				"\tif ( !string ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar animation = string.userData.animations.flap;",
				"\tanimation.action.stop().play();",
				"",
				"\tbird.position.copy( origin );",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"//\tbird.position.y = progress * ( destination.y - origin.y ) + origin.y;",
				"\tbird.position.z = progress * ( destination.z - origin.z ) + origin.z;",
				"",
				"}"
			]
		],
		[
			"Annie.userData.age Teenager",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.age( 'teenager' );",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Stage.inTransition false",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var annie = FRAME.getResource( 'annie' );",
				"var compass = FRAME.getResource( 'compass' );",
				"",
				"var parameters = {",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.8125 )",
				"};",
				"",
				"function start () {",
				"",
				"\tcompass.step.set( 0 );",
				"\tannie.userData.play( 'run' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar action = animation.action;\t",
				"\taction.timeScale = 1.28;",
				"",
				"\tcompass.step.set( 0.1 * parameters.step.value );",
				"\tif ( stages.current ) {",
				"\t\tstages.current.reset();",
				"\t\tstages.current.inTransition = false;",
				"\t}",
				"}",
				"",
				"function end () {}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Stats",
			[
				"var dom = FRAME.getDOM();",
				"var info = FRAME.getResource( 'renderer' ).info;",
				"var neon = FRAME.getResource( 'neon' );",
				"var scene = FRAME.getResource( 'scene' );",
				"",
				"var div = document.createElement( 'div' );",
				"div.style.position = 'absolute';",
				"div.style.bottom = 0;",
				"div.style.left = 0;",
				"div.style.color = '#fff';",
				"div.style.margin = '8px';",
				"",
				"var prevTime;",
				"",
				"/*",
				"var gui = new dat.GUI();",
				"gui.closed = true;",
				"",
				"gui.add(THREE.neonShader.globals.neon, 'value', 0, 1).name('neon');",
				"gui.add(THREE.neonShader.globals.sepia, 'value', 0, 5).name('sepia');",
				"gui.add(THREE.neonShader.globals.saturation, 'value', 0, 5).name('saturation');",
				"",
				"var colors = {",
				"\tsepiaCol1: THREE.neonShader.globals.sepiaCol1.value.getHex(),",
				"\tsepiaCol2: THREE.neonShader.globals.sepiaCol2.value.getHex(),",
				"\tneonCol: THREE.neonShader.globals.neonCol.value.getHex(),",
				"\tfogCol: scene.fog.color.getHex()",
				"}\t",
				"",
				"gui.add(THREE.neonShader.globals.neonFade, 'value', 0.0, 1).name('neonFade');",
				"gui.add(THREE.neonShader.globals.neonGlow, 'value', 0.0, 1).name('neonGlow');",
				"gui.add(THREE.neonShader.globals.neonFreq1, 'value', 0.0, 5).name('neonFreq1');",
				"gui.add(THREE.neonShader.globals.neonFreq2, 'value', 0.0, 5).name('neonFreq2');",
				"gui.add(THREE.neonShader.globals.neonNearClip, 'value', 0.0, 1).name('neonNearClip');",
				"gui.addColor(colors, 'sepiaCol1').name('sepiaCol1').onChange( function( value ) {",
				"\tTHREE.neonShader.globals.sepiaCol1.value.setHex( value );",
				"} );",
				"gui.addColor(colors, 'sepiaCol2').onChange( function( value ) {",
				"\tTHREE.neonShader.globals.sepiaCol2.value.setHex( value );",
				"} );",
				"gui.addColor(colors, 'neonCol').onChange( function( value ) {",
				"\tTHREE.neonShader.globals.neonCol.value.setHex( value );",
				"} );",
				"gui.addColor(colors, 'fogCol').onChange( function( value ) {",
				"\tscene.fog.color.setHex( value );",
				"} );",
				"",
				"gui.domElement.style.position = 'absolute';",
				"gui.domElement.style.height = 100 + '%';",
				"gui.domElement.style.top = 0;",
				"gui.domElement.style.right = 0;",
				"*/",
				"",
				"function start(){",
				"",
				"\tprevTime = performance.now();",
				"",
				"\tdom.appendChild( div );",
				"\t// dom.appendChild( gui.domElement );",
				"",
				"}",
				"",
				"function end(){",
				"",
				"\tif ( div.parentNode === dom ) dom.removeChild( div );",
				"\t// if ( gui.domElement.parentNode === dom ) dom.removeChild( gui.domElement );",
				"",
				"}",
				"",
				"function update( progress ){",
				"",
				"\tvar time = performance.now();",
				"",
				"\tvar text = 'ms: ' + ( time - prevTime ).toFixed( 2 ) + '<br />' +",
				"\t\t'calls: ' + info.render.calls + '<br />' +",
				"\t\t'vertices: ' + info.render.vertices + '<br />' +",
				"\t\t'programs: ' + info.programs.length;",
				"",
				"\tdiv.innerHTML = text;",
				"",
				"\tprevTime = time;",
				"",
				"\t/*",
				"\tneon.animate = gui.closed;",
				"",
				"\tif ( !gui.closed ) {",
				"",
				"\t\tcolors.sepiaCol1 = THREE.neonShader.globals.sepiaCol1.value.getHex();",
				"\t\tcolors.sepiaCol2 = THREE.neonShader.globals.sepiaCol2.value.getHex();",
				"\t\tcolors.neonCol = THREE.neonShader.globals.neonCol.value.getHex();",
				"\t\tcolors.fogCol = scene.fog.color.getHex();",
				"\t",
				"\t\tfor ( var i in gui.__controllers ) {",
				"",
				"\t\t\tgui.__controllers[ i ].updateDisplay();",
				"",
				"\t\t}",
				"",
				"\t}",
				"\t*/",
				"",
				"}"
			]
		],
		[
			"Fog 3-1",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = fog.far;",
				"var fog_target = 50;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}",
				""
			]
		],
		[
			"City.Position Y",
			[
				"var stage;",
				"var destination = 50;",
				"var origin = 0;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' ).current;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.In( progress );",
				"\tstage.scene.position.y = t * ( destination - origin ) + origin;",
				"\tstage.scene.position.y *= - 1;",
				"",
				"}"
			]
		],
		[
			"Neon Out",
			[
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var target = {",
				"\tdefault: {",
				"\t\tneon: 1,",
				"\t\tsepia: 3.5,",
				"\t\tsaturation: 0.1,",
				"\t\tneonFade: 1.03,",
				"\t\tneonGlow: 1,",
				"\t\tneonFreq1: 0.4,",
				"\t\tneonFreq2: 1.2,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0xff75,",
				"\t\tsepiaCol2: 0x57ff86,",
				"\t\tneonCol: 0xffed52,",
				"\t\tfogCol: 0x5b0e7f",
				"\t}",
				"}",
				"target.active = target.default;",
				"",
				"function start () {",
				"\tneon.setLerpOrigin();",
				"\tneon.target.default = target.default;",
				"\tneon.target.active = target.active;",
				"}",
				"",
				"function update( progress ){",
				"\tneon.lerp( progress );",
				"}",
				"",
				"function end () {}"
			]
		],
		[
			"Neon In",
			[
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var target = {",
				"\tdefault: {",
				"\t\tneon: 1,",
				"\t\tsepia: 3.5,",
				"\t\tsaturation: 0.1,",
				"\t\tneonFade: 0.53,",
				"\t\tneonGlow: 1,",
				"\t\tneonFreq1: 0.4,",
				"\t\tneonFreq2: 1.2,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0xff75,",
				"\t\tsepiaCol2: 0x57ff86,",
				"\t\tneonCol: 0xffed52,",
				"\t\tfogCol: 0x5b0e7f",
				"\t}",
				"}",
				"target.active = target.default;",
				"",
				"function start () {",
				"\tneon.setLerpOrigin();",
				"\tneon.target.default = target.default;",
				"\tneon.target.active = target.active;",
				"}",
				"",
				"function update( progress ){",
				"\tneon.lerp( progress );",
				"}",
				"",
				"function end () {}"
			]
		],
		[
			"Audio Player",
			[
				"var camera = FRAME.getResource( 'camera' );",
				"var card = FRAME.getResource( 'black-card' );",
				"var exports = FRAME.getResource( 'audio' );",
				"var root = FRAME.getResource( 'root' );",
				"var src = [ root, '/audio/03-Under-Neon-Lights', has.Chromium ? '.ogg' : '.mp3' ].join( '' );",
				"",
				"var audio = new WebAudio( exports.context );",
				"audio.src = src;",
				"",
				"exports.music = audio;",
				"",
				"function start(){",
				"",
				"\tcard.material.uniforms.opacity.value = 1;",
				"\tcard.userData.fadeIn.onComplete( removeCard );",
				"\tcard.userData.fadedIn = false;",
				"",
				"\tplayer.setAudio( audio );",
				"\tcamera.add( card );",
				"",
				"}",
				"",
				"function end(){",
				"",
				"\tplayer.setAudio( null );",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tif ( audio.buffer && !card.userData.fadedIn ) {",
				"\t\tcard.userData.fadeIn.start();",
				"\t\tcard.userData.fadedIn = true;",
				"\t}",
				"",
				"}",
				"",
				"function removeCard () {",
				"",
				"\tcamera.remove( card );",
				"",
				"}"
			]
		],
		[
			"Start Intro Effect",
			[
				"function start(){",
				"\tvar intro = FRAME.getResource( 'stages' ).intro;",
				"\tif ( intro ) {",
				"\t\tintro.reset();",
				"\t}",
				"\tplayer.currentTime = 300;",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Intro",
			[
				"var renderer = FRAME.getResource( 'renderer' );",
				"// var container = FRAME.getDOM();",
				"var container = renderer.domElement.parentNode;",
				"container.classList.add('unl-container');",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var annie = FRAME.getResource( 'annie' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var clock = FRAME.getResource( 'clock' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"var models = FRAME.getResource( 'models' );",
				"var textures = FRAME.getResource( 'textures' );",
				"var neon = FRAME.getResource( 'neon' );",
				"var assetsLoaded = false;",
				"var blackPlane = FRAME.getResource( 'black-card' );",
				"",
				"var identity = function() {};",
				"",
				"var isFunction = function(obj) {",
				"\treturn typeof obj == 'function' || false;",
				"};",
				"",
				"//",
				"",
				"var exports = FRAME.getResource( 'audio' );",
				"var root = FRAME.getResource( 'root' );",
				"var src = [ root, '/audio/apple_96k.mp3' ].join( '' );",
				"",
				"var audio = new WebAudio( exports.context );",
				"audio.src = src;",
				" ",
				"//",
				"",
				"var group = new THREE.Group();",
				"",
				"var camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 1000 );",
				"camera.position.set( 0, 1, 0 );",
				"group.add( new THREE.Group().add( camera ) );",
				"camera.parent.position.z = 2;",
				"camera.add( blackPlane );",
				"",
				"var controls = {",
				"\tvr: new THREE.VRControls( camera ),",
				"\torbit: new THREE.OrbitControls( camera, renderer.domElement ),",
				"\t// deviceOrientation: new THREE.DeviceOrientationControls( camera ),",
				"\tupdate: function () {",
				"\t\tif ( effect.isPresenting ) {",
				"\t\t\tcontrols.vr.update();",
				"\t\t// } else if ( has.mobile ) {",
				"\t\t//  controls.deviceOrientation.update();",
				"\t\t} else {",
				"\t\t\tcontrols.orbit.update();",
				"\t\t}",
				"\t}",
				"};",
				"",
				"controls.vr.standing = true;",
				"controls.orbit.target.set( 0, 0.7, -2 );",
				"",
				"controls.orbit.minPolarAngle = Math.PI / 6;",
				"controls.orbit.maxPolarAngle = Math.PI / 2;",
				"controls.orbit.minDistance = .5;",
				"controls.orbit.maxDistance = 5;",
				"controls.orbit.minAzimuthAngle = - Math.PI / 2;",
				"controls.orbit.maxAzimuthAngle = Math.PI / 2;",
				"controls.orbit.enablePan = false;",
				"controls.orbit.enableZoom = false;",
				"controls.orbit.enableDamping = true;",
				"controls.orbit.dampingFactor = 0.3;",
				"",
				"//",
				"",
				"var buttonContainer = document.createElement( 'div' );",
				"buttonContainer.classList.add('unl-button-container');",
				"container.appendChild( buttonContainer );",
				"",
				"var vrIcon = '<img src=\"' + root + '/images/cardboard.svg\" alt=\"VR Headset\" />';",
				"",
				"var vrButton = document.createElement( 'a' );",
				"vrButton.classList.add('unl-button');",
				"vrButton.classList.add('webvr-not-available');",
				"if ( !has.iOS ) {",
				"\tbuttonContainer.appendChild( vrButton );",
				"}",
				"",
				"var vrButtonBox = document.createElement('div');",
				"vrButtonBox.innerHTML = vrIcon + 'Start in VR';",
				"vrButtonBox.classList.add('unl-button-box');",
				"vrButton.appendChild( vrButtonBox );",
				"",
				"function errorMessage() {",
				"\tvar message = document.createElement('div');",
				"\tmessage.innerHTML = 'Requires Headset';",
				"\tmessage.classList.add('unl-message');",
				"\tvrButton.appendChild( message );",
				"",
				"\tvrButton.addEventListener('mouseup', function(e) {",
				"\t\te.preventDefault();",
				"\t\twindow.open('http://webvr.info','_blank');",
				"\t}, false);",
				"}",
				"",
				"if ( navigator.getVRDisplays ) { // webvr is available",
				"",
				"\twindow.addEventListener( 'vrdisplaypresentchange', function() {",
				"\t\tvrButtonBox.innerHTML = vrIcon + ( effect.isPresenting ? 'Exit VR' : 'Start in VR' );",
				"\t\tplayButtonBox.innerHTML = ( effect.isPresenting || has.iOS ) ? 'Start' : startIcon + 'Start in 2D';",
				"",
				"\t\tif ( !effect.isPresenting ) {",
				"\t\t\t// reset camera",
				"\t\t\tcamera.position.set( 0, 1, 0 );",
				"\t\t\tcontrols.orbit.target.set( 0, 0.7, -2 );",
				"\t\t\tcontrols.orbit.enabled = true;",
				"\t\t\t// hide controllers",
				"\t\t\tcontrollers.daydream.visible =",
				"\t\t\tcontrollers.left.visible =",
				"\t\t\tcontrollers.right.visible = false;",
				"\t\t} else {",
				"\t\t\tcontrols.orbit.enabled = false;",
				"\t\t}",
				"\t}, false );",
				"",
				"\twindow.addEventListener( 'vrdisplayactivate', function() {",
				"\t\tcontrols.vr.resetPose();",
				"\t}, false );",
				"",
				"\twindow.addEventListener('keydown', function(e) {",
				"\t\tif (e.which == 90) { // z",
				"\t\t\tcontrols.vr.resetPose();",
				"\t\t}",
				"\t}, false);",
				"",
				"\tnavigator.getVRDisplays().then(function(displays) {",
				"\t\tif (displays.length > 0) {",
				"",
				"\t\t\tvrButton.classList.remove('webvr-not-available');",
				"",
				"\t\t\tvrButton.addEventListener('click', function(e) {",
				"\t\t\t\te.preventDefault();",
				"\t\t\t\taudio.play();\t// play apple.mp3",
				"\t\t\t\teffect.isPresenting ? effect.exitPresent() : effect.requestPresent();",
				"\t\t\t}, false);",
				"",
				"\t\t} else {",
				"\t\t\terrorMessage();",
				"\t\t}",
				"\t});",
				"",
				"} else {",
				"",
				"\terrorMessage();",
				"",
				"}",
				"",
				"//",
				"",
				"function playVideo() {",
				"\t\t",
				"\tif ( controllers.daydream.userData.previousParent ) {",
				"\t\tcontrollers.daydream.userData.previousParent.add( controllers.daydream );",
				"\t}",
				"\tif ( controllers.right.userData.previousParent ) {",
				"\t\tcontrollers.right.userData.previousParent.add( controllers.right );",
				"\t}",
				"\tif ( controllers.left.userData.previousParent ) {",
				"\t\tcontrollers.left.userData.previousParent.add( controllers.left );",
				"\t}",
				"",
				"\tif ( controllers.left.userData.previousMatrix ) {",
				"\t\tcontrollers.left.standingMatrix = controllers.left.userData.previousMatrix;",
				"\t}",
				"\tif ( controllers.right.userData.previousMatrix ) {",
				"\t\tcontrollers.right.standingMatrix = controllers.right.userData.previousMatrix;",
				"\t}",
				"",
				"\tvar gyro = controllers.right.userData.mesh;",
				"\tgyro.remove( gyro.userData.instructions );",
				"",
				"\twindow.removeEventListener( 'resize', resize, false );",
				"\tcontrols.orbit.enabled = false;",
				"\t",
				"\tplayer.currentTime = 0;",
				"\t",
				"}",
				"",
				"var clickTime = 0;",
				"var isQuickClick = function () {",
				"\treturn ( Date.now() - clickTime ) < 200;",
				"};",
				"",
				"var triggerdown = function(e) {",
				"\t// var controller = e.target;",
				"\tclickTime = Date.now();",
				"}",
				"",
				"var triggerup = function(e) {",
				"\t// var controller = e.target;",
				"\tplay();",
				"}",
				"",
				"var play = function(e) {",
				"\tif ( e && e.preventDefault ) { // vr controllers don't have this",
				"\t\te.preventDefault();",
				"\t}",
				"",
				"\tdocument.body.classList.remove('unl-intro');",
				"",
				"\tplayButton.removeEventListener('mouseup', play, false);",
				"\tcontrollers.left.removeEventListener('triggerdown', triggerdown);",
				"\tcontrollers.right.removeEventListener('triggerdown', triggerdown);",
				"\tcontrollers.daydream.removeEventListener('touchpaddown', triggerdown);",
				"\tcontrollers.left.removeEventListener('triggerup', triggerup);",
				"\tcontrollers.right.removeEventListener('triggerup', triggerup);",
				"\tcontrollers.daydream.removeEventListener('touchpadup', triggerup);",
				"\t",
				"\taudio.play(); // play apple.mp3",
				"\t",
				"\tfadeOut( playVideo );",
				"}",
				"",
				"var playButton = document.createElement( 'a' );",
				"playButton.classList.add('unl-button');",
				"buttonContainer.appendChild( playButton );",
				"",
				"var playButtonBox = document.createElement('div');",
				"var startIcon = '<img src=\"' + root + '/images/' + ( has.mobile ? 'phone' : 'desktop' ) + '.svg\" />';",
				"playButtonBox.innerHTML = startIcon + ( has.iOS ? 'Start' : 'Start in 2D' );",
				"playButtonBox.classList.add('unl-button-box');",
				"playButton.appendChild( playButtonBox );",
				"",
				"// begin instructions",
				"",
				"var modal = document.createElement( 'div' );",
				"modal.classList.add('unl-modal');",
				"// modal.classList.add('unl-modal-open');",
				"container.appendChild( modal );",
				"",
				"var table = document.createElement( 'div' );",
				"table.classList.add('unl-table');",
				"modal.appendChild( table );",
				"",
				"var cell = document.createElement( 'div' );",
				"cell.classList.add('unl-cell');",
				"table.appendChild( cell );",
				"",
				"var cellContainer = document.createElement( 'div' );",
				"cellContainer.classList.add('unl-cell-container');",
				"cell.appendChild( cellContainer );",
				"",
				"var modalTitle = document.createElement( 'h2' );",
				"modalTitle.classList.add('unl-modal-title');",
				"modalTitle.innerText = 'Controls';",
				"",
				"cellContainer.appendChild( modalTitle );",
				"",
				"if ( has.mobile ) {",
				"",
				"\tvar mobileInstructions = document.createElement( 'img' );",
				"\tmobileInstructions.classList.add('unl-modal-img');",
				"\tmobileInstructions.src = root + '/images/instructions-mobile.svg';",
				"\t",
				"\tvar daydreamInstructions = document.createElement( 'img' );",
				"\tdaydreamInstructions.classList.add('unl-modal-img');",
				"\tdaydreamInstructions.src = root + '/images/instructions-daydream.svg';",
				"\tdaydreamInstructions.style.display = 'none';",
				"",
				"\tvar tabContainer = document.createElement( 'div' );",
				"\ttabContainer.classList.add('unl-tab-container');",
				"\tcellContainer.appendChild( tabContainer );",
				"\t",
				"\tvar mobileTabContainer = document.createElement( 'div' );",
				"\tmobileTabContainer.classList.add('unl-tab-column');",
				"\ttabContainer.appendChild( mobileTabContainer );",
				"\tvar mobileTab = document.createElement( 'a' );",
				"\tmobileTab.classList.add('unl-tab');",
				"\tmobileTab.classList.add('unl-tab-active');",
				"\tmobileTab.innerHTML = 'Mobile (2D)';",
				"\tmobileTabContainer.appendChild( mobileTab );",
				"",
				"\tvar daydreamTabContainer = document.createElement( 'div' );",
				"\tdaydreamTabContainer.classList.add('unl-tab-column');",
				"\ttabContainer.appendChild( daydreamTabContainer );",
				"\tvar daydreamTab = document.createElement( 'a' );",
				"\tdaydreamTab.classList.add('unl-tab');",
				"\tdaydreamTab.innerHTML = 'Daydream (VR)';",
				"\tdaydreamTabContainer.appendChild( daydreamTab );",
				"",
				"\tcellContainer.appendChild( daydreamInstructions );",
				"\tcellContainer.appendChild( mobileInstructions );",
				"",
				"\tmobileTab.addEventListener('mouseup', function(e) {",
				"\t\te.preventDefault();",
				"\t\tmobileInstructions.style.display = 'block';",
				"\t\tdaydreamInstructions.style.display = 'none';",
				"",
				"\t\tmobileTab.classList.add('unl-tab-active');",
				"\t\tdaydreamTab.classList.remove('unl-tab-active');",
				"\t}, false);",
				"",
				"\tdaydreamTab.addEventListener('mouseup', function(e) {",
				"\t\te.preventDefault();",
				"\t\tmobileInstructions.style.display = 'none';",
				"\t\tdaydreamInstructions.style.display = 'block';",
				"",
				"\t\tmobileTab.classList.remove('unl-tab-active');",
				"\t\tdaydreamTab.classList.add('unl-tab-active');",
				"\t}, false);",
				"",
				"} else {",
				"",
				"\tvar desktopInstructions = document.createElement( 'img' );",
				"\tdesktopInstructions.classList.add('unl-modal-img');",
				"\tdesktopInstructions.src = root + '/images/instructions-desktop.svg';",
				"\tcellContainer.appendChild( desktopInstructions );",
				"",
				"}",
				"",
				"var closeModalButton = document.createElement( 'a' );",
				"closeModalButton.classList.add('unl-button');",
				"var closeModalButtonBox = document.createElement('div');",
				"closeModalButtonBox.innerHTML = 'Got it!';",
				"closeModalButtonBox.classList.add('unl-button-box');",
				"closeModalButton.appendChild( closeModalButtonBox );",
				"if ( !has.mobile ) {",
				"\tcellContainer.appendChild( closeModalButton );",
				"}",
				"",
				"// because closeModalButton gets cut off on mobile landscape",
				"var closeModalX = document.createElement( 'a' );",
				"closeModalX.classList.add('unl-modal-x');",
				"closeModalX.innerHTML = '&times';",
				"modal.appendChild( closeModalX );",
				"",
				"var closeModal = function(e){",
				"\te.preventDefault();",
				"\tmodal.classList.remove('unl-modal-open');",
				"};",
				"",
				"closeModalButtonBox.addEventListener('mouseup', closeModal, false);",
				"closeModalX.addEventListener('mouseup', closeModal, false);",
				"",
				"//",
				"",
				"if (!has.iOS) {",
				"\tvar lineBreak = document.createElement( 'div' );",
				"\tbuttonContainer.appendChild( lineBreak );",
				"}",
				"",
				"var instructionsButton = document.createElement('a');",
				"instructionsButton.classList.add('unl-button');",
				"instructionsButton.classList.add('unl-button-controls');",
				"buttonContainer.appendChild( instructionsButton );",
				"",
				"instructionsButton.addEventListener('mouseup', function(e){",
				"\te.preventDefault();",
				"\tmodal.classList.add('unl-modal-open');",
				"}, false);",
				"",
				"var instructionsButtonBox = document.createElement( 'div' );",
				"instructionsButtonBox.classList.add('unl-button-box');",
				"instructionsButtonBox.innerHTML = '<img src=\"' + root + '/images/instructions-icon.svg\" />Controls';",
				"instructionsButton.appendChild( instructionsButtonBox );",
				"",
				"// end instructions",
				"",
				"var floorGeo = new THREE.PlaneBufferGeometry( 50, 50 );",
				"var floorMat = THREE.neonShader.floorShader;",
				"floorMat.uniforms.color.value.setHex( 0x08FA82 );",
				"var floor = new THREE.Mesh( floorGeo, floorMat );",
				"floor.rotation.x = - Math.PI / 2;",
				"group.add( floor );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( camera.far - 1 ),",
				"\tTHREE.neonShader.backSided",
				");",
				"group.add( backdrop );",
				"",
				"// forest model",
				"",
				"var forest = FRAME.getResource( 'models' ).introForest;",
				"",
				"forest.ready(function(){",
				"\t",
				"\tvar forestMat = THREE.neonShader.vertexColoredDoubleSided.clone();",
				"\tfor ( var j in THREE.neonShader.globals ) {",
				"\t\tforestMat.uniforms[j] = THREE.neonShader.globals[j];",
				"\t}",
				"",
				"\tvar mesh = new THREE.Mesh( forest.geometries[0], forestMat );",
				"\t// mesh.position.y = 0.07;",
				"\tgroup.add( mesh );",
				"",
				"});",
				"\t",
				"// logo models",
				"",
				"var logoMat = new THREE.MeshBasicMaterial({ color: 0xffffff });",
				"var glowMat = new THREE.MeshBasicMaterial({ color: 'rgb( 255, 50, 50 )' });",
				"",
				"var logoGroup = new THREE.Group();",
				"logoGroup.position.set( 0, 2, -1 );",
				"logoGroup.scale.setScalar( 0.75 );",
				"group.add( logoGroup );",
				"",
				"var logo = FRAME.getResource( 'models' ).intro;",
				"",
				"logo.ready(function(){",
				"\tfor (var i = 0; i < logo.geometries.length; i++) {",
				"\t\tvar geometry = logo.geometries[i];",
				"\t\tvar mesh = new THREE.Mesh( geometry, logoMat );",
				"\t\t",
				"\t\tswitch ( geometry.name ) {",
				"\t\t\tcase 'mdl_env_1-forst_UNL_title.json':",
				"\t\t\t\t",
				"\t\t\t\tmesh.rotation.x = - Math.PI / 2;",
				"\t\t\t\tmesh.scale.setScalar( 0.1 );",
				"\t\t\t\tlogoGroup.add( mesh );",
				"",
				"\t\t\t\tvar glow = mesh.clone();",
				"\t\t\t\tglow.position.z -= 0.018;",
				"\t\t\t\tglow.material = glowMat;",
				"\t\t\t\tlogoGroup.add( glow );",
				"\t\t\t\t",
				"\t\t\t\tbreak;",
				"\t\t\t\t",
				"\t\t\tcase 'mdl_env_1-forest_TCB_title.json':",
				"\t\t\t\t\t",
				"\t\t\t\tmesh.position.x = - 1.13 + 0.03;",
				"\t\t\t\tmesh.position.y = - 0.3;",
				"\t\t\t\tmesh.rotation.x = - Math.PI / 2;",
				"\t\t\t\tmesh.scale.setScalar( 0.1 );",
				"\t\t\t\tmesh.scale.multiplyScalar( 0.4 );",
				"\t\t\t\tlogoGroup.add( mesh );",
				"",
				"\t\t\t\tvar glow = mesh.clone();",
				"\t\t\t\tglow.position.z -= 0.018;",
				"\t\t\t\tglow.material = glowMat;",
				"\t\t\t\tlogoGroup.add( glow );",
				"\t\t\t\t",
				"\t\t\t\tbreak;",
				"\t\t\t\t",
				"\t\t\tcase 'mdl_env_1-forst_STVincnt_title.json':",
				"\t\t\t\t",
				"\t\t\t\tmesh.position.x = 1.13 + 0.03;",
				"\t\t\t\tmesh.position.y = -0.3;",
				"\t\t\t\tmesh.rotation.x = - Math.PI / 2;",
				"\t\t\t\tmesh.scale.setScalar( 0.1 );",
				"\t\t\t\tmesh.scale.multiplyScalar( 0.4 )",
				"\t\t\t\tlogoGroup.add( mesh );",
				"",
				"\t\t\t\tvar glow = mesh.clone();",
				"\t\t\t\tglow.position.z -= 0.018;",
				"\t\t\t\tglow.material = glowMat;",
				"\t\t\t\tlogoGroup.add( glow );",
				"\t\t\t\t",
				"\t\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"});",
				"",
				"//",
				"",
				"var title = document.createElement('img');",
				"title.src = root + '/images/under-neon-lights.svg';",
				"title.alt = 'Under Neon Lights, - The Chemical Brothers & St Vincent';",
				"title.classList.add('unl-title');",
				"container.appendChild( title );",
				"title.style.display = 'none';",
				"",
				"// if portrait, zoom out",
				"if ( has.mobile ) {",
				"\tdocument.body.classList.add('has-mobile');",
				"\t",
				"\tvar onOrientationChange = function() {",
				"\t\tvar isPortrait;",
				"",
				"\t\tif ( window.screen.orientation ) {",
				"\t\t\tvar orientation = window.screen.orientation.type;",
				"\t\t\tvar rePortrait = /portrait/i;",
				"\t\t\tisPortrait = rePortrait.test(orientation);",
				"\t\t} else { // for safari?",
				"\t\t\tisPortrait = window.orientation == 0;",
				"\t\t}",
				"",
				"\t\tif (isPortrait) {",
				"\t\t\ttitle.style.display = 'block';",
				"\t\t\tlogoGroup.visible = false;",
				"\t\t} else {",
				"\t\t\ttitle.style.display = 'none';",
				"\t\t\tlogoGroup.visible = true;",
				"\t\t}",
				"",
				"\t};",
				"",
				"\t//window.screen.orientation.onchange = onOrientationChange;",
				"\twindow.addEventListener( 'orientationchange', onOrientationChange, false );",
				"\tonOrientationChange();",
				"}",
				"",
				"//",
				"",
				"function resize() {",
				"\tvar width = container.clientWidth || window.innerWidth;",
				"\tvar height = container.clientHeight || window.innerHeight;",
				"\trenderer.setSize( width, height );",
				"\teffect.setSize( width, height );",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"\tif ( !effect.isPresenting ) {",
				"\t\teffect.render( scene, camera );",
				"\t}",
				"}",
				"",
				"function fadeIn(callback) {",
				"",
				"\tif ( !assetsLoaded || blackPlane.userData.fadedIn ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tblackPlane.userData.fadedIn = true;",
				"",
				"\tdocument.body.classList.add('unl-intro');",
				"",
				"\tcamera.add( blackPlane );",
				"\tcamera.position.set( 0, 1, 0 );",
				"\tcontrols.orbit.target.set( 0, 0.7, -camera.parent.position.z );",
				"\tcontrols.orbit.enabled = !effect.isPresenting;",
				"",
				"\tcontrollers.daydream.userData.previousParent = controllers.daydream.parent;",
				"\tcontrollers.left.userData.previousParent = controllers.left.parent;",
				"\tcontrollers.right.userData.previousParent = controllers.right.parent;",
				"\tcamera.parent.add( controllers.daydream );",
				"\tcamera.parent.add( controllers.left );",
				"\tcamera.parent.add( controllers.right );",
				"",
				"\tcontrollers.left.userData.previousMatrix = controllers.left.standingMatrix;",
				"\tcontrollers.right.userData.previousMatrix = controllers.right.standingMatrix;",
				"\tcontrollers.left.standingMatrix = controls.vr.getStandingMatrix();",
				"\tcontrollers.right.standingMatrix = controls.vr.getStandingMatrix();",
				"",
				"\tvar gyro = controllers.right.userData.mesh;",
				"\tif ( gyro && gyro.add ) {",
				"\t\tgyro.add( gyro.userData.instructions );",
				"\t}",
				"",
				"\tfor ( var age in annie.userData.models ) {",
				"\t\tvar obj = annie.userData.models[ age ];",
				"\t\tif ( obj.userData && obj.userData.setClipRange ) {",
				"\t\t\tobj.userData.setClipRange( obj, 0, 1 );",
				"\t\t}",
				"\t\tobj.visible = false;",
				"\t}",
				"",
				"\tvar child = annie.userData.models.child;",
				"\tchild.visible = true;",
				"",
				"\tfor ( var name in child.userData.animations ) {",
				"\t\tvar animation = child.userData.animations[ name ];",
				"\t\tanimation.action.stop();",
				"\t}",
				"",
				"\tchild.userData.animations.idle.action.play();",
				"\tchild.userData.currentAnimation = child.userData.animations.idle;",
				"",
				"\tannie.userData.model = child;",
				"\tannie.userData.eyesOpen();",
				"",
				"\twindow.addEventListener( 'resize', resize, false );",
				"\tresize();",
				"",
				"\tblackPlane.userData.fadeOut.stop().onComplete(identity);",
				"\tblackPlane.userData.fadeIn.onComplete(function() {",
				"",
				"\t\tplayButton.addEventListener('mouseup', play, false);",
				"\t\tcontrollers.left.addEventListener('triggerdown', triggerdown);",
				"\t\tcontrollers.right.addEventListener('triggerdown', triggerdown);",
				"\t\tcontrollers.daydream.addEventListener('touchpaddown', triggerdown);",
				"\t\tcontrollers.left.addEventListener('triggerup', triggerup);",
				"\t\tcontrollers.right.addEventListener('triggerup', triggerup);",
				"\t\tcontrollers.daydream.addEventListener('touchpadup', triggerup);",
				"",
				"\t\tif (isFunction(callback)) {",
				"\t\t\tcallback();",
				"\t\t}",
				"",
				"\t});",
				"",
				"\tblackPlane.userData.fadeIn.start();",
				"",
				"}",
				"",
				"function fadeOut(callback) {",
				"",
				"\tif ( blackPlane.userData.fadedOut ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tblackPlane.userData.fadeIn.stop().onComplete(identity);",
				"\tblackPlane.userData.fadeOut.onComplete(function() {",
				"\t\tblackPlane.userData.fadedOut = true;",
				"\t\tTWEEN.remove(blackPlane.userData.fadeOut);",
				"\t\tif (isFunction(callback)) {",
				"\t\t\tcallback();",
				"\t\t}",
				"\t}).start();",
				"",
				"}",
				"",
				"stages.intro = {",
				"\tcurtain: blackPlane,",
				"\treset: function () {",
				"\t\tblackPlane.material.opacity = 1;",
				"\t\tblackPlane.userData.fadedOut = false;",
				"\t\tblackPlane.userData.fadedIn = false;",
				"\t}",
				"};",
				"",
				"var complete = function () {",
				"",
				"\tcomplete.index++;",
				"\tif ( complete.index === complete.amount ) {",
				"\t\tassetsLoaded = true;",
				"\t}",
				"",
				"};",
				"complete.index = 0;",
				"complete.amount = 2;",
				"",
				"for ( var k in models ) {",
				"\tcomplete.amount++;",
				"\tmodels[ k ].ready( complete );",
				"}",
				"",
				"annie.userData.models.complete.ready( complete );",
				"annie.userData.animations.complete.ready( complete );",
				"",
				"for ( var k in textures ) {",
				"\tcomplete.amount++;",
				"\ttextures[ k ].ready( complete );",
				"}",
				"",
				"function start(){",
				"",
				"\tplayer.setLoop( [ 300, 302 ] );",
				"\tscene.add( group );",
				"",
				"\tfadeIn();",
				"",
				"}",
				"",
				"function end(){",
				"\t",
				"\tplayer.setLoop( null );",
				"\tscene.remove( group );",
				"\t",
				"}",
				"",
				"function update( progress, delta ){",
				"",
				"\tvar child = annie.userData.models.child",
				"\tif ( child && child.mixer ) {",
				"\t\tchild.mixer.update( clock.getDelta() );",
				"\t}",
				"",
				"\tcontrols.update();",
				"",
				"\tTWEEN.update();",
				"",
				"\tif ( effect.isPresenting ) {",
				"\t\tif ( has.mobile ) {",
				"",
				"\t\t\tvar daydream = controllers.daydream;",
				"\t\t\tdaydream.update();",
				"",
				"\t\t\tvar pad = daydream.getGamepad();",
				"",
				"\t\t\tvar mesh = controllers.daydream.userData.mesh;",
				"\t\t\tif ( controllers.modelsLoaded && ( !mesh.parent || mesh.parent !== controllers.daydream ) ) {",
				"\t\t\t\tcontrollers.daydream.add( mesh );",
				"\t\t\t}",
				"",
				"\t\t\tif ( pad && pad.pose ) {",
				"\t\t\t\tvar pose = pad.pose; // orientation only",
				"\t\t\t\tvar orientation = daydream.quaternion.fromArray( pose.orientation );",
				"\t\t\t\tvar arm = daydream.arm;",
				"",
				"\t\t\t\t// Feed camera and controller into the arm model.",
				"\t\t\t\tarm.setHeadOrientation( camera.quaternion );",
				"\t\t\t\tarm.setHeadPosition( camera.position );",
				"\t\t\t\tarm.setControllerOrientation( orientation );",
				"\t\t\t\tarm.update();",
				"",
				"\t\t\t\tpose = arm.getPose(); // includes position",
				"\t\t\t\tdaydream.position.copy( pose.position );",
				"\t\t\t}",
				"",
				"\t\t} else {",
				"",
				"\t\t\tcontrollers.left.update();",
				"\t\t\tcontrollers.right.update();",
				"",
				"\t\t\tvar mesh = controllers.right.userData.mesh;",
				"\t\t\tif ( controllers.modelsLoaded && ( !mesh.parent || mesh.parent !== controllers.right ) ) {",
				"\t\t\t\tcontrollers.right.add( mesh );",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t\tcontrols.vr.update();",
				"",
				"\t} else {",
				"",
				"\t\tcontrols.orbit.update();",
				"",
				"\t}",
				"",
				"\t//",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\tneon.destination = 1;",
				"\t\tneon.drag = 0.02;",
				"",
				"\t} else {",
				"",
				"\t\tneon.destination = 0;",
				"\t\tneon.drag = 0.1",
				"",
				"\t}",
				"",
				"\tneon.update( delta );",
				"",
				"\tneon.apply( scene );",
				"",
				"\teffect.render( scene, camera );",
				"\t",
				"}"
			]
		],
		[
			"Fog 3-2",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = fog.far;",
				"var fog_target = 110;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}",
				""
			]
		],
		[
			"Fog 3-3",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = fog.far;",
				"var fog_target = 220;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}",
				""
			]
		],
		[
			"Update Experience",
			[
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"var materials = FRAME.getResource( 'materials' );",
				"var stages = FRAME.getResource( 'stages' );",
				"var neon = FRAME.getResource( 'neon' );",
				"var clock = FRAME.getResource( 'clock' );",
				"var compass = FRAME.getResource( 'compass' );",
				"var controls = FRAME.getResource( 'controls' );",
				"var trackStamps = FRAME.getResource( 'trackStamps' );",
				"",
				"scene.userData.clear();",
				"scene.add( dolly );",
				"scene.add( annie );",
				"",
				"var playing = false;",
				"var p = 0;",
				"var _vec = new THREE.Vector3();",
				"",
				"var controllers = FRAME.getResource( 'controllers' )",
				"\t.setup( dolly, effect, controls.virtualReality );",
				"",
				"function start () {",
				"",
				"\tcontrollers.theta = compass.theta;",
				"\tcontrollers.direction = compass.direction;",
				"\twindow.addEventListener( 'mousedown', mousedown, false );",
				"",
				"}",
				"",
				"function end () {",
				"\twindow.removeEventListener( 'mousedown', mousedown, false );",
				"}",
				"",
				"// var slowDownTime = Date.now();",
				"",
				"function update ( progress, dt ) {",
				"",
				"\t// var now = Date.now();",
				"\tplaying = progress !== p && dt > 0;",
				"\tp = progress;",
				"",
				"\tTWEEN.update();",
				"",
				"\tcontrollers.update( camera );",
				"",
				"\tannie.userData.updateAnimation( dt );",
				"",
				"\tTHREE.neonShader.globals.time.value += ( dt || 0 ) * 4;",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\tneon.destination = 1;",
				"\t\tneon.drag = 0.02;",
				"",
				"\t\t/*",
				"\t\tif ( now - 10000 > slowDownTime ) {",
				"\t\t\tif ( player.playbackRate > 0.5001 ) {",
				"\t\t\t\tplayer.playbackRate += ( 0.5 - player.playbackRate ) * 0.125;",
				"\t\t\t} else if ( player.playbackRate !== 0.5 ) {",
				"\t\t\t\tplayer.playbackRate = 0.5;",
				"\t\t\t}",
				"\t\t}",
				"\t\t*/",
				"",
				"\t} else {",
				"",
				"\t\tneon.destination = 0;",
				"\t\tneon.drag = 0.1;",
				"",
				"\t\t/*",
				"\t\tslowDownTime = now;",
				"\t\tif ( player.playbackRate < 0.999 ) {",
				"\t\t\tplayer.playbackRate += ( 1 - player.playbackRate ) * 0.125;",
				"\t\t} else if ( player.playbackRate !== 1 ) {",
				"\t\t\tplayer.playbackRate = 1;",
				"\t\t}",
				"\t\t*/",
				"",
				"\t}",
				"",
				"\tneon.update( dt );",
				"\tupdateDolly( dt );",
				"",
				"//\ttrackStamps.update( player.currentTime );",
				"",
				"\tneon.apply( scene );",
				"",
				"\t_vec.set( 0, 0, THREE.neonShader.globals.motion.value * THREE.neonShader.globals.neonFreq1.value )",
				"\t_vec.applyAxisAngle( new THREE.Vector3(0,1,0), -THREE.neonShader.globals.yRot.value );",
				"\tTHREE.neonShader.globals.cursor.value.add( _vec );",
				"",
				"\tvar fov = camera.userData.fov;",
				"\tif ( Math.abs( fov.destination - fov.current ) > fov.limit ) {",
				"\t\tfov.current += ( fov.destination - fov.current ) * fov.drag;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t} else if ( fov.current !== fov.destination ) {",
				"\t\tfov.current = fov.destination;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t}",
				"",
				"}",
				"",
				"function updateDolly ( dt ) {",
				"",
				"\tif ( stages[ 3 ].playing ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tcompass.theta.destination -= controllers.axes.delta.x;",
				"\tcompass.update( clock.getDelta(), dt );",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( compass.theta.value - compass.direction.value );",
				"\tdolly.position.z = - distance * Math.cos( compass.theta.value - compass.direction.value );",
				"\tdolly.lookAt( dolly.userData.target );\t",
				"",
				"}",
				"",
				"var mouse = new THREE.Vector2();",
				"",
				"function mousedown ( e ) {",
				"",
				"\twindow.addEventListener( 'mousemove', mousemove, false );",
				"\twindow.addEventListener( 'mouseup', mouseup, false );",
				"",
				"\tmouse.set( e.clientX, e.clientY );",
				"",
				"}",
				"",
				"function mousemove ( e ) {",
				"",
				"\tvar dx = e.clientX - mouse.x;",
				"\tvar dy = e.clientY - mouse.y;",
				"",
				"\tmouse.set( e.clientX, e.clientY );",
				"",
				"\tcamera.rotation.y += dx / renderer.height;",
				"\tcamera.rotation.x += dy / renderer.width;",
				"\t",
				"\tcamera.rotation.x = Math.min( Math.max( camera.rotation.x, - HALF_PI ), HALF_PI );",
				"",
				"}",
				"",
				"function mouseup ( e ) {",
				"",
				"\twindow.removeEventListener( 'mousemove', mousemove, false );",
				"\twindow.removeEventListener( 'mouseup', mouseup, false );",
				"",
				"}"
			]
		],
		[
			"Fog Intro",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = 0;",
				"var fog_target = 10;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){",
				"\t",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}",
				""
			]
		],
		[
			"Mirror Effect",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"var child;",
				"var adult;",
				"var distance = 6;",
				"",
				"function start () {",
				"",
				"\tannie.userData.age( 'teenager' );",
				"",
				"\tchild = annie.userData.models.child;",
				"\tadult = annie.userData.models.adult;",
				"\t",
				"\tannie.userData.setClipRange( child, 0, 1 );",
				"\tannie.userData.setClipRange( adult, 0, 1 );",
				"",
				"\tchild.visible = true;",
				"\tadult.visible = true;",
				"",
				"\tchild.position.set( distance, 0, 0 );",
				"\tadult.position.set( - distance, 0, 0 );",
				"",
				"\tswitchToAction( child, 'run' );",
				"\tswitchToAction( adult, 'run' );",
				"",
				"\tif ( annie.userData.prevModel ) {",
				"\t\tdelete annie.userData.prevModel;",
				"\t}",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tchild = annie.userData.models.child;",
				"\tadult = annie.userData.models.adult;",
				"",
				"\tchild.visible = false;",
				"\tadult.visible = false;",
				"",
				"\tchild.position.set( 0, 0, 0 );",
				"\tadult.position.set( 0, 0, 0 );",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tchild = annie.userData.models.child;",
				"\tadult = annie.userData.models.adult;",
				"",
				"\tif ( child && child.mixer ) {",
				"\t\tchild.mixer.update( dt );",
				"\t}",
				"\tif ( adult && adult.mixer ) {",
				"\t\tadult.mixer.update( dt );",
				"\t}",
				"",
				"}",
				"",
				"function switchToAction ( model, actionName ) {",
				"",
				"\tvar animations = model.userData.animations;",
				"\tvar action;",
				"",
				"\tfor ( var name in animations ) {",
				"\t\tvar animation = animations[ name ];",
				"\t\tif ( name === actionName ) {",
				"\t\t\taction = animation.action;",
				"\t\t}",
				"\t\tanimation.action.stop();",
				"\t}",
				"",
				"\tif ( action ) {",
				"\t\taction.play();",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Stage 2 inTransition",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var state = false;",
				"",
				"function start () {",
				"",
				"\tif ( stages.current ) {",
				"//\t\tstages.current.inTransition = true;",
				"\t\tstages.current.hideNextRoom = true;",
				"\t\tstages.current.limit = - 2.75;",
				"\t}",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Neon Stage 1",
			[
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"function start () {",
				"",
				"\tvar target = {",
				"\t\tdefault: {",
				"\t\t\tneon: 0,",
				"\t\t\tsepia: 3.5,",
				"\t\t\tsaturation: 0.21,",
				"\t\t\tneonFade: 0.0,",
				"\t\t\tneonGlow: 0.0,",
				"\t\t\tneonFreq1: 1.1,",
				"\t\t\tneonFreq2: 2,",
				"\t\t\tneonNearClip: 0,",
				"\t\t\tsepiaCol1: 0x1488b9,",
				"\t\t\tsepiaCol2: 0x10bfca,",
				"\t\t\tneonCol: 0x000000,",
				"\t\t\tfogCol: 0x333333",
				"\t\t},",
				"\t\tactive: {",
				"\t\t\tneon: 1,",
				"\t\t\tsepia: 2.8,",
				"\t\t\tsaturation: 0.48,",
				"\t\t\tneonFade: 0.73,",
				"\t\t\tneonGlow: 0.85,",
				"\t\t\tneonFreq1: 1.1,",
				"\t\t\tneonFreq2: 2,",
				"\t\t\tneonNearClip: 0,",
				"\t\t\tsepiaCol1: 0x24fc4,",
				"\t\t\tsepiaCol2: 0xefff,",
				"\t\t\tneonCol: 0x000000,",
				"\t\t\tfogCol: 0x000000",
				"\t\t}",
				"\t};",
				"",
				"\tneon.origin.default = target.default;",
				"\tneon.origin.active = target.active;",
				"\tneon.target.default = target.default;",
				"\tneon.target.active = target.active;",
				"}",
				"",
				"function update( progress ){",
				"\tneon.lerp( progress );",
				"}",
				"",
				"function end () {}"
			]
		],
		[
			"Neon Stage 2",
			[
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var target = {",
				"\tdefault: {",
				"\t\tneon: 0,",
				"\t\tsepia: 3.8,",
				"\t\tsaturation: 0.31,",
				"\t\tneonFade: 0.62,",
				"\t\tneonGlow: 0.85,",
				"\t\tneonFreq1: 1.1,",
				"\t\tneonFreq2: 2,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0x40b9ed,",
				"\t\tsepiaCol2: 0xb2ff,",
				"\t\tneonCol: 0x7a09eb,",
				"\t\tfogCol: 0x461cbc",
				"\t},",
				"\tactive: {",
				"\t\tneon: 1,",
				"\t\tsepia: 3.7,",
				"\t\tsaturation: 1.24,",
				"\t\tneonFade: 0.7,",
				"\t\tneonGlow: 0.65,",
				"\t\tneonFreq1: 1.1,",
				"\t\tneonFreq2: 1.9,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0xadff00,",
				"\t\tsepiaCol2: 0x79a57d,",
				"\t\tneonCol: 0xff84,",
				"\t\tfogCol: 0x825b",
				"\t}",
				"}",
				"",
				"function start () {",
				"\tneon.setLerpOrigin();",
				"\tneon.target.default = target.default;",
				"\tneon.target.active = target.active;",
				"}",
				"",
				"function update( progress ){",
				"\tneon.lerp( progress );",
				"}",
				"",
				"function end () {}"
			]
		],
		[
			"Neon Stage 3",
			[
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var target = {",
				"\t\tdefault: {",
				"\t\tneon: 0,",
				"\t\tsepia: 5,",
				"\t\tsaturation: 0.59,",
				"\t\tneonFade: 0.42,",
				"\t\tneonGlow: 1,",
				"\t\tneonFreq1: 0.4,",
				"\t\tneonFreq2: 1.2,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0x23418e,",
				"\t\tsepiaCol2: 0x3ef326,",
				"\t\tneonCol: 0xe54575,",
				"\t\tfogCol: 0xffd1",
				"\t},",
				"\tactive: {",
				"\t\tneon: 1,",
				"\t\tsepia: 3.5,",
				"\t\tsaturation: 0.1,",
				"\t\tneonFade: 0.53,",
				"\t\tneonGlow: 1,",
				"\t\tneonFreq1: 0.4,",
				"\t\tneonFreq2: 1.2,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0xff75,",
				"\t\tsepiaCol2: 0x57ff86,",
				"\t\tneonCol: 0xffed52,",
				"\t\tfogCol: 0x5b0e7f",
				"\t}",
				"}",
				"",
				"function start () {",
				"\tneon.setLerpOrigin();",
				"\tneon.target.default = target.default;",
				"\tneon.target.active = target.active;",
				"}",
				"",
				"function update( progress ){",
				"\tneon.lerp( progress );",
				"}",
				"",
				"function end () {}"
			]
		],
		[
			"Neon Intro",
			[
				"var neon = FRAME.getResource( 'neon' );",
				"var target;",
				"",
				"function start () {",
				"",
				"\ttarget = {",
				"\t\tdefault: {",
				"\t\t\tneon: 0,",
				"\t\t\tsepia: 3.5,",
				"\t\t\tsaturation: 0.21,",
				"\t\t\tneonFade: 0.0,",
				"\t\t\tneonGlow: 0.0,",
				"\t\t\tneonFreq1: 1.1,",
				"\t\t\tneonFreq2: 2,",
				"\t\t\tneonNearClip: 0,",
				"\t\t\tsepiaCol1: 0x1488b9,",
				"\t\t\tsepiaCol2: 0x10bfca,",
				"\t\t\tneonCol: 0x000000,",
				"\t\t\tfogCol: 0x333333",
				"\t\t},",
				"\t\tactive: {",
				"\t\t\tneon: 0.6,",
				"\t\t\tsepia: 2.8,",
				"\t\t\tsaturation: 0.48,",
				"\t\t\tneonFade: 0.0,",
				"\t\t\tneonGlow: 0.28,",
				"\t\t\tneonFreq1: 3.6,",
				"\t\t\tneonFreq2: 3.3,",
				"\t\t\tneonNearClip: 0,",
				"\t\t\tsepiaCol1: 0x24fc4,",
				"\t\t\tsepiaCol2: 0xefff,",
				"\t\t\tneonCol: 0x000000,",
				"\t\t\tfogCol: 0x222222",
				"\t\t}",
				"\t};",
				"",
				"\tneon.origin.default = target.default;",
				"\tneon.origin.active = target.active;",
				"\tneon.target.default = target.default;",
				"\tneon.target.active = target.active;",
				"}",
				"",
				"function update( progress ){",
				"\tneon.lerp( progress );",
				"}",
				"",
				"function end () {}"
			]
		],
		[
			"Got No Husband, Got No Wife",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t5, 5, 7, 5, // Got // All",
				"\t4, 6, 7, 5, // No // I",
				"",
				"\t4, 6, 7, 6, // Hus- // Wants",
				"\t4, 6, 7, 6, // -band // A",
				"",
				"\t4, 5, 7, 5, // Got // View",
				"\t4, 6, 7, 7, 5, // No // To",
				"",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 4 // Wife // Night",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Credits Effect",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"var compass = FRAME.getResource( 'compass' );",
				"",
				"var texture = FRAME.getResource( 'textures' ).credits;",
				"var model = FRAME.getResource( 'models' ).toys;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"var clock = FRAME.getResource( 'clock' );",
				"",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 12 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 128 )",
				"};",
				"",
				"var vector = new THREE.Vector3();",
				"var material = materials.toy;",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"",
				"var elements = [];",
				"var bylines = [];",
				"",
				"bylines.index = 0;",
				"bylines.next = function () {",
				"\tvar index = bylines.index;",
				"\tbylines.index = ( bylines.index + 1 ) % bylines.length;",
				"\treturn bylines[ index ];",
				"};",
				"bylines.reset = function () {",
				"\tfor ( var i = 0; i < bylines.lenght; i++ ) {",
				"\t\tbylines[ i ].visible = false;",
				"\t}",
				"\tbylines.index = 0;",
				"};",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\tvar size = parameters.size.value;",
				"",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tvar seed = Math.random();",
				"\t\tvar scalar = Math.floor( seed * 4 ) + 1;",
				"\t\tmesh.scale.setScalar( scalar );",
				"",
				"\t\tvar a = Math.PI / 1000;",
				"\t\tvar b = a / 2;",
				"",
				"\t\tmesh.userData.velocity = {",
				"\t\t\trotation: new THREE.Euler(",
				"\t\t\t\t( 1 - seed ) * a - b,",
				"\t\t\t\t( 1 - seed ) * a - b,",
				"\t\t\t\t( 1 - seed ) * a - b",
				"\t\t\t)",
				"\t\t};",
				"",
				"\t\tvar rv = mesh.userData.velocity.rotation;",
				"",
				"\t\tmesh.rotation.x = Math.random() * TWO_PI;",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"\t\tmesh.rotation.z = Math.random() * TWO_PI;",
				"",
				"\t\tvar radius = size * 0.66;",
				"\t\tvector.set(",
				"\t\t\t2 * Math.random() - 1,",
				"\t\t\t2 * Math.random() - 1,",
				"\t\t\t2 * Math.random() - 1",
				"\t\t).setLength( radius );",
				"",
				"\t\tmesh.userData.origin = new THREE.Vector3().copy( vector );",
				"\t\tmesh.userData.destination = mesh.userData.origin.clone();",
				"\t\tmesh.position.copy( mesh.userData.origin );",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"",
				"} );",
				"",
				"texture.ready( function () {",
				"",
				"\tvar list = texture.textures;",
				"\tvar geometry = new THREE.PlaneBufferGeometry( 1, 1 );",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"",
				"\t\tvar map = list[ i ];",
				"\t\tvar image = map.image;",
				"\t\tvar material = new THREE.MeshBasicMaterial( {",
				"\t\t\tcolor: 'white',",
				"\t\t\ttransparent: true,",
				"\t\t\tblending: THREE.AdditiveBlending,",
				"\t\t\tmap: map,",
				"\t\t\tside: THREE.FrontSide",
				"\t\t} );",
				"",
				"\t\tvar meta = map.name.replace( /\\.png/i, '' ).split( '-' );",
				"\t\tvar index = parseInt( meta[ 0 ] ) - 1;",
				"",
				"\t\tvar quad = new THREE.Mesh( geometry, material );",
				"\t\tquad.scale.x = 7.5;",
				"\t\tquad.scale.y = 7.5;",
				"\t\tquad.rotation.y = Math.PI;",
				"\t\t",
				"\t\tquad.position.y = camera.userData.targetY;",
				"\t\tquad.position.z = dolly.userData.distance / 2;",
				"\t\tquad.visible = false;",
				"",
				"\t\tgroup.add( quad );",
				"\t\tbylines[ index ] = quad;",
				"",
				"\t}",
				"",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.credits = {",
				"\tscene: group,",
				"\tindex: stages.length,",
				"\tplaying: false,",
				"\telements: elements,",
				"\tbylines: bylines",
				"};",
				"var stage = stages.credits;",
				"",
				"function start() {",
				"",
				"\tstages.current = stage;",
				"\tstages.index = stage.index;",
				"",
				"\tbylines.reset();",
				"\tdolly.userData.reset();",
				"\tannie.visible = false;",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"",
				"\tclock.getDelta();",
				"\tstage.playing = true;",
				"",
				"\tscene.fog.far = parameters.size.value;",
				"",
				"}",
				"",
				"function end() {",
				"",
				"\tannie.visible = true;",
				"",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\tstage.playing = false;",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tvar drag = ( dt || 0 ) * 0.125 * Ease.Resolution;",
				"\tdrag = Math.max( Math.min( drag, 1 ), 0 );",
				"",
				"\tif ( controllers.right.userData.mesh ) {",
				"",
				"\t\tvar velocity = 0.2;",
				"\t\tvar controller= controllers.right.userData.mesh;",
				"",
				"\t\tvar ra = controller.children[ 0 ];",
				"\t\tvar rb = controller.children[ 1 ];",
				"",
				"\t\tvar sa = ra.children[ 0 ];",
				"\t\tvar sb = ra.children[ 0 ];",
				"",
				"\t\tra.rotation.x -= ra.rotation.x * drag;",
				"\t\tra.rotation.z -= ra.rotation.z * drag;",
				"",
				"\t\trb.rotation.x -= rb.rotation.x * drag;",
				"\t\trb.rotation.z -= rb.rotation.z * drag;",
				"",
				"\t\tsa.rotation.y -= sa.rotation.y * drag;",
				"\t\tsb.rotation.y -= sb.rotation.y * drag;",
				"",
				"\t}",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar origin = mesh.userData.origin;",
				"\t\tvar destination = mesh.userData.destination;",
				"\t\tvar rotation = mesh.userData.velocity.rotation;",
				"",
				"\t\tvector.copy( destination )",
				"\t\t\t.sub( mesh.position )",
				"\t\t\t.multiplyScalar( drag );",
				"",
				"\t\tmesh.position.add( vector );",
				"",
				"\t\tmesh.rotation.x += rotation.x;",
				"\t\tmesh.rotation.y += rotation.y;",
				"\t\tmesh.rotation.z += rotation.z;",
				"",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Audio Credits Effect",
			[
				"var root = FRAME.getResource( 'root' );",
				"var src = [ root, '/audio/credits_96k', has.Chromium ? '.ogg' : '.mp3' ].join( '' );",
				"var exports = FRAME.getResource( 'audio' );",
				"",
				"var audio = new WebAudio( exports.context );",
				"audio.loop = true;",
				"audio.src = src;",
				"",
				"exports.credits = audio;",
				"",
				"function start(){",
				"",
				"\taudio.currentTime = 0;",
				"\taudio.play();",
				"",
				"}",
				"",
				"function end(){",
				"",
				"\taudio.pause();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tif ( !player.isPlaying && !audio.paused ) {",
				"\t\taudio.pause();",
				"\t} else if ( player.isPlaying && audio.paused ) {",
				"\t\taudio.play();",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Update Credits",
			[
				"var HALF_PI = Math.PI / 2;",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"var materials = FRAME.getResource( 'materials' );",
				"var stages = FRAME.getResource( 'stages' );",
				"var neon = FRAME.getResource( 'neon' );",
				"var clock = FRAME.getResource( 'clock' );",
				"var compass = FRAME.getResource( 'compass' );",
				"var controls = FRAME.getResource( 'controls' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var playing = false;",
				"var p = 0;",
				"var _vec = new THREE.Vector3();",
				"",
				"function start () {",
				"",
				"\twindow.addEventListener( 'mousedown', mousedown, false );",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\twindow.removeEventListener( 'mousedown', mousedown, false );",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tplaying = progress !== p && dt > 0;",
				"\tp = progress;",
				"",
				"\tTWEEN.update();",
				"",
				"\tcontrollers.update( camera );",
				"",
				"\tTHREE.neonShader.globals.time.value += ( dt || 0 ) * 4;",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\tneon.destination = 1;",
				"\t\tneon.drag = 0.02;",
				"",
				"\t} else {",
				"",
				"\t\tneon.destination = 0;",
				"\t\tneon.drag = 0.1",
				"",
				"\t}",
				"\t",
				"\tneon.update( dt );",
				"\tneon.apply( scene );",
				"",
				"}",
				"",
				"function updateDolly ( dt ) {",
				"",
				"\tif ( stages[ 3 ].playing ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tcompass.theta.destination -= controllers.axes.delta.x;",
				"\tcompass.update( clock.getDelta(), dt );",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( compass.theta.value - compass.direction.value );",
				"\tdolly.position.z = - distance * Math.cos( compass.theta.value - compass.direction.value );",
				"\tdolly.lookAt( dolly.userData.target );\t",
				"",
				"}",
				"",
				"var mouse = new THREE.Vector2();",
				"",
				"function mousedown ( e ) {",
				"",
				"\twindow.addEventListener( 'mousemove', mousemove, false );",
				"\twindow.addEventListener( 'mouseup', mouseup, false );",
				"",
				"\tmouse.set( e.clientX, e.clientY );",
				"",
				"}",
				"",
				"function mousemove ( e ) {",
				"",
				"\tvar dx = e.clientX - mouse.x;",
				"\tvar dy = e.clientY - mouse.y;",
				"",
				"\tmouse.set( e.clientX, e.clientY );",
				"",
				"\tcamera.rotation.y += dx / renderer.height;",
				"\tcamera.rotation.x += dy / renderer.width;",
				"\t",
				"\tcamera.rotation.x = Math.min( Math.max( camera.rotation.x, - HALF_PI ), HALF_PI );",
				"",
				"}",
				"",
				"function mouseup ( e ) {",
				"",
				"\twindow.removeEventListener( 'mousemove', mousemove, false );",
				"\twindow.removeEventListener( 'mouseup', mouseup, false );",
				"",
				"}"
			]
		],
		[
			"Neon Credits",
			[
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var target = {",
				"\t\tdefault: {",
				"\t\tneon: 0,",
				"\t\tsepia: 5,",
				"\t\tsaturation: 0.59,",
				"\t\tneonFade: 0.42,",
				"\t\tneonGlow: 1,",
				"\t\tneonFreq1: 1.4,",
				"\t\tneonFreq2: 0.4,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0x23418e,",
				"\t\tsepiaCol2: 0x3ef326,",
				"\t\tneonCol: 0xe54575,",
				"\t\tfogCol: 0xffd1",
				"\t},",
				"\tactive: {",
				"\t\tneon: 1,",
				"\t\tsepia: 3.5,",
				"\t\tsaturation: 0.1,",
				"\t\tneonFade: 0.53,",
				"\t\tneonGlow: 1,",
				"\t\tneonFreq1: 0.4,",
				"\t\tneonFreq2: 1.2,",
				"\t\tneonNearClip: 0,",
				"\t\tsepiaCol1: 0xff75,",
				"\t\tsepiaCol2: 0x57ff86,",
				"\t\tneonCol: 0xffed52,",
				"\t\tfogCol: 0x5b0e7f",
				"\t}",
				"};",
				"",
				"function start () {",
				"\t// neon.setLerpOrigin();",
				"\tneon.target.default = target.default;",
				"\tneon.target.active = target.active;",
				"}",
				"",
				"function update( progress ){",
				"\tneon.lerp( progress );",
				"}",
				"",
				"function end () {}"
			]
		],
		[
			"Byline Effect",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var credits = stages.credits;",
				"var byline;",
				"",
				"function start () {",
				"",
				"\tbyline = credits.bylines.next();",
				"\tbyline.material.map.needsUpdate = true;",
				"\tbyline.visible = true;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tbyline.visible = false;",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = Math.sin( progress * Math.PI );",
				"\tt = TWEEN.Easing.Quintic.InOut( t );",
				"",
				"\tbyline.material.opacity = t;",
				"\tbyline.position.z = ( 1 - t ) * dolly.userData.distance * 0.1 + dolly.userData.distance;",
				"",
				"}"
			]
		],
		[
			"Jump to Credits",
			[
				"function start(){",
				"\tplayer.setAudio( null );",
				"\tplayer.currentTime = 325;",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Fog Audio Fade In",
			[
				"var audio = FRAME.getResource( 'audio' );",
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"",
				"var fo = 1;",
				"var fd = 12;",
				"",
				"function start () {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tfog.far = progress * ( fd - fo ) + fo;",
				"\tif ( audio.credits ) {",
				"\t\taudio.credits.volume = 2 * Math.max( progress - 0.5, 0 );",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Audio Fog Fade Out",
			[
				"var audio = FRAME.getResource( 'audio' );",
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"",
				"var fo = 12;",
				"var fd = 1;",
				"",
				"function start () {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tfog.far = progress * ( fd - fo ) + fo;",
				"\tif ( audio.credits ) {",
				"\t\taudio.credits.volume = 1 - progress;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Fog 3-4",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fog_origin = fog.far;",
				"var fog_target = 13;",
				"",
				"function start () {",
				"",
				"\tfog_origin = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Linear.None( progress );",
				"\tfog.far = t * ( fog_target - fog_origin ) + fog_origin;",
				"",
				"}",
				""
			]
		],
		[
			"Particle Burst",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var stages = FRAME.getResource( 'stages' );",
				"",
				"var count = 64;",
				"var radius = 3;",
				"var size = 7;",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var positions = new Float32Array( count * 3 );",
				"var destinations = new Float32Array( count * 3 );",
				"var sizes = new Float32Array( count );",
				"var vec = new THREE.Vector3();",
				"",
				"for ( var i = 0, i3 = 0; i < count; i ++, i3 += 3 ) {",
				"",
				"\tvec.set(",
				"\t\tMath.random() * 2 - 1,",
				"\t\tMath.random() * 2 - 1,",
				"\t\tMath.random() * 2 - 1",
				"\t);",
				"\tvec.normalize();",
				"\tvec.multiplyScalar( Math.random() * radius );",
				"",
				"\tpositions[ i3 + 0 ] = vec.z * 0.4;",
				"\tpositions[ i3 + 1 ] = vec.y * 0.4;",
				"\tpositions[ i3 + 2 ] = vec.x * 0.4;",
				"",
				"\tdestinations[ i3 + 0 ] = vec.x;",
				"\tdestinations[ i3 + 1 ] = vec.y;",
				"\tdestinations[ i3 + 2 ] = vec.z;",
				"",
				"\tsizes[ i ] = size;",
				"",
				"}",
				"geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );",
				"geometry.addAttribute( 'destination', new THREE.BufferAttribute( destinations, 3 ) );",
				"geometry.addAttribute( 'size', new THREE.BufferAttribute( sizes, 1 ) );",
				"",
				"var particleSystem = new THREE.Points( geometry, THREE.neonShader.particleShader );",
				"particleSystem.position.y = 0.5;",
				"",
				"var bedroom;",
				"",
				"function start(){",
				"\t",
				"\tbedroom = stages.bedroom;",
				"",
				"\tparticleSystem.rotation.y = Math.random() * Math.PI * 2;",
				"\tscene.add( particleSystem );",
				"",
				"\tparticleSystem.material.uniforms.progress.value = 0;",
				"",
				"}",
				"",
				"function end(){",
				"",
				"\tscene.remove( particleSystem );",
				"",
				"\tparticleSystem.material.uniforms.progress.value = 0;",
				"",
				"\t// player.currentTime = 90;",
				"",
				"}",
				"",
				"function update( progress ){",
				"\t",
				"\tvar t = TWEEN.Easing.Circular.Out( progress );",
				"\tt = TWEEN.Easing.Circular.Out( t );",
				"",
				"\tparticleSystem.material.uniforms.progress.value = t;",
				"\tparticleSystem.scale.setScalar( t + 0.0001 );",
				"",
				"\tif ( bedroom && bedroom.teddy ) {",
				"\t\tparticleSystem.position.z = bedroom.teddy.matrixWorld.elements[14];",
				"\t}",
				"",
				"}",
				""
			]
		],
		[
			"As she moves to suicide",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t5, 5, 7, 5, // As",
				"\t6, 6, 6, 6, // She",
				"",
				"\t4, 5, 7, 5, // Moves",
				"\t4, 5, 7, 5, // To",
				"",
				"\t4, 5, 5, 5, // Su",
				"\t6, 6, 6, 6, // i",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 4 // cide",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"In and Under Neon Lights",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t6, 6, 7, 6, // In",
				"\t6, 7, 7, 6, // And",
				"",
				"\t4, 6, 7, 6, // Un",
				"\t4, 5, 7, 5, // der",
				"",
				"\t4, 6, 6, 6, // Ne",
				"\t7, 7, 7, 7, // on",
				"\t6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 4 // Lights",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Let it go, let it go",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t6, 7, 6, 4, // Let",
				"\t6, 7, 6, 4, // It",
				"\t5, 7, 5, 4, // Go",
				"\t",
				"\t4, 4, 4, 4,",
				"\t4, 4, 4, 4,",
				"\t",
				"\t6, 7, 6, 4, // Let",
				"\t6, 7, 6, 4, // It",
				"\t5, 7, 5, 4, // Go",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Eye to eye face to face",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t6, 7, 6, 4, // eye",
				"\t6, 5, 5, 4, // to",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, 6, // eye",
				"\t",
				"\t4, 4, 4, 4,",
				"\t",
				"\t6, 7, 6, 4, // face",
				"\t6, 5, 5, 4, // to",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 4, // face",
				"]; ",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"I guess this is heaven",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t6, 7, 6, 4, // I",
				"\t6, 7, 7, 7, 7, 6, 4, // guess",
				"\t6, 7, 6, 4, // this",
				"\t6, 7, 6, 4, // is",
				"\t6, 7, 7, 7, 7, // hea",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 4 // ven",
				"]; ",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"I guess I'm in heaven",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t6, 7, 6, 4, // I",
				"\t6, 7, 7, 7, 6, 4, // guess",
				"\t6, 7, 6, 4, // I'm",
				"\t6, 7, 6, 4, // in",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, // hea",
				"\t6, 7, 7, 7, 7, 7, 7, 6, 4 // ven",
				"]; ",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"As she moves to suicide short",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t5, 5, 7, 5, // As",
				"\t6, 6, 6, 6, // She",
				"",
				"\t4, 5, 7, 5, // Moves",
				"\t4, 5, 7, 5, // To",
				"",
				"\t4, 5, 5, 5, // Su",
				"\t6, 6, 6, 6, // i",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 4 // cide",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Under Neon Lights Short",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"var keyframes = [",
				"",
				"\t6, 7, 6, 4, // Un",
				"\t5, 7, 5, 4, // der",
				"",
				"\t6, 6, 6, // Ne",
				"\t7, 7, 7, 7, 6, 6, // on",
				"\t",
				"\t6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // Ligh",
				"\t6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4 // tsss",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Go No Husband Short",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t5, 7, 5, 4, // Got",
				"\t6, 7, 5, 5, // No",
				"",
				"\t6, 7, 7, 6, // Hus",
				"\t4, 6, 7, 7, 7, 6, 4 // band",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Got No Wife Short",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t5, 5, 7, 5, // All // Got",
				"\t4, 6, 7, 5, // I // No",
				"\t4, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 4 // Want // Wife",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Is this really all I want",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"// Got no husband, got no wife",
				"var keyframes = [",
				"",
				"\t6, 7, 6, 4, // Is",
				"\t6, 7, 6, 4, // This",
				"\t6, 7, 6, 4, // Rea",
				"\t6, 7, 6, 4, // lly",
				"\t6, 7, 6, 4, // All",
				"\t5, 7, 6, 5, // I",
				"\t4, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 4 // Want",
				"",
				"];",
				"",
				"function start() {}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar model = annie.userData.model;",
				"",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"",
				"\tanimator.currentTile = keyframes[ Math.floor( progress * keyframes.length ) ];",
				"",
				"}"
			]
		],
		[
			"Fog 4-2",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fo = 12;",
				"var fd = 1;",
				"",
				"function start () {",
				"",
				"\tfo = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tfog.far = progress * ( fd - fo ) + fo;",
				"",
				"}"
			]
		],
		[
			"Dandelion Effect",
			[
				"var elem;",
				"",
				"function start () {",
				"",
				"\tvar stage = FRAME.getResource( 'stages' ).current;",
				"\telem = stage.dandelions.next();",
				"\telem.material.uniforms.opacity.value = 1;",
				"\tstage.add( elem, 0, 0.215 );",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tif ( elem && elem.userData.tween ) {",
				"\t\telem.userData.tween.start();",
				"\t}",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Annie Hug Effect",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"var stages = FRAME.getResource( 'stages' );",
				"",
				"function start () {",
				"",
				"\tvar action;",
				"",
				"\tannie.userData.model = annie.userData.models.child;",
				"\t// Hijack prevModel to update teenage animation on RAF",
				"\tannie.userData.prevModel = annie.userData.models.teenager;",
				"",
				"\tannie.userData.play( 'hug' );",
				"\taction = annie.userData.currentAnimation.action;",
				"\taction.loop = THREE.LoopOnce;",
				"",
				"\taction = switchToAction( annie.userData.prevModel, 'hug' );",
				"\taction.loop = THREE.LoopOnce;",
				"",
				"\tvar model = annie.userData.models.teenager;",
				"\tvar animation = annie.userData.animations.teenager.hug;",
				"\tmodel.userData.currentAnimation = animation;",
				"",
				"\tvar bear = annie.userData.models.bear;",
				"",
				"\tif ( bear && bear.userData.animations ) {",
				"",
				"\t\taction = switchToAction( bear, 'hug' );",
				"\t\taction.loop = THREE.LoopOnce;",
				"",
				"\t\tbear.position.set( 0, 0, 0 );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update ( progress, dt ) {}",
				"",
				"function switchToAction ( model, actionName ) {",
				"",
				"\tvar animations = model.userData.animations;",
				"\tvar action, prev;",
				"\tvar currentAnimation = model.userData.currentAnimation;",
				"\t",
				"\tfor ( var name in animations ) {",
				"\t\tvar animation = animations[ name ];",
				"\t\tif ( name === actionName ) {",
				"\t\t\taction = animation.action;",
				"\t\t}",
				"//\t\tif ( !currentAnimation ) {",
				"\t\t\tanimation.action.stop();",
				"//\t\t}",
				"\t}",
				"",
				"\tif ( currentAnimation ) {",
				"\t\taction.crossFadeFrom( currentAnimation.action, 0.35 );",
				"\t}",
				"",
				"\tif ( action ) {",
				"\t\taction.play();",
				"\t}",
				"",
				"\treturn action;",
				"",
				"}"
			]
		],
		[
			"Stick to Stage 2 Effect",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"",
				"var origin = new THREE.Vector3( 0, 0, 0 );",
				"var destination = new THREE.Vector3( 0, 0.1, 0 );",
				"var distance = 0.5955625000000001 * 12 * 3;\t// size * rows",
				"var edge = 30.04778289794922;",
				"",
				"function start () {",
				"",
				"\torigin.set( 0, 0, 5.585 + edge );",
				"",
				"\tif ( stages.current ) {",
				"",
				"\t\tvar stage = stages.current;",
				"\t\tvar offset = 0;",
				"\t\tvar v;",
				"\t\tvar cursor = stage.cursor;",
				"",
				"\t\tswitch ( stage.quadrant ) {",
				"",
				"\t\t\tcase 0:",
				"",
				"\t\t\t\tv = cursor.x;",
				"\t\t\t\tv *= stage.cols;",
				"",
				"\t\t\t\toffset = Math.abs( v - Math.floor( v ) );",
				"\t\t\t\toffset *= stage.size;",
				"\t\t\t\toffset = stage.size - offset;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 2:",
				"",
				"\t\t\t\tv = cursor.x;",
				"\t\t\t\tv *= stage.cols;",
				"",
				"\t\t\t\toffset = Math.abs( v - Math.floor( v ) );",
				"\t\t\t\toffset *= stage.size;",
				"\t\t\t\tbreak;",
				"",
				"\t\t\tcase 1:",
				"",
				"\t\t\t\tv = cursor.y;",
				"\t\t\t\tv *= stage.rows;",
				"",
				"\t\t\t\toffset = Math.abs( v - Math.floor( v ) );",
				"\t\t\t\toffset *= stage.size;",
				"\t\t\t\toffset = stage.size - offset;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 3:",
				"",
				"\t\t\t\tv = cursor.y;",
				"\t\t\t\tv *= stage.rows;",
				"",
				"\t\t\t\toffset = Math.abs( v - Math.floor( v ) );",
				"\t\t\t\toffset *= stage.size;",
				"\t\t\t\tbreak;",
				"\t\t}",
				"",
				"\t\torigin.z += offset;",
				"",
				"\t}",
				"\t",
				"\t// destination.z = origin.z - distance;",
				"\tdestination.z = edge - distance * 0.4542974079126876;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar group = stages.hallway.scene;",
				"",
				"\tif ( !group ) {",
				"\t\treturn;",
				"\t}",
				"\t",
				"\tvar x = progress * ( destination.x - origin.x ) + origin.x;",
				"\tvar y = progress * ( destination.y - origin.y ) + origin.y;",
				"\tvar z = progress * ( destination.z - origin.z ) + origin.z;",
				"",
				"\tTHREE.neonShader.globals.motion.value = group.position.z - z;",
				"",
				"\tgroup.position.x = x;",
				"\tgroup.position.y = y;",
				"\tgroup.position.z = z;",
				"",
				"}"
			]
		],
		[
			"Hallway Position Effect",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var distance = 0.5955625000000001 * 12 * 3 * 0.4542974079126876;",
				"var edge = 30.04778289794922;",
				"",
				"var origin = new THREE.Vector3( 0, 0.1, edge - distance );",
				"var destination = new THREE.Vector3( 0, 0.1, - 7.5 );",
				"",
				"function start () {",
				"",
				"\tvar group = stages.hallway.scene;",
				"\tif ( !group ) {",
				"\t\treturn;",
				"\t}",
				"\t",
				"\torigin.copy( group.position );",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar group = stages.hallway.scene;",
				"",
				"\tif ( !group ) {",
				"\t\treturn;",
				"\t}",
				"\t",
				"\tvar x = progress * ( destination.x - origin.x ) + origin.x;",
				"\tvar y = progress * ( destination.y - origin.y ) + origin.y;",
				"\tvar z = progress * ( destination.z - origin.z ) + origin.z;",
				"",
				"\tTHREE.neonShader.globals.motion.value = group.position.z - z;",
				"",
				"\tgroup.position.x = x;",
				"\tgroup.position.y = y;",
				"\tgroup.position.z = z;",
				"",
				"}"
			]
		],
		[
			"Bear Opacity Effect",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var bedroom;",
				"",
				"function start () {",
				"",
				"\tbedroom = stages.bedroom;",
				"\tif ( !bedroom ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar bear = bedroom.teddy;",
				"\tbear.visible = false;",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update( progress ) {}"
			]
		],
		[
			"Fog 2-1",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var fo = 6;",
				"var fd = 10;",
				"",
				"function start () {",
				"",
				"\tfo = fog.far;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update ( progress ) {",
				"",
				"\tfog.far = progress * ( fd - fo ) + fo;",
				"",
				"}"
			]
		],
		[
			"Adult Ghost Effect",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"var adult;",
				"var distance = 11;",
				"",
				"function start () {",
				"",
				"\tadult = annie.userData.models.adult;",
				"\tannie.userData.setClipRange( adult, 0, 1 );",
				"\tadult.visible = true;",
				"\tadult.rotation.y = Math.PI;",
				"\tadult.position.set( 0, 0, 11 );",
				"",
				"\t/*",
				"\tvar mesh = adult.children[ 1 ];",
				"\tif ( mesh && mesh.isMesh ) {",
				"\t\tmesh.material.uniforms.opacity.value = 0.5;",
				"\t}",
				"\t*/",
				"",
				"\tswitchToAction( adult, 'idle' );",
				"",
				"\tif ( annie.userData.prevModel ) {",
				"\t\tdelete annie.userData.prevModel;",
				"\t}",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tadult = annie.userData.models.adult;",
				"",
				"\t/*",
				"\tvar mesh = adult.children[ 1 ];",
				"\tif ( mesh && mesh.isMesh ) {",
				"\t\tmesh.material.uniforms.opacity.value = 1;",
				"\t}",
				"\t*/",
				"",
				"\tadult.rotation.y = 0;",
				"\tadult.position.set( 0, 0, 0 );",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tif ( adult && adult.mixer ) {",
				"",
				"\t\tadult.mixer.update( dt );",
				"",
				"\t\t/*",
				"\t\tvar mesh = adult.children[ 1 ];",
				"\t\tif ( mesh && mesh.isMesh ) {",
				"\t\t\tmesh.material.uniforms.opacity.value = 0.5 - progress * 0.5;",
				"\t\t}",
				"\t\t*/",
				"",
				"\t}",
				"",
				"\tadult.position.z = progress * ( 0 - distance ) + distance;",
				"",
				"}",
				"",
				"",
				"function switchToAction ( model, actionName ) {",
				"",
				"\tvar animations = model.userData.animations;",
				"\tvar action;",
				"",
				"\tfor ( var name in animations ) {",
				"\t\tvar animation = animations[ name ];",
				"\t\tif ( name === actionName ) {",
				"\t\t\taction = animation.action;",
				"\t\t}",
				"\t\tanimation.action.stop();",
				"\t}",
				"",
				"\tif ( action ) {",
				"\t\taction.play();",
				"\t}",
				"",
				"}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			274,
			0,
			46,
			true
		],
		[
			"VR Update",
			0,
			274,
			1,
			4,
			true
		],
		[
			"Update",
			0,
			274,
			2,
			51,
			true
		],
		[
			"Stage 1",
			0,
			69,
			3,
			0,
			true
		],
		[
			"Fog 1-1",
			0,
			10.25,
			4,
			10,
			true
		],
		[
			"Neon Stage 1",
			0,
			3.5,
			5,
			55,
			true
		],
		[
			"Bird Flying",
			0,
			74,
			7,
			28,
			true
		],
		[
			"Lip Sync",
			0,
			10.75758082497216,
			9,
			9,
			true
		],
		[
			"Render",
			0,
			274,
			10,
			5,
			true
		],
		[
			"Stats",
			0,
			385,
			11,
			41,
			false
		],
		[
			"Fog 1-2",
			10.252427564173855,
			10.75,
			4,
			12,
			true
		],
		[
			"U",
			10.75758082497216,
			10.888585858585877,
			9,
			7,
			true
		],
		[
			"N",
			10.888585858585877,
			11.025000000000015,
			9,
			8,
			true
		],
		[
			"D",
			11.025000000000015,
			11.148979591836712,
			9,
			6,
			true
		],
		[
			"ER",
			11.148979591836712,
			11.26799999999999,
			9,
			6,
			true
		],
		[
			"NE",
			11.26799999999999,
			11.42934751773048,
			9,
			8,
			true
		],
		[
			"O",
			11.42934751773048,
			11.623999999999983,
			9,
			7,
			true
		],
		[
			"O",
			11.623999999999983,
			11.748000000000008,
			9,
			6,
			true
		],
		[
			"N",
			11.748000000000008,
			11.93302664366495,
			9,
			8,
			true
		],
		[
			"LIGH",
			11.93302664366495,
			12.520821631269143,
			9,
			7,
			true
		],
		[
			"TSSS",
			12.520821631269143,
			14.016528110469183,
			9,
			8,
			true
		],
		[
			"Closed",
			14.016528110469183,
			14.75,
			9,
			9,
			true
		],
		[
			"U",
			14.75,
			14.881005033613716,
			9,
			7,
			true
		],
		[
			"N",
			14.881005033613716,
			15.017419175027854,
			9,
			8,
			true
		],
		[
			"D",
			15.017419175027854,
			15.141398766864551,
			9,
			6,
			true
		],
		[
			"ER",
			15.141398766864551,
			15.26041917502783,
			9,
			6,
			true
		],
		[
			"NE",
			15.26041917502783,
			15.42176669275832,
			9,
			8,
			true
		],
		[
			"O",
			15.42176669275832,
			15.616419175027822,
			9,
			7,
			true
		],
		[
			"O",
			15.616419175027822,
			15.740419175027847,
			9,
			6,
			true
		],
		[
			"N",
			15.740419175027847,
			15.92544581869279,
			9,
			8,
			true
		],
		[
			"LIGH",
			15.92544581869279,
			16.513240806296984,
			9,
			7,
			true
		],
		[
			"TSSS",
			16.513240806296984,
			18.008947285497023,
			9,
			8,
			true
		],
		[
			"Closed",
			18.008947285497023,
			18.572289156626525,
			9,
			9,
			true
		],
		[
			"G",
			18.572289156626525,
			18.62631092699308,
			9,
			6,
			true
		],
		[
			"O",
			18.62631092699308,
			18.738666305085662,
			9,
			7,
			true
		],
		[
			"T",
			18.738666305085662,
			18.786690440965966,
			9,
			6,
			true
		],
		[
			"Closed",
			18.786690440965966,
			18.89371454250168,
			9,
			9,
			true
		],
		[
			"N",
			18.89371454250168,
			18.94905279144129,
			9,
			6,
			true
		],
		[
			"NO",
			18.94905279144129,
			19.008486495443766,
			9,
			7,
			true
		],
		[
			"O",
			19.008486495443766,
			19.1234043665483,
			9,
			6,
			true
		],
		[
			"Closed",
			19.1234043665483,
			19.214118571294485,
			9,
			9,
			true
		],
		[
			"H",
			19.214118571294485,
			19.29355724959631,
			9,
			8,
			true
		],
		[
			"U",
			19.29355724959631,
			19.424142772161737,
			9,
			7,
			true
		],
		[
			"S",
			19.424142772161737,
			19.543802299139216,
			9,
			8,
			true
		],
		[
			"B",
			19.543802299139216,
			19.652148356949766,
			9,
			9,
			true
		],
		[
			"A",
			19.652148356949766,
			19.785684836945155,
			9,
			8,
			true
		],
		[
			"A",
			19.785684836945155,
			19.911169130684907,
			9,
			7,
			true
		],
		[
			"N",
			19.911169130684907,
			20.083661790445234,
			9,
			8,
			true
		],
		[
			"D ",
			20.083661790445234,
			22.59,
			9,
			9,
			true
		],
		[
			"G",
			22.59,
			22.644021770366557,
			9,
			6,
			true
		],
		[
			"O",
			22.644021770366557,
			22.756377148459137,
			9,
			7,
			true
		],
		[
			"T",
			22.756377148459137,
			22.80440128433944,
			9,
			6,
			true
		],
		[
			"Closed",
			22.80440128433944,
			22.911425385875155,
			9,
			9,
			true
		],
		[
			"N",
			22.911425385875155,
			22.966763634814765,
			9,
			6,
			true
		],
		[
			"NO",
			22.966763634814765,
			23.02619733881724,
			9,
			7,
			true
		],
		[
			"[Interactive Moment] Flower",
			23,
			26,
			4,
			82,
			true
		],
		[
			"O",
			23.02619733881724,
			23.197115209921748,
			9,
			6,
			true
		],
		[
			"Closed",
			23.197115209921748,
			23.277829414667956,
			9,
			9,
			true
		],
		[
			"W",
			23.277829414667956,
			23.45437714845917,
			9,
			6,
			true
		],
		[
			"I",
			23.45437714845917,
			24.09284222840064,
			9,
			7,
			true
		],
		[
			"F",
			24.09284222840064,
			24.941980941430717,
			9,
			8,
			true
		],
		[
			"Closed",
			24.941980941430717,
			26.55604729648752,
			9,
			9,
			true
		],
		[
			"Particles!",
			25.96875,
			29.5,
			5,
			69,
			true
		],
		[
			"A",
			26.55604729648752,
			26.624030813595432,
			9,
			8,
			true
		],
		[
			"A",
			26.624030813595432,
			26.710155215509303,
			9,
			7,
			true
		],
		[
			"L",
			26.710155215509303,
			26.79701167254278,
			9,
			8,
			true
		],
		[
			"L",
			26.79701167254278,
			26.896426877221145,
			9,
			9,
			true
		],
		[
			"I",
			26.896426877221145,
			26.989131287470997,
			9,
			8,
			true
		],
		[
			"I",
			26.989131287470997,
			27.094394445365737,
			9,
			7,
			true
		],
		[
			"I",
			27.094394445365737,
			27.17334181378679,
			9,
			8,
			true
		],
		[
			"I",
			27.17334181378679,
			27.238685212155513,
			9,
			9,
			true
		],
		[
			"W",
			27.238685212155513,
			27.3177717861822,
			9,
			6,
			true
		],
		[
			"A",
			27.3177717861822,
			27.751673037212992,
			9,
			7,
			true
		],
		[
			"N",
			27.751673037212992,
			27.826261821196073,
			9,
			8,
			true
		],
		[
			"T",
			27.826261821196073,
			30.501703475291446,
			9,
			9,
			true
		],
		[
			"Early Beat",
			30,
			32,
			4,
			13,
			true
		],
		[
			"Particles!",
			30,
			32,
			5,
			69,
			true
		],
		[
			"A",
			30.501703475291446,
			30.569686992399358,
			9,
			8,
			true
		],
		[
			"A",
			30.569686992399358,
			30.65581139431323,
			9,
			7,
			true
		],
		[
			"L",
			30.65581139431323,
			30.742667851346706,
			9,
			8,
			true
		],
		[
			"L",
			30.742667851346706,
			30.84208305602507,
			9,
			9,
			true
		],
		[
			"I",
			30.84208305602507,
			30.94236322385068,
			9,
			8,
			true
		],
		[
			"I",
			30.94236322385068,
			31.040050624169663,
			9,
			7,
			true
		],
		[
			"I",
			31.040050624169663,
			31.118997992590717,
			9,
			8,
			true
		],
		[
			"I",
			31.118997992590717,
			31.18434139095944,
			9,
			9,
			true
		],
		[
			"W",
			31.18434139095944,
			31.263427964986125,
			9,
			6,
			true
		],
		[
			"A",
			31.263427964986125,
			31.697329216016918,
			9,
			7,
			true
		],
		[
			"N",
			31.697329216016918,
			31.771918,
			9,
			8,
			true
		],
		[
			"T",
			31.771918,
			34.493455618935315,
			9,
			9,
			true
		],
		[
			"Early Beat",
			34,
			36,
			4,
			13,
			true
		],
		[
			"Particles!",
			34.00125,
			36.0025,
			5,
			69,
			true
		],
		[
			"A",
			34.493455618935315,
			34.56143913604323,
			9,
			8,
			true
		],
		[
			"A",
			34.56143913604323,
			34.6475635379571,
			9,
			7,
			true
		],
		[
			"L",
			34.6475635379571,
			34.734419994990574,
			9,
			8,
			true
		],
		[
			"L",
			34.734419994990574,
			34.83383519966894,
			9,
			9,
			true
		],
		[
			"I",
			34.83383519966894,
			34.92653960991879,
			9,
			8,
			true
		],
		[
			"I",
			34.92653960991879,
			35.03180276781353,
			9,
			7,
			true
		],
		[
			"I",
			35.03180276781353,
			35.110750136234586,
			9,
			8,
			true
		],
		[
			"I",
			35.110750136234586,
			35.176093534603304,
			9,
			9,
			true
		],
		[
			"W",
			35.176093534603304,
			35.25518010862999,
			9,
			6,
			true
		],
		[
			"A",
			35.25518010862999,
			35.68908135966078,
			9,
			7,
			true
		],
		[
			"N",
			35.68908135966078,
			35.763670143643864,
			9,
			8,
			true
		],
		[
			"T",
			35.763670143643864,
			38.1485484219198,
			9,
			9,
			true
		],
		[
			"In the Forest",
			37.5,
			56,
			4,
			11,
			true
		],
		[
			"Early Beat",
			38,
			40,
			5,
			13,
			true
		],
		[
			"Particles!",
			38,
			40,
			6,
			69,
			true
		],
		[
			"I",
			38.1485484219198,
			38.19342670019561,
			9,
			6,
			true
		],
		[
			"I",
			38.19342670019561,
			38.2863049784714,
			9,
			7,
			true
		],
		[
			"S",
			38.2863049784714,
			38.43718325674727,
			9,
			8,
			true
		],
		[
			"S",
			38.43718325674727,
			38.48518325674723,
			9,
			9,
			true
		],
		[
			"TH",
			38.48518325674723,
			38.590304978471465,
			9,
			8,
			true
		],
		[
			"I",
			38.590304978471465,
			38.67206153502305,
			9,
			7,
			true
		],
		[
			"S  ",
			38.67206153502305,
			38.78206153502311,
			9,
			8,
			true
		],
		[
			"S",
			38.78206153502311,
			38.81942670019568,
			9,
			9,
			true
		],
		[
			"R",
			38.81942670019568,
			38.882304978471474,
			9,
			6,
			true
		],
		[
			"EA",
			38.882304978471474,
			39.01895042391193,
			9,
			7,
			true
		],
		[
			"LL",
			39.01895042391193,
			39.295162035521095,
			9,
			8,
			true
		],
		[
			"Y",
			39.295162035521095,
			39.70804031379693,
			9,
			9,
			true
		],
		[
			"A",
			39.70804031379693,
			39.77602383090484,
			9,
			8,
			true
		],
		[
			"A",
			39.77602383090484,
			39.86214823281871,
			9,
			7,
			true
		],
		[
			"L",
			39.86214823281871,
			39.94900468985219,
			9,
			8,
			true
		],
		[
			"L",
			39.94900468985219,
			40.048419894530554,
			9,
			9,
			true
		],
		[
			"I",
			40.048419894530554,
			40.141124304780405,
			9,
			8,
			true
		],
		[
			"I",
			40.141124304780405,
			40.246387462675145,
			9,
			7,
			true
		],
		[
			"I",
			40.246387462675145,
			40.3253348310962,
			9,
			8,
			true
		],
		[
			"I",
			40.3253348310962,
			40.39067822946492,
			9,
			9,
			true
		],
		[
			"W",
			40.39067822946492,
			40.46976480349161,
			9,
			6,
			true
		],
		[
			"A",
			40.46976480349161,
			40.55623748309381,
			9,
			7,
			true
		],
		[
			"N",
			40.55623748309381,
			40.636397695648334,
			9,
			8,
			true
		],
		[
			"T",
			40.636397695648334,
			57.38099025963841,
			9,
			9,
			true
		],
		[
			"Fog 1-3",
			42,
			42.5,
			5,
			15,
			true
		],
		[
			"Guitar Riff",
			42.011034090630375,
			43.01103405341384,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			42.49883891240055,
			43.49883887518401,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			43.01103524434323,
			44.011035207126696,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			43.49884006611331,
			44.49884002889677,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			44.011035207126696,
			45.01103516991016,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			44.49884002889677,
			45.498839991680235,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			45.01103516991016,
			46.01103513269362,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			45.498839991680235,
			46.4988399544637,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			46.01103513269362,
			47.011035095477084,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			46.4988399544637,
			47.49883991724716,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			47.011035095477084,
			48.011035058260546,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			47.49883991724716,
			48.49883988003062,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			48.011035058260546,
			49.01103502104401,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			48.49883988003062,
			49.498839842814085,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			49.01103502104401,
			50.01103498382747,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			49.498839842814085,
			50.49883980559755,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			50.01103498382747,
			51.011034946610934,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			50.49883980559755,
			51.49883976838101,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			51.011034946610934,
			52.0110349093944,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			51.49883976838101,
			52.49883973116447,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			52.0110349093944,
			53.01103487217786,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			52.49883973116447,
			53.498839693947936,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			53.01103487217786,
			54.01103483496132,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			53.498839693947936,
			54.4988396567314,
			5,
			14,
			true
		],
		[
			"Bird Swoop",
			54,
			60,
			8,
			37,
			true
		],
		[
			"Guitar Riff",
			54.01103483496132,
			55.011034797744784,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			54.4988396567314,
			55.49883961951486,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			55.011034797744784,
			56.01103476052825,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			55.49883961951486,
			56.498839582298324,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			56.01103476052825,
			57.01103472331171,
			6,
			14,
			true
		],
		[
			"Guitar Riff",
			56.498839582298324,
			57.498839545081786,
			5,
			14,
			true
		],
		[
			"Guitar Riff",
			57.01103472331171,
			58.01103468609517,
			6,
			14,
			true
		],
		[
			"AH",
			57.38099025963841,
			57.83624534950841,
			9,
			8,
			true
		],
		[
			"Guitar Riff",
			57.498839545081786,
			58.49883950786525,
			5,
			14,
			true
		],
		[
			"C",
			57.83624534950841,
			58.10993522198711,
			9,
			9,
			true
		],
		[
			"Guitar Riff",
			58.01103468609517,
			59.011034648878635,
			6,
			14,
			true
		],
		[
			"L",
			58.10993522198711,
			58.13625566771417,
			9,
			8,
			true
		],
		[
			"E",
			58.13625566771417,
			58.1643298289402,
			9,
			7,
			true
		],
		[
			"T",
			58.1643298289402,
			58.19240399016627,
			9,
			8,
			true
		],
		[
			"C",
			58.19240399016627,
			58.21558336297488,
			9,
			9,
			true
		],
		[
			"I",
			58.21558336297488,
			58.242580023582555,
			9,
			8,
			true
		],
		[
			"T",
			58.242580023582555,
			58.26966199723625,
			9,
			7,
			true
		],
		[
			"T",
			58.26966199723625,
			58.29537208948789,
			9,
			8,
			true
		],
		[
			"C",
			58.29537208948789,
			58.3181352503317,
			9,
			9,
			true
		],
		[
			"G",
			58.3181352503317,
			58.344420074518204,
			9,
			6,
			true
		],
		[
			"O",
			58.344420074518204,
			58.37333496082625,
			9,
			7,
			true
		],
		[
			"O",
			58.37333496082625,
			58.40058234127589,
			9,
			6,
			true
		],
		[
			"C",
			58.40058234127589,
			58.86652455932203,
			9,
			9,
			true
		],
		[
			"L",
			58.86652455932203,
			58.89284500504909,
			9,
			8,
			true
		],
		[
			"E",
			58.89284500504909,
			58.92091916627512,
			9,
			7,
			true
		],
		[
			"T",
			58.92091916627512,
			58.94899332750119,
			9,
			8,
			true
		],
		[
			"C",
			58.94899332750119,
			58.972172700309805,
			9,
			9,
			true
		],
		[
			"I",
			58.972172700309805,
			58.99916936091748,
			9,
			8,
			true
		],
		[
			"T",
			58.99916936091748,
			59.02625133457117,
			9,
			7,
			true
		],
		[
			"T",
			59.02625133457117,
			59.051961426822814,
			9,
			8,
			true
		],
		[
			"C",
			59.051961426822814,
			59.07472458766662,
			9,
			9,
			true
		],
		[
			"G",
			59.07472458766662,
			59.10100941185313,
			9,
			6,
			true
		],
		[
			"O",
			59.10100941185313,
			59.12992429816117,
			9,
			7,
			true
		],
		[
			"O",
			59.12992429816117,
			59.157171678610815,
			9,
			6,
			true
		],
		[
			"C",
			59.157171678610815,
			61.34442537206686,
			9,
			9,
			true
		],
		[
			"AH",
			61.34442537206686,
			61.79968046193686,
			9,
			8,
			true
		],
		[
			"C",
			61.79968046193686,
			62.07337033441556,
			9,
			9,
			true
		],
		[
			"Lift Off (Environment)",
			62,
			69,
			4,
			22,
			true
		],
		[
			"Lift Off (Models)",
			62,
			73.75,
			6,
			26,
			true
		],
		[
			"Bird Lift Off",
			62,
			64,
			8,
			36,
			true
		],
		[
			"L",
			62.07337033441556,
			62.099690780142616,
			9,
			8,
			true
		],
		[
			"E",
			62.099690780142616,
			62.127764941368646,
			9,
			7,
			true
		],
		[
			"T",
			62.127764941368646,
			62.15583910259472,
			9,
			8,
			true
		],
		[
			"C",
			62.15583910259472,
			62.17901847540333,
			9,
			9,
			true
		],
		[
			"I",
			62.17901847540333,
			62.206015136011004,
			9,
			8,
			true
		],
		[
			"T",
			62.206015136011004,
			62.2330971096647,
			9,
			7,
			true
		],
		[
			"T",
			62.2330971096647,
			62.25880720191634,
			9,
			8,
			true
		],
		[
			"C",
			62.25880720191634,
			62.28157036276015,
			9,
			9,
			true
		],
		[
			"G",
			62.28157036276015,
			62.307855186946654,
			9,
			6,
			true
		],
		[
			"O",
			62.307855186946654,
			62.3367700732547,
			9,
			7,
			true
		],
		[
			"O",
			62.3367700732547,
			62.36401745370434,
			9,
			6,
			true
		],
		[
			"C",
			62.36401745370434,
			62.82995967175048,
			9,
			9,
			true
		],
		[
			"L",
			62.82995967175048,
			62.85628011747754,
			9,
			8,
			true
		],
		[
			"E",
			62.85628011747754,
			62.88435427870357,
			9,
			7,
			true
		],
		[
			"T",
			62.88435427870357,
			62.91242843992964,
			9,
			8,
			true
		],
		[
			"C",
			62.91242843992964,
			62.935607812738255,
			9,
			9,
			true
		],
		[
			"I",
			62.935607812738255,
			62.96260447334593,
			9,
			8,
			true
		],
		[
			"T",
			62.96260447334593,
			62.98968644699962,
			9,
			7,
			true
		],
		[
			"T",
			62.98968644699962,
			63.01539653925126,
			9,
			8,
			true
		],
		[
			"C",
			63.01539653925126,
			63.03815970009507,
			9,
			9,
			true
		],
		[
			"G",
			63.03815970009507,
			63.064444524281576,
			9,
			6,
			true
		],
		[
			"O",
			63.064444524281576,
			63.09335941058962,
			9,
			7,
			true
		],
		[
			"O",
			63.09335941058962,
			63.120606791039265,
			9,
			6,
			true
		],
		[
			"C",
			63.120606791039265,
			65.30786048449531,
			9,
			9,
			true
		],
		[
			"AH",
			65.30786048449531,
			65.76311557436532,
			9,
			8,
			true
		],
		[
			"C",
			65.76311557436532,
			66.03680544684401,
			9,
			9,
			true
		],
		[
			"L",
			66.03680544684401,
			66.06312589257107,
			9,
			8,
			true
		],
		[
			"E",
			66.06312589257107,
			66.0912000537971,
			9,
			7,
			true
		],
		[
			"T",
			66.0912000537971,
			66.11927421502317,
			9,
			8,
			true
		],
		[
			"C",
			66.11927421502317,
			66.14245358783178,
			9,
			9,
			true
		],
		[
			"I",
			66.14245358783178,
			66.16945024843946,
			9,
			8,
			true
		],
		[
			"T",
			66.16945024843946,
			66.19653222209315,
			9,
			7,
			true
		],
		[
			"T",
			66.19653222209315,
			66.2222423143448,
			9,
			8,
			true
		],
		[
			"C",
			66.2222423143448,
			66.2450054751886,
			9,
			9,
			true
		],
		[
			"G",
			66.2450054751886,
			66.27129029937511,
			9,
			6,
			true
		],
		[
			"O",
			66.27129029937511,
			66.30020518568315,
			9,
			7,
			true
		],
		[
			"O",
			66.30020518568315,
			66.32745256613279,
			9,
			6,
			true
		],
		[
			"C",
			66.32745256613279,
			66.79339478417893,
			9,
			9,
			true
		],
		[
			"L",
			66.79339478417893,
			66.81971522990598,
			9,
			8,
			true
		],
		[
			"E",
			66.81971522990598,
			66.84778939113201,
			9,
			7,
			true
		],
		[
			"T",
			66.84778939113201,
			66.87586355235808,
			9,
			8,
			true
		],
		[
			"C",
			66.87586355235808,
			66.8990429251667,
			9,
			9,
			true
		],
		[
			"I",
			66.8990429251667,
			66.92603958577438,
			9,
			8,
			true
		],
		[
			"T",
			66.92603958577438,
			66.95312155942807,
			9,
			7,
			true
		],
		[
			"T",
			66.95312155942807,
			66.97883165167971,
			9,
			8,
			true
		],
		[
			"C",
			66.97883165167971,
			67.00159481252352,
			9,
			9,
			true
		],
		[
			"G",
			67.00159481252352,
			67.02787963671003,
			9,
			6,
			true
		],
		[
			"O",
			67.02787963671003,
			67.05679452301807,
			9,
			7,
			true
		],
		[
			"O",
			67.05679452301807,
			67.0840419034677,
			9,
			6,
			true
		],
		[
			"C",
			67.0840419034677,
			69.27129559692375,
			9,
			9,
			true
		],
		[
			"Stage 1 to 2 Transition",
			69,
			88.5,
			4,
			23,
			true
		],
		[
			"Landing in Room",
			69,
			73.75,
			5,
			24,
			true
		],
		[
			"AH",
			69.27129559692375,
			69.72655068679376,
			9,
			8,
			true
		],
		[
			"C",
			69.72655068679376,
			70.00024055927246,
			9,
			9,
			true
		],
		[
			"L",
			70.00024055927246,
			70.02656100499951,
			9,
			8,
			true
		],
		[
			"E",
			70.02656100499951,
			70.05463516622554,
			9,
			7,
			true
		],
		[
			"T",
			70.05463516622554,
			70.08270932745161,
			9,
			8,
			true
		],
		[
			"C",
			70.08270932745161,
			70.10588870026022,
			9,
			9,
			true
		],
		[
			"I",
			70.10588870026022,
			70.1328853608679,
			9,
			8,
			true
		],
		[
			"T",
			70.1328853608679,
			70.1599673345216,
			9,
			7,
			true
		],
		[
			"T",
			70.1599673345216,
			70.18567742677324,
			9,
			8,
			true
		],
		[
			"C",
			70.18567742677324,
			70.20844058761705,
			9,
			9,
			true
		],
		[
			"G",
			70.20844058761705,
			70.23472541180355,
			9,
			6,
			true
		],
		[
			"O",
			70.23472541180355,
			70.2636402981116,
			9,
			7,
			true
		],
		[
			"O",
			70.2636402981116,
			70.29088767856123,
			9,
			6,
			true
		],
		[
			"C",
			70.29088767856123,
			70.75682989660737,
			9,
			9,
			true
		],
		[
			"L",
			70.75682989660737,
			70.78315034233442,
			9,
			8,
			true
		],
		[
			"E",
			70.78315034233442,
			70.81122450356045,
			9,
			7,
			true
		],
		[
			"T",
			70.81122450356045,
			70.83929866478653,
			9,
			8,
			true
		],
		[
			"C",
			70.83929866478653,
			70.86247803759514,
			9,
			9,
			true
		],
		[
			"I",
			70.86247803759514,
			70.88947469820282,
			9,
			8,
			true
		],
		[
			"T",
			70.88947469820282,
			70.91655667185651,
			9,
			7,
			true
		],
		[
			"T",
			70.91655667185651,
			70.94226676410815,
			9,
			8,
			true
		],
		[
			"C",
			70.94226676410815,
			70.96502992495196,
			9,
			9,
			true
		],
		[
			"G",
			70.96502992495196,
			70.99131474913847,
			9,
			6,
			true
		],
		[
			"O",
			70.99131474913847,
			71.02022963544651,
			9,
			7,
			true
		],
		[
			"O",
			71.02022963544651,
			71.04747701589615,
			9,
			6,
			true
		],
		[
			"C",
			71.04747701589615,
			73.23473070935219,
			9,
			9,
			true
		],
		[
			"Bird Release",
			72.5,
			74,
			8,
			38,
			true
		],
		[
			"Neon Stage 2",
			72.65625,
			73.5,
			3,
			56,
			true
		],
		[
			"AH",
			73.23473070935219,
			73.6,
			9,
			8,
			true
		],
		[
			"Annie Hallway Walk",
			73.55,
			75.5,
			3,
			27,
			true
		],
		[
			"C",
			73.6,
			73.7489200326034,
			9,
			9,
			true
		],
		[
			"As she moves to suicide",
			73.7489200326034,
			77.25152439024396,
			9,
			70,
			true
		],
		[
			"Run Through Hallway",
			73.75,
			88.5,
			5,
			25,
			true
		],
		[
			"C",
			77.25152439024396,
			77.76305731931308,
			9,
			9,
			true
		],
		[
			"In and Under Neon Lights",
			77.76305731931308,
			81.2388759626679,
			9,
			71,
			true
		],
		[
			"Bedroom Scene",
			80.75,
			93.75,
			3,
			32,
			true
		],
		[
			"Annie Moves to Bedroom",
			80.75,
			88.5,
			6,
			33,
			true
		],
		[
			"C",
			81.2388759626679,
			81.66372053931171,
			9,
			9,
			true
		],
		[
			"Got No Husband Got No Wife",
			81.66372053931171,
			85.08992706658525,
			9,
			59,
			true
		],
		[
			"C",
			85.08992706658525,
			85.66568464234294,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			85.66568464234294,
			89.04643662416197,
			9,
			59,
			true
		],
		[
			"Hug Bear",
			88,
			93.75,
			7,
			83,
			true
		],
		[
			"C",
			89.04643662416197,
			89.62219419991966,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			89.62219419991966,
			93.0029461817387,
			9,
			59,
			true
		],
		[
			"Bear Disappears",
			91,
			93,
			4,
			86,
			true
		],
		[
			"Particles!",
			91,
			93,
			5,
			69,
			true
		],
		[
			"Child -> Teenager",
			91,
			93,
			6,
			39,
			true
		],
		[
			"C",
			93.0029461817387,
			93.57870375749638,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			93.57870375749638,
			96.95945573931542,
			9,
			59,
			true
		],
		[
			"Stage 2",
			93.75,
			136.33,
			3,
			1,
			true
		],
		[
			"Start Running",
			93.75,
			95.75,
			4,
			40,
			true
		],
		[
			"Fog 2-1",
			93.75,
			94.75,
			6,
			87,
			true
		],
		[
			"C",
			96.95945573931542,
			97.53521331507311,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			97.53521331507311,
			100.91596529689214,
			9,
			59,
			true
		],
		[
			"C",
			100.91596529689214,
			101.49172287264983,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			101.49172287264983,
			104.87247485446886,
			9,
			59,
			true
		],
		[
			"C",
			104.87247485446886,
			105.75151111875124,
			9,
			9,
			true
		],
		[
			"Let it go",
			105.75151111875124,
			106.86274509803904,
			9,
			72,
			true
		],
		[
			"C",
			106.86274509803904,
			109.67073005447433,
			9,
			9,
			true
		],
		[
			"Let it go",
			109.67073005447433,
			110.78196403376214,
			9,
			72,
			true
		],
		[
			"C",
			110.78196403376214,
			113.58994899019743,
			9,
			9,
			true
		],
		[
			"Let it go",
			113.58994899019743,
			114.70118296948523,
			9,
			72,
			true
		],
		[
			"C",
			114.70118296948523,
			117.50916792592052,
			9,
			9,
			true
		],
		[
			"Let it go",
			117.50916792592052,
			118.62040190520833,
			9,
			72,
			true
		],
		[
			"C",
			118.62040190520833,
			121.42838686164362,
			9,
			9,
			true
		],
		[
			"Eye to Eye",
			121.42838686164362,
			128.5625,
			9,
			73,
			true
		],
		[
			"Lock Annie's Direction",
			128,
			133,
			7,
			54,
			true
		],
		[
			"C",
			128.5625,
			128.7241434930207,
			9,
			9,
			true
		],
		[
			"I guess this is heaven",
			128.7241434930207,
			133.74237804878064,
			9,
			74,
			true
		],
		[
			"Exit House",
			129,
			150,
			4,
			31,
			true
		],
		[
			"Enter Hallway",
			129,
			136.33,
			5,
			84,
			true
		],
		[
			"Mirror Annies",
			133,
			143,
			6,
			53,
			true
		],
		[
			"C",
			133.74237804878064,
			137.24330725608723,
			9,
			9,
			true
		],
		[
			"Continue to Exit",
			136.33,
			150,
			5,
			85,
			true
		],
		[
			"Got no pride got no name ",
			137.24330725608723,
			144.37742039444362,
			9,
			73,
			true
		],
		[
			"Out the Door",
			142.19774718397994,
			144.6659664009374,
			7,
			30,
			true
		],
		[
			"Open Door",
			143.19257611767662,
			144.19372634723769,
			8,
			34,
			true
		],
		[
			"Stage 3",
			144,
			232.5,
			3,
			2,
			true
		],
		[
			"Neon Stage 3",
			144,
			164.90625,
			6,
			57,
			true
		],
		[
			"C",
			144.37742039444362,
			144.6851677835685,
			9,
			9,
			true
		],
		[
			"I guess this is heaven",
			144.6851677835685,
			149.70340233932842,
			9,
			74,
			true
		],
		[
			"C",
			149.70340233932842,
			150.51114972845303,
			9,
			9,
			true
		],
		[
			"Adult Ghost",
			150,
			153,
			4,
			88,
			true
		],
		[
			"I guess Im in heaven",
			150.51114972845303,
			156.22293267131008,
			9,
			75,
			true
		],
		[
			"Adult Ghost Burst",
			153,
			157,
			5,
			69,
			true
		],
		[
			"Adult Transformation",
			153,
			155,
			7,
			16,
			true
		],
		[
			"C",
			156.22293267131008,
			160.46901023121325,
			9,
			9,
			true
		],
		[
			"Fog 3-1",
			158,
			160.5,
			4,
			42,
			true
		],
		[
			"I guess Im in heaven",
			160.46901023121325,
			166.1807931740703,
			9,
			75,
			true
		],
		[
			"Fog 3-2",
			164.875,
			166.875,
			4,
			49,
			true
		],
		[
			"C",
			166.1807931740703,
			184.8544069658576,
			9,
			9,
			true
		],
		[
			"Reveal Buildings",
			169,
			170.5,
			5,
			17,
			true
		],
		[
			"Bounce Buildings",
			173,
			174.5,
			5,
			18,
			true
		],
		[
			"Bounce Buildings",
			177,
			178.5,
			5,
			18,
			true
		],
		[
			"Bounce Buildings",
			181,
			182.5,
			5,
			18,
			true
		],
		[
			"Bounce Buildings",
			184.5,
			186,
			5,
			18,
			true
		],
		[
			"As she moves to suicide",
			184.8544069658576,
			188.35701132349817,
			9,
			70,
			true
		],
		[
			"Fog 3-3",
			184.96875,
			186.96875,
			4,
			50,
			true
		],
		[
			"C",
			188.35701132349817,
			188.8685442525673,
			9,
			9,
			true
		],
		[
			"Bounce Buildings",
			188.75,
			190.5,
			5,
			18,
			true
		],
		[
			"In and Under Neon Lights",
			188.8685442525673,
			192.34436289592213,
			9,
			71,
			true
		],
		[
			"C",
			192.34436289592213,
			192.76920747256594,
			9,
			9,
			true
		],
		[
			"Bounce Buildings",
			192.75,
			194.25,
			5,
			18,
			true
		],
		[
			"Got No Husband Got No Wife",
			192.76920747256594,
			196.19541399983947,
			9,
			59,
			true
		],
		[
			"C",
			196.19541399983947,
			196.77117157559718,
			9,
			9,
			true
		],
		[
			"Bounce Buildings",
			196.75,
			198.25,
			5,
			18,
			true
		],
		[
			"All I Wants A View Tonight",
			196.77117157559718,
			200.1519235574162,
			9,
			59,
			true
		],
		[
			"Radical Riff",
			198.66336633663371,
			200.66336633663371,
			4,
			20,
			true
		],
		[
			"Bend City",
			200,
			205,
			6,
			19,
			true
		],
		[
			"C",
			200.1519235574162,
			200.72768113317392,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			200.72768113317392,
			204.10843311499295,
			9,
			59,
			true
		],
		[
			"C",
			204.10843311499295,
			204.68419069075065,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			204.68419069075065,
			208.06494267256969,
			9,
			59,
			true
		],
		[
			"C",
			208.06494267256969,
			208.6407002483274,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			208.6407002483274,
			212.02145223014642,
			9,
			59,
			true
		],
		[
			"Bounce Buildings",
			208.70544554455435,
			209.95544554455435,
			5,
			18,
			true
		],
		[
			"C",
			212.02145223014642,
			212.59720980590413,
			9,
			9,
			true
		],
		[
			"Bounce Buildings",
			212.57920792079193,
			213.82920792079193,
			5,
			18,
			true
		],
		[
			"All I Wants A View Tonight",
			212.59720980590413,
			216.47796178772305,
			9,
			59,
			true
		],
		[
			"Radical Riff",
			214.72277227722773,
			216.72277227722773,
			4,
			20,
			true
		],
		[
			"Got No Husband Got No Wife",
			216.47796178772305,
			219.90416831499658,
			9,
			59,
			true
		],
		[
			"Annie can Fly?",
			218.55,
			225.5,
			4,
			29,
			true
		],
		[
			"Inception Curve",
			218.56435643564362,
			232.4950495049505,
			6,
			21,
			true
		],
		[
			"C",
			219.90416831499658,
			220.4799258907543,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			220.4799258907543,
			223.86067787257332,
			9,
			59,
			true
		],
		[
			"C",
			223.86067787257332,
			224.43643544833103,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			224.43643544833103,
			227.81718743015006,
			9,
			59,
			true
		],
		[
			"Annie Flies",
			225.5,
			227.5,
			5,
			35,
			true
		],
		[
			"Split City",
			225.5,
			232.5,
			7,
			43,
			true
		],
		[
			"C",
			227.81718743015006,
			228.39294500590776,
			9,
			9,
			true
		],
		[
			"All I Wants A View Tonight",
			228.39294500590776,
			231.7736969877268,
			9,
			59,
			true
		],
		[
			"Neon Out",
			229,
			232.5,
			4,
			44,
			true
		],
		[
			"Fog 3-4",
			229,
			232.5,
			5,
			68,
			true
		],
		[
			"C",
			231.7736969877268,
			234.68278789681784,
			9,
			9,
			true
		],
		[
			"Stage 4",
			232.5,
			274,
			3,
			3,
			true
		],
		[
			"Neon In",
			232.5,
			235,
			4,
			45,
			true
		],
		[
			"As she moves to suicide",
			234.68278789681784,
			236.93539225445852,
			9,
			76,
			true
		],
		[
			"C",
			236.93539225445852,
			238.98337205243854,
			9,
			9,
			true
		],
		[
			"Under Neon Lights",
			238.98337205243854,
			241.38095238095232,
			9,
			77,
			true
		],
		[
			"C",
			241.38095238095232,
			242.6926516911275,
			9,
			9,
			true
		],
		[
			"Got No Husband",
			242.6926516911275,
			244.33361929398544,
			9,
			78,
			true
		],
		[
			"C",
			244.33361929398544,
			246.764366223208,
			9,
			9,
			true
		],
		[
			"Got No Wife",
			246.764366223208,
			248.59987505719255,
			9,
			79,
			true
		],
		[
			"C",
			248.59987505719255,
			250.74490770070088,
			9,
			9,
			true
		],
		[
			"All I Want",
			250.74490770070088,
			251.9675133088786,
			9,
			79,
			true
		],
		[
			"C",
			251.9675133088786,
			254.72544917819377,
			9,
			9,
			true
		],
		[
			"All I Want",
			254.72544917819377,
			255.9641838186298,
			9,
			79,
			true
		],
		[
			"C",
			255.9641838186298,
			258.7059906556867,
			9,
			9,
			true
		],
		[
			"All I Want",
			258.7059906556867,
			259.8963381993486,
			9,
			79,
			true
		],
		[
			"C",
			259.8963381993486,
			262.2994353589863,
			9,
			9,
			true
		],
		[
			"Is this really all I want",
			262.2994353589863,
			264.85637867247016,
			9,
			80,
			true
		],
		[
			"Fog Transition for Credits",
			264,
			268,
			7,
			81,
			true
		],
		[
			"NeonOut",
			269,
			270,
			8,
			44,
			true
		],
		[
			"Roll Credits",
			270,
			274,
			4,
			65,
			true
		],
		[
			"Fog Intro",
			300,
			302,
			2,
			52,
			true
		],
		[
			"Intro",
			300,
			302,
			3,
			48,
			true
		],
		[
			"Neon",
			300,
			302,
			4,
			58,
			true
		],
		[
			"Render",
			300,
			302,
			10,
			5,
			false
		],
		[
			"Ambient Music",
			325,
			385,
			0,
			61,
			true
		],
		[
			"VR Update",
			325,
			385,
			1,
			4,
			true
		],
		[
			"Update",
			325,
			385,
			2,
			62,
			true
		],
		[
			"Credits",
			325,
			385,
			3,
			60,
			true
		],
		[
			"Filter Settings",
			325,
			385,
			4,
			63,
			true
		],
		[
			"Credits Fade In",
			325,
			332.02,
			6,
			66,
			true
		],
		[
			"Render Loop",
			325,
			385,
			10,
			5,
			true
		],
		[
			"Roll Credit",
			330,
			336,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			337,
			341,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			342,
			346,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			347,
			351,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			352,
			356,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			357,
			361,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			362,
			366,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			367,
			371,
			5,
			64,
			true
		],
		[
			"Roll Credit",
			372,
			380,
			5,
			64,
			true
		],
		[
			"Fade Out Credits",
			382,
			384,
			6,
			67,
			true
		],
		[
			"Back to Intro",
			385,
			387,
			4,
			47,
			true
		]
	]
}
